unit uSE2RunOperation;

{$INCLUDE ScriptEngine.inc}

interface

uses
  Classes, uSE2RunType, uSE2OpCode, uSE2MemoryManager;

type
  TSE2VarOperation = class(TObject)
  private
    FVarHelp : TSE2VarHelper;
  public
    constructor Create(VarHelper: TSE2VarHelper);

    procedure Negation(Data: PSE2VarData);
    procedure Addition(Param1, Param2: PSE2VarData);
    procedure Substract(Param1, Param2: PSE2VarData);
    procedure Multiply(Param1, Param2: PSE2VarData);
    procedure Divide(Param1, Param2: PSE2VarData);
    procedure BitAnd(Param1, Param2: PSE2VarData);
    procedure BitOr(Param1, Param2: PSE2VarData);
    procedure BitXor(Param1, Param2: PSE2VarData);
    procedure BitShr(Param1, Param2: PSE2VarData);
    procedure BitShl(Param1, Param2: PSE2VarData);
    procedure DivideMod(Param1, Param2: PSE2VarData);
    procedure BitNot(Data: PSE2VarData);
    procedure BooleanNot(Data: PSE2VarData);
  end;

  TSE2VarCompare = class(TObject)
  private
    FVarHelp : TSE2VarHelper;
  public
    constructor Create(VarHelper: TSE2VarHelper);

    function  Equal(Param1, Param2: PSE2VarData): boolean;
    function  Smaller(Param1, Param2: PSE2VarData): boolean;
    function  SmallerEqual(Param1, Param2: PSE2VarData): boolean;
    function  Bigger(Param1, Param2: PSE2VarData): boolean;
    function  BiggerEqual(Param1, Param2: PSE2VarData): boolean;
    function  UnEqual(Param1, Param2: PSE2VarData): boolean;
  end;

type TOp_ADD = procedure(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);
var mTable_add: array[1..15, 1..15] of TOp_ADD;

type TOp_SUB = procedure(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);
var mTable_sub: array[1..15, 1..15] of TOp_SUB;

type TOp_MUL = procedure(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);
var mTable_mul: array[1..15, 1..15] of TOp_MUL;

type TOp_DIV = procedure(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);
var mTable_div: array[1..15, 1..15] of TOp_DIV;

type TOp_AND = procedure(p1, p2: PSE2VarData);
var mTable_and: array[1..15, 1..15] of TOp_AND;

type TOp_OR = procedure(p1, p2: PSE2VarData);
var mTable_or: array[1..15, 1..15] of TOp_OR;

type TOp_XOR = procedure(p1, p2: PSE2VarData);
var mTable_xor: array[1..15, 1..15] of TOp_XOR;

type TOp_SHR = procedure(p1, p2: PSE2VarData);
var mTable_shr: array[1..15, 1..15] of TOp_SHR;

type TOp_SHL = procedure(p1, p2: PSE2VarData);
var mTable_shl: array[1..15, 1..15] of TOp_SHL;

type TOp_MOD = procedure(p1, p2: PSE2VarData);
var mTable_mod: array[1..15, 1..15] of TOp_MOD;

type TOp_NOT = procedure(p1, p2: PSE2VarData);
var mTable_not: array[1..15, 1..15] of TOp_NOT;

type TOp_BNOT = procedure(p1, p2: PSE2VarData);
var mTable_bnot: array[1..15, 1..15] of TOp_BNOT;

type TOp_SMALLER = function(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;
var mTable_smaller: array[1..15, 1..15] of TOp_SMALLER;

type TOp_SMALLEREQUAL = function(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;
var mTable_smallerequal: array[1..15, 1..15] of TOp_SMALLEREQUAL;

type TOp_BIGGER = function(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;
var mTable_bigger: array[1..15, 1..15] of TOp_BIGGER;

type TOp_BIGGEREQUAL = function(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;
var mTable_biggerequal: array[1..15, 1..15] of TOp_BIGGEREQUAL;

type TOp_EQUAL = function(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;
var mTable_equal: array[1..15, 1..15] of TOp_EQUAL;

type TOp_UNEQUAL = function(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;
var mTable_unequal: array[1..15, 1..15] of TOp_UNEQUAL;

implementation

{ TSE2VarOperation }

{$Warnings off}

procedure TSE2VarOperation.Addition(Param1, Param2: PSE2VarData);
begin
  case Param1.AType of
  btU8 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu8^       := Param1^.tu8^ + Param2^.tu8^;
        btS8        : Param1^.tu8^       := Param1^.tu8^ + Param2^.ts8^;
        btU16       : Param1^.tu8^       := Param1^.tu8^ + Param2^.tu16^;
        btS16       : Param1^.tu8^       := Param1^.tu8^ + Param2^.ts16^;
        btU32       : Param1^.tu8^       := Param1^.tu8^ + Param2^.tu32^;
        btS32       : Param1^.tu8^       := Param1^.tu8^ + Param2^.ts32^;
        btS64       : Param1^.tu8^       := Param1^.tu8^ + Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.tu8^ + Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.tu8^ + Param2^.tDouble^);
        end;
      end;
  btS8 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts8^       := Param1^.ts8^ + Param2^.tu8^;
        btS8        : Param1^.ts8^       := Param1^.ts8^ + Param2^.ts8^;
        btU16       : Param1^.ts8^       := Param1^.ts8^ + Param2^.tu16^;
        btS16       : Param1^.ts8^       := Param1^.ts8^ + Param2^.ts16^;
        btU32       : Param1^.ts8^       := Param1^.ts8^ + Param2^.tu32^;
        btS32       : Param1^.ts8^       := Param1^.ts8^ + Param2^.ts32^;
        btS64       : Param1^.ts8^       := Param1^.ts8^ + Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.ts8^ + Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.ts8^ + Param2^.tDouble^);
        end;
      end;
  btU16 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu16^       := Param1^.tu16^ + Param2^.tu8^;
        btS8        : Param1^.tu16^       := Param1^.tu16^ + Param2^.ts8^;
        btU16       : Param1^.tu16^       := Param1^.tu16^ + Param2^.tu16^;
        btS16       : Param1^.tu16^       := Param1^.tu16^ + Param2^.ts16^;
        btU32       : Param1^.tu16^       := Param1^.tu16^ + Param2^.tu32^;
        btS32       : Param1^.tu16^       := Param1^.tu16^ + Param2^.ts32^;
        btS64       : Param1^.tu16^       := Param1^.tu16^ + Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.tu16^ + Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.tu16^ + Param2^.tDouble^);
        end;
      end;
  btS16 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts16^       := Param1^.ts16^ + Param2^.tu8^;
        btS8        : Param1^.ts16^       := Param1^.ts16^ + Param2^.ts8^;
        btU16       : Param1^.ts16^       := Param1^.ts16^ + Param2^.tu16^;
        btS16       : Param1^.ts16^       := Param1^.ts16^ + Param2^.ts16^;
        btU32       : Param1^.ts16^       := Param1^.ts16^ + Param2^.tu32^;
        btS32       : Param1^.ts16^       := Param1^.ts16^ + Param2^.ts32^;
        btS64       : Param1^.ts16^       := Param1^.ts16^ + Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.ts16^ + Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.ts16^ + Param2^.tDouble^);
        end;
      end;
  btU32 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu32^       := Param1^.tu32^ + Param2^.tu8^;
        btS8        : Param1^.tu32^       := Param1^.tu32^ + Param2^.ts8^;
        btU16       : Param1^.tu32^       := Param1^.tu32^ + Param2^.tu16^;
        btS16       : Param1^.tu32^       := Param1^.tu32^ + Param2^.ts16^;
        btU32       : Param1^.tu32^       := Param1^.tu32^ + Param2^.tu32^;
        btS32       : Param1^.tu32^       := Param1^.tu32^ + Param2^.ts32^;
        btS64       : Param1^.tu32^       := Param1^.tu32^ + Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.tu32^ + Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.tu32^ + Param2^.tDouble^);
        end;
      end;
  btS32 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts32^       := Param1^.ts32^ + Param2^.tu8^;
        btS8        : Param1^.ts32^       := Param1^.ts32^ + Param2^.ts8^;
        btU16       : Param1^.ts32^       := Param1^.ts32^ + Param2^.tu16^;
        btS16       : Param1^.ts32^       := Param1^.ts32^ + Param2^.ts16^;
        btU32       : Param1^.ts32^       := Param1^.ts32^ + Param2^.tu32^;
        btS32       : Param1^.ts32^       := Param1^.ts32^ + Param2^.ts32^;
        btS64       : Param1^.ts32^       := Param1^.ts32^ + Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.ts32^ + Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.ts32^ + Param2^.tDouble^);
        end;
      end;
  btS64 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts64^       := Param1^.ts64^ + Param2^.tu8^;
        btS8        : Param1^.ts64^       := Param1^.ts64^ + Param2^.ts8^;
        btU16       : Param1^.ts64^       := Param1^.ts64^ + Param2^.tu16^;
        btS16       : Param1^.ts64^       := Param1^.ts64^ + Param2^.ts16^;
        btU32       : Param1^.ts64^       := Param1^.ts64^ + Param2^.tu32^;
        btS32       : Param1^.ts64^       := Param1^.ts64^ + Param2^.ts32^;
        btS64       : Param1^.ts64^       := Param1^.ts64^ + Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.ts64^ + Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.ts64^ + Param2^.tDouble^);
        end;
      end;
  btSingle :
      begin
        case Param2.AType of
        btU8        : Param1^.tSingle^       := Param1^.tSingle^ + Param2^.tu8^;
        btS8        : Param1^.tSingle^       := Param1^.tSingle^ + Param2^.ts8^;
        btU16       : Param1^.tSingle^       := Param1^.tSingle^ + Param2^.tu16^;
        btS16       : Param1^.tSingle^       := Param1^.tSingle^ + Param2^.ts16^;
        btU32       : Param1^.tSingle^       := Param1^.tSingle^ + Param2^.tu32^;
        btS32       : Param1^.tSingle^       := Param1^.tSingle^ + Param2^.ts32^;
        btS64       : Param1^.tSingle^       := Param1^.tSingle^ + Param2^.ts64^;
        btSingle    : Param1^.tSingle^       := Param1^.tSingle^ + Param2^.tSingle^;
        btDouble    : Param1^.tSingle^       := Param1^.tSingle^ + Param2^.tDouble^;
        end;
      end;
  btDouble :
      begin
        case Param2.AType of
        btU8        : Param1^.tDouble^       := Param1^.tDouble^ + Param2^.tu8^;
        btS8        : Param1^.tDouble^       := Param1^.tDouble^ + Param2^.ts8^;
        btU16       : Param1^.tDouble^       := Param1^.tDouble^ + Param2^.tu16^;
        btS16       : Param1^.tDouble^       := Param1^.tDouble^ + Param2^.ts16^;
        btU32       : Param1^.tDouble^       := Param1^.tDouble^ + Param2^.tu32^;
        btS32       : Param1^.tDouble^       := Param1^.tDouble^ + Param2^.ts32^;
        btS64       : Param1^.tDouble^       := Param1^.tDouble^ + Param2^.ts64^;
        btSingle    : Param1^.tDouble^       := Param1^.tDouble^ + Param2^.tSingle^;
        btDouble    : Param1^.tDouble^       := Param1^.tDouble^ + Param2^.tDouble^;
        end;
      end;
  btString :
      begin
        case Param2.AType of
        btString       : PbtString(Param1^.tString^)^ := PbtString(Param1^.tString^)^ + PbtString(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btString);
              PbtString(Param1^.tString^)^ := PbtString(Param1^.tString^)^ + PbtString(Param2^.tString^)^;
            end;
        end;
      end;
  btUTF8String :
      begin
        case Param2.AType of
        btUTF8String   : PbtUTF8String(Param1^.tString^)^ := PbtUTF8String(Param1^.tString^)^ + PbtUTF8String(Param2^.tString^)^;
        btString,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btUTF8String);
              PbtUTF8String(Param1^.tString^)^ := PbtUTF8String(Param1^.tString^)^ + PbtUTF8String(Param2^.tString^)^;
            end;
        end;
      end;
  btWideString :
      begin
        case Param2.AType of
        btWideString   : PbtWideString(Param1^.tString^)^ := PbtWideString(Param1^.tString^)^ + PbtWideString(Param2^.tString^)^;
        btString,
        btUTF8String,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btWideString);
              PbtWideString(Param1^.tString^)^ := PbtWideString(Param1^.tString^)^ + PbtWideString(Param2^.tString^)^;
            end;
        end;
      end;
  btPChar :
      begin
        if not (Param2.AType in [btPChar, btString, btUTF8String, btWideString]) then
           exit;
        FVarHelp.ConvertContent(Param1, btString);
        case Param2.AType of
        btString       : PbtString(Param1^.tString^)^ := PbtString(Param1^.tString^)^ + PbtString(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btString);
              PbtString(Param1^.tString^)^ := PbtString(Param1^.tString^)^ + PbtString(Param2^.tString^)^;
            end;
        end;
        FVarHelp.ConvertContent(Param1, btPChar);
      end;
  end;
end;

procedure TSE2VarOperation.BitAnd(Param1, Param2: PSE2VarData);
begin
  case Param1.AType of
  btU8 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu8^       := Param1^.tu8^ and Param2^.tu8^;
        btS8        : Param1^.tu8^       := Param1^.tu8^ and Param2^.ts8^;
        btU16       : Param1^.tu8^       := Param1^.tu8^ and Param2^.tu16^;
        btS16       : Param1^.tu8^       := Param1^.tu8^ and Param2^.ts16^;
        btU32       : Param1^.tu8^       := Param1^.tu8^ and Param2^.tu32^;
        btS32       : Param1^.tu8^       := Param1^.tu8^ and Param2^.ts32^;
        btS64       : Param1^.tu8^       := Param1^.tu8^ and Param2^.ts64^;
        end;
      end;
  btS8 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts8^       := Param1^.ts8^ and Param2^.tu8^;
        btS8        : Param1^.ts8^       := Param1^.ts8^ and Param2^.ts8^;
        btU16       : Param1^.ts8^       := Param1^.ts8^ and Param2^.tu16^;
        btS16       : Param1^.ts8^       := Param1^.ts8^ and Param2^.ts16^;
        btU32       : Param1^.ts8^       := Param1^.ts8^ and Param2^.tu32^;
        btS32       : Param1^.ts8^       := Param1^.ts8^ and Param2^.ts32^;
        btS64       : Param1^.ts8^       := Param1^.ts8^ and Param2^.ts64^;
        end;
      end;
  btU16 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu16^       := Param1^.tu16^ and Param2^.tu8^;
        btS8        : Param1^.tu16^       := Param1^.tu16^ and Param2^.ts8^;
        btU16       : Param1^.tu16^       := Param1^.tu16^ and Param2^.tu16^;
        btS16       : Param1^.tu16^       := Param1^.tu16^ and Param2^.ts16^;
        btU32       : Param1^.tu16^       := Param1^.tu16^ and Param2^.tu32^;
        btS32       : Param1^.tu16^       := Param1^.tu16^ and Param2^.ts32^;
        btS64       : Param1^.tu16^       := Param1^.tu16^ and Param2^.ts64^;
        end;
      end;
  btS16 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts16^       := Param1^.ts16^ and Param2^.tu8^;
        btS8        : Param1^.ts16^       := Param1^.ts16^ and Param2^.ts8^;
        btU16       : Param1^.ts16^       := Param1^.ts16^ and Param2^.tu16^;
        btS16       : Param1^.ts16^       := Param1^.ts16^ and Param2^.ts16^;
        btU32       : Param1^.ts16^       := Param1^.ts16^ and Param2^.tu32^;
        btS32       : Param1^.ts16^       := Param1^.ts16^ and Param2^.ts32^;
        btS64       : Param1^.ts16^       := Param1^.ts16^ and Param2^.ts64^;
        end;
      end;
  btU32 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu32^       := Param1^.tu32^ and Param2^.tu8^;
        btS8        : Param1^.tu32^       := Param1^.tu32^ and Param2^.ts8^;
        btU16       : Param1^.tu32^       := Param1^.tu32^ and Param2^.tu16^;
        btS16       : Param1^.tu32^       := Param1^.tu32^ and Param2^.ts16^;
        btU32       : Param1^.tu32^       := Param1^.tu32^ and Param2^.tu32^;
        btS32       : Param1^.tu32^       := Param1^.tu32^ and Param2^.ts32^;
        btS64       : Param1^.tu32^       := Param1^.tu32^ and Param2^.ts64^;
        end;
      end;
  btS32 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts32^       := Param1^.ts32^ and Param2^.tu8^;
        btS8        : Param1^.ts32^       := Param1^.ts32^ and Param2^.ts8^;
        btU16       : Param1^.ts32^       := Param1^.ts32^ and Param2^.tu16^;
        btS16       : Param1^.ts32^       := Param1^.ts32^ and Param2^.ts16^;
        btU32       : Param1^.ts32^       := Param1^.ts32^ and Param2^.tu32^;
        btS32       : Param1^.ts32^       := Param1^.ts32^ and Param2^.ts32^;
        btS64       : Param1^.ts32^       := Param1^.ts32^ and Param2^.ts64^;
        end;
      end;
  btS64 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts64^       := Param1^.ts64^ and Param2^.tu8^;
        btS8        : Param1^.ts64^       := Param1^.ts64^ and Param2^.ts8^;
        btU16       : Param1^.ts64^       := Param1^.ts64^ and Param2^.tu16^;
        btS16       : Param1^.ts64^       := Param1^.ts64^ and Param2^.ts16^;
        btU32       : Param1^.ts64^       := Param1^.ts64^ and Param2^.tu32^;
        btS32       : Param1^.ts64^       := Param1^.ts64^ and Param2^.ts32^;
        btS64       : Param1^.ts64^       := Param1^.ts64^ and Param2^.ts64^;
        end;
      end;
  end;
end;

procedure TSE2VarOperation.BitNot(Data: PSE2VarData);
begin
  case Data^.AType of
  btU8          : Data^.tu8^      := not Data^.tu8^;
  btS8          : Data^.ts8^      := not Data^.ts8^;
  btU16         : Data^.tu16^     := not Data^.tu16^;
  btS16         : Data^.ts16^     := not Data^.ts16^;
  btU32         : Data^.tu32^     := not Data^.tu32^;
  btS32         : Data^.ts32^     := not Data^.ts32^;
  btS64         : Data^.ts64^     := not Data^.ts64^;
  end;
end;

procedure TSE2VarOperation.BitOr(Param1, Param2: PSE2VarData);
begin
  case Param1.AType of
  btU8 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu8^       := Param1^.tu8^ or Param2^.tu8^;
        btS8        : Param1^.tu8^       := Param1^.tu8^ or Param2^.ts8^;
        btU16       : Param1^.tu8^       := Param1^.tu8^ or Param2^.tu16^;
        btS16       : Param1^.tu8^       := Param1^.tu8^ or Param2^.ts16^;
        btU32       : Param1^.tu8^       := Param1^.tu8^ or Param2^.tu32^;
        btS32       : Param1^.tu8^       := Param1^.tu8^ or Param2^.ts32^;
        btS64       : Param1^.tu8^       := Param1^.tu8^ or Param2^.ts64^;
        end;
      end;
  btS8 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts8^       := Param1^.ts8^ or Param2^.tu8^;
        btS8        : Param1^.ts8^       := Param1^.ts8^ or Param2^.ts8^;
        btU16       : Param1^.ts8^       := Param1^.ts8^ or Param2^.tu16^;
        btS16       : Param1^.ts8^       := Param1^.ts8^ or Param2^.ts16^;
        btU32       : Param1^.ts8^       := Param1^.ts8^ or Param2^.tu32^;
        btS32       : Param1^.ts8^       := Param1^.ts8^ or Param2^.ts32^;
        btS64       : Param1^.ts8^       := Param1^.ts8^ or Param2^.ts64^;
        end;
      end;
  btU16 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu16^       := Param1^.tu16^ or Param2^.tu8^;
        btS8        : Param1^.tu16^       := Param1^.tu16^ or Param2^.ts8^;
        btU16       : Param1^.tu16^       := Param1^.tu16^ or Param2^.tu16^;
        btS16       : Param1^.tu16^       := Param1^.tu16^ or Param2^.ts16^;
        btU32       : Param1^.tu16^       := Param1^.tu16^ or Param2^.tu32^;
        btS32       : Param1^.tu16^       := Param1^.tu16^ or Param2^.ts32^;
        btS64       : Param1^.tu16^       := Param1^.tu16^ or Param2^.ts64^;
        end;
      end;
  btS16 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts16^       := Param1^.ts16^ or Param2^.tu8^;
        btS8        : Param1^.ts16^       := Param1^.ts16^ or Param2^.ts8^;
        btU16       : Param1^.ts16^       := Param1^.ts16^ or Param2^.tu16^;
        btS16       : Param1^.ts16^       := Param1^.ts16^ or Param2^.ts16^;
        btU32       : Param1^.ts16^       := Param1^.ts16^ or Param2^.tu32^;
        btS32       : Param1^.ts16^       := Param1^.ts16^ or Param2^.ts32^;
        btS64       : Param1^.ts16^       := Param1^.ts16^ or Param2^.ts64^;
        end;
      end;
  btU32 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu32^       := Param1^.tu32^ or Param2^.tu8^;
        btS8        : Param1^.tu32^       := Param1^.tu32^ or Param2^.ts8^;
        btU16       : Param1^.tu32^       := Param1^.tu32^ or Param2^.tu16^;
        btS16       : Param1^.tu32^       := Param1^.tu32^ or Param2^.ts16^;
        btU32       : Param1^.tu32^       := Param1^.tu32^ or Param2^.tu32^;
        btS32       : Param1^.tu32^       := Param1^.tu32^ or Param2^.ts32^;
        btS64       : Param1^.tu32^       := Param1^.tu32^ or Param2^.ts64^;
        end;
      end;
  btS32 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts32^       := Param1^.ts32^ or Param2^.tu8^;
        btS8        : Param1^.ts32^       := Param1^.ts32^ or Param2^.ts8^;
        btU16       : Param1^.ts32^       := Param1^.ts32^ or Param2^.tu16^;
        btS16       : Param1^.ts32^       := Param1^.ts32^ or Param2^.ts16^;
        btU32       : Param1^.ts32^       := Param1^.ts32^ or Param2^.tu32^;
        btS32       : Param1^.ts32^       := Param1^.ts32^ or Param2^.ts32^;
        btS64       : Param1^.ts32^       := Param1^.ts32^ or Param2^.ts64^;
        end;
      end;
  btS64 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts64^       := Param1^.ts64^ or Param2^.tu8^;
        btS8        : Param1^.ts64^       := Param1^.ts64^ or Param2^.ts8^;
        btU16       : Param1^.ts64^       := Param1^.ts64^ or Param2^.tu16^;
        btS16       : Param1^.ts64^       := Param1^.ts64^ or Param2^.ts16^;
        btU32       : Param1^.ts64^       := Param1^.ts64^ or Param2^.tu32^;
        btS32       : Param1^.ts64^       := Param1^.ts64^ or Param2^.ts32^;
        btS64       : Param1^.ts64^       := Param1^.ts64^ or Param2^.ts64^;
        end;
      end;
  end;
end;

procedure TSE2VarOperation.BitShl(Param1, Param2: PSE2VarData);
begin
  case Param1.AType of
  btU8 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu8^       := Param1^.tu8^ shl Param2^.tu8^;
        btS8        : Param1^.tu8^       := Param1^.tu8^ shl Param2^.ts8^;
        btU16       : Param1^.tu8^       := Param1^.tu8^ shl Param2^.tu16^;
        btS16       : Param1^.tu8^       := Param1^.tu8^ shl Param2^.ts16^;
        btU32       : Param1^.tu8^       := Param1^.tu8^ shl Param2^.tu32^;
        btS32       : Param1^.tu8^       := Param1^.tu8^ shl Param2^.ts32^;
        btS64       : Param1^.tu8^       := Param1^.tu8^ shl Param2^.ts64^;
        end;
      end;
  btS8 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts8^       := Param1^.ts8^ shl Param2^.tu8^;
        btS8        : Param1^.ts8^       := Param1^.ts8^ shl Param2^.ts8^;
        btU16       : Param1^.ts8^       := Param1^.ts8^ shl Param2^.tu16^;
        btS16       : Param1^.ts8^       := Param1^.ts8^ shl Param2^.ts16^;
        btU32       : Param1^.ts8^       := Param1^.ts8^ shl Param2^.tu32^;
        btS32       : Param1^.ts8^       := Param1^.ts8^ shl Param2^.ts32^;
        btS64       : Param1^.ts8^       := Param1^.ts8^ shl Param2^.ts64^;
        end;
      end;
  btU16 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu16^       := Param1^.tu16^ shl Param2^.tu8^;
        btS8        : Param1^.tu16^       := Param1^.tu16^ shl Param2^.ts8^;
        btU16       : Param1^.tu16^       := Param1^.tu16^ shl Param2^.tu16^;
        btS16       : Param1^.tu16^       := Param1^.tu16^ shl Param2^.ts16^;
        btU32       : Param1^.tu16^       := Param1^.tu16^ shl Param2^.tu32^;
        btS32       : Param1^.tu16^       := Param1^.tu16^ shl Param2^.ts32^;
        btS64       : Param1^.tu16^       := Param1^.tu16^ shl Param2^.ts64^;
        end;
      end;
  btS16 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts16^       := Param1^.ts16^ shl Param2^.tu8^;
        btS8        : Param1^.ts16^       := Param1^.ts16^ shl Param2^.ts8^;
        btU16       : Param1^.ts16^       := Param1^.ts16^ shl Param2^.tu16^;
        btS16       : Param1^.ts16^       := Param1^.ts16^ shl Param2^.ts16^;
        btU32       : Param1^.ts16^       := Param1^.ts16^ shl Param2^.tu32^;
        btS32       : Param1^.ts16^       := Param1^.ts16^ shl Param2^.ts32^;
        btS64       : Param1^.ts16^       := Param1^.ts16^ shl Param2^.ts64^;
        end;
      end;
  btU32 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu32^       := Param1^.tu32^ shl Param2^.tu8^;
        btS8        : Param1^.tu32^       := Param1^.tu32^ shl Param2^.ts8^;
        btU16       : Param1^.tu32^       := Param1^.tu32^ shl Param2^.tu16^;
        btS16       : Param1^.tu32^       := Param1^.tu32^ shl Param2^.ts16^;
        btU32       : Param1^.tu32^       := Param1^.tu32^ shl Param2^.tu32^;
        btS32       : Param1^.tu32^       := Param1^.tu32^ shl Param2^.ts32^;
        btS64       : Param1^.tu32^       := Param1^.tu32^ shl Param2^.ts64^;
        end;
      end;
  btS32 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts32^       := Param1^.ts32^ shl Param2^.tu8^;
        btS8        : Param1^.ts32^       := Param1^.ts32^ shl Param2^.ts8^;
        btU16       : Param1^.ts32^       := Param1^.ts32^ shl Param2^.tu16^;
        btS16       : Param1^.ts32^       := Param1^.ts32^ shl Param2^.ts16^;
        btU32       : Param1^.ts32^       := Param1^.ts32^ shl Param2^.tu32^;
        btS32       : Param1^.ts32^       := Param1^.ts32^ shl Param2^.ts32^;
        btS64       : Param1^.ts32^       := Param1^.ts32^ shl Param2^.ts64^;
        end;
      end;
  btS64 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts64^       := Param1^.ts64^ shl Param2^.tu8^;
        btS8        : Param1^.ts64^       := Param1^.ts64^ shl Param2^.ts8^;
        btU16       : Param1^.ts64^       := Param1^.ts64^ shl Param2^.tu16^;
        btS16       : Param1^.ts64^       := Param1^.ts64^ shl Param2^.ts16^;
        btU32       : Param1^.ts64^       := Param1^.ts64^ shl Param2^.tu32^;
        btS32       : Param1^.ts64^       := Param1^.ts64^ shl Param2^.ts32^;
        btS64       : Param1^.ts64^       := Param1^.ts64^ shl Param2^.ts64^;
        end;
      end;
  end;
end;

procedure TSE2VarOperation.BitShr(Param1, Param2: PSE2VarData);
begin
  case Param1.AType of
  btU8 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu8^       := Param1^.tu8^ shr Param2^.tu8^;
        btS8        : Param1^.tu8^       := Param1^.tu8^ shr Param2^.ts8^;
        btU16       : Param1^.tu8^       := Param1^.tu8^ shr Param2^.tu16^;
        btS16       : Param1^.tu8^       := Param1^.tu8^ shr Param2^.ts16^;
        btU32       : Param1^.tu8^       := Param1^.tu8^ shr Param2^.tu32^;
        btS32       : Param1^.tu8^       := Param1^.tu8^ shr Param2^.ts32^;
        btS64       : Param1^.tu8^       := Param1^.tu8^ shr Param2^.ts64^;
        end;
      end;
  btS8 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts8^       := Param1^.ts8^ shr Param2^.tu8^;
        btS8        : Param1^.ts8^       := Param1^.ts8^ shr Param2^.ts8^;
        btU16       : Param1^.ts8^       := Param1^.ts8^ shr Param2^.tu16^;
        btS16       : Param1^.ts8^       := Param1^.ts8^ shr Param2^.ts16^;
        btU32       : Param1^.ts8^       := Param1^.ts8^ shr Param2^.tu32^;
        btS32       : Param1^.ts8^       := Param1^.ts8^ shr Param2^.ts32^;
        btS64       : Param1^.ts8^       := Param1^.ts8^ shr Param2^.ts64^;
        end;
      end;
  btU16 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu16^       := Param1^.tu16^ shr Param2^.tu8^;
        btS8        : Param1^.tu16^       := Param1^.tu16^ shr Param2^.ts8^;
        btU16       : Param1^.tu16^       := Param1^.tu16^ shr Param2^.tu16^;
        btS16       : Param1^.tu16^       := Param1^.tu16^ shr Param2^.ts16^;
        btU32       : Param1^.tu16^       := Param1^.tu16^ shr Param2^.tu32^;
        btS32       : Param1^.tu16^       := Param1^.tu16^ shr Param2^.ts32^;
        btS64       : Param1^.tu16^       := Param1^.tu16^ shr Param2^.ts64^;
        end;
      end;
  btS16 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts16^       := Param1^.ts16^ shr Param2^.tu8^;
        btS8        : Param1^.ts16^       := Param1^.ts16^ shr Param2^.ts8^;
        btU16       : Param1^.ts16^       := Param1^.ts16^ shr Param2^.tu16^;
        btS16       : Param1^.ts16^       := Param1^.ts16^ shr Param2^.ts16^;
        btU32       : Param1^.ts16^       := Param1^.ts16^ shr Param2^.tu32^;
        btS32       : Param1^.ts16^       := Param1^.ts16^ shr Param2^.ts32^;
        btS64       : Param1^.ts16^       := Param1^.ts16^ shr Param2^.ts64^;
        end;
      end;
  btU32 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu32^       := Param1^.tu32^ shr Param2^.tu8^;
        btS8        : Param1^.tu32^       := Param1^.tu32^ shr Param2^.ts8^;
        btU16       : Param1^.tu32^       := Param1^.tu32^ shr Param2^.tu16^;
        btS16       : Param1^.tu32^       := Param1^.tu32^ shr Param2^.ts16^;
        btU32       : Param1^.tu32^       := Param1^.tu32^ shr Param2^.tu32^;
        btS32       : Param1^.tu32^       := Param1^.tu32^ shr Param2^.ts32^;
        btS64       : Param1^.tu32^       := Param1^.tu32^ shr Param2^.ts64^;
        end;
      end;
  btS32 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts32^       := Param1^.ts32^ shr Param2^.tu8^;
        btS8        : Param1^.ts32^       := Param1^.ts32^ shr Param2^.ts8^;
        btU16       : Param1^.ts32^       := Param1^.ts32^ shr Param2^.tu16^;
        btS16       : Param1^.ts32^       := Param1^.ts32^ shr Param2^.ts16^;
        btU32       : Param1^.ts32^       := Param1^.ts32^ shr Param2^.tu32^;
        btS32       : Param1^.ts32^       := Param1^.ts32^ shr Param2^.ts32^;
        btS64       : Param1^.ts32^       := Param1^.ts32^ shr Param2^.ts64^;
        end;
      end;
  btS64 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts64^       := Param1^.ts64^ shr Param2^.tu8^;
        btS8        : Param1^.ts64^       := Param1^.ts64^ shr Param2^.ts8^;
        btU16       : Param1^.ts64^       := Param1^.ts64^ shr Param2^.tu16^;
        btS16       : Param1^.ts64^       := Param1^.ts64^ shr Param2^.ts16^;
        btU32       : Param1^.ts64^       := Param1^.ts64^ shr Param2^.tu32^;
        btS32       : Param1^.ts64^       := Param1^.ts64^ shr Param2^.ts32^;
        btS64       : Param1^.ts64^       := Param1^.ts64^ shr Param2^.ts64^;
        end;
      end;
  end;
end;

procedure TSE2VarOperation.BitXor(Param1, Param2: PSE2VarData);
begin
  case Param1.AType of
  btU8 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu8^       := Param1^.tu8^ xor Param2^.tu8^;
        btS8        : Param1^.tu8^       := Param1^.tu8^ xor Param2^.ts8^;
        btU16       : Param1^.tu8^       := Param1^.tu8^ xor Param2^.tu16^;
        btS16       : Param1^.tu8^       := Param1^.tu8^ xor Param2^.ts16^;
        btU32       : Param1^.tu8^       := Param1^.tu8^ xor Param2^.tu32^;
        btS32       : Param1^.tu8^       := Param1^.tu8^ xor Param2^.ts32^;
        btS64       : Param1^.tu8^       := Param1^.tu8^ xor Param2^.ts64^;
        end;
      end;
  btS8 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts8^       := Param1^.ts8^ xor Param2^.tu8^;
        btS8        : Param1^.ts8^       := Param1^.ts8^ xor Param2^.ts8^;
        btU16       : Param1^.ts8^       := Param1^.ts8^ xor Param2^.tu16^;
        btS16       : Param1^.ts8^       := Param1^.ts8^ xor Param2^.ts16^;
        btU32       : Param1^.ts8^       := Param1^.ts8^ xor Param2^.tu32^;
        btS32       : Param1^.ts8^       := Param1^.ts8^ xor Param2^.ts32^;
        btS64       : Param1^.ts8^       := Param1^.ts8^ xor Param2^.ts64^;
        end;
      end;
  btU16 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu16^       := Param1^.tu16^ xor Param2^.tu8^;
        btS8        : Param1^.tu16^       := Param1^.tu16^ xor Param2^.ts8^;
        btU16       : Param1^.tu16^       := Param1^.tu16^ xor Param2^.tu16^;
        btS16       : Param1^.tu16^       := Param1^.tu16^ xor Param2^.ts16^;
        btU32       : Param1^.tu16^       := Param1^.tu16^ xor Param2^.tu32^;
        btS32       : Param1^.tu16^       := Param1^.tu16^ xor Param2^.ts32^;
        btS64       : Param1^.tu16^       := Param1^.tu16^ xor Param2^.ts64^;
        end;
      end;
  btS16 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts16^       := Param1^.ts16^ xor Param2^.tu8^;
        btS8        : Param1^.ts16^       := Param1^.ts16^ xor Param2^.ts8^;
        btU16       : Param1^.ts16^       := Param1^.ts16^ xor Param2^.tu16^;
        btS16       : Param1^.ts16^       := Param1^.ts16^ xor Param2^.ts16^;
        btU32       : Param1^.ts16^       := Param1^.ts16^ xor Param2^.tu32^;
        btS32       : Param1^.ts16^       := Param1^.ts16^ xor Param2^.ts32^;
        btS64       : Param1^.ts16^       := Param1^.ts16^ xor Param2^.ts64^;
        end;
      end;
  btU32 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu32^       := Param1^.tu32^ xor Param2^.tu8^;
        btS8        : Param1^.tu32^       := Param1^.tu32^ xor Param2^.ts8^;
        btU16       : Param1^.tu32^       := Param1^.tu32^ xor Param2^.tu16^;
        btS16       : Param1^.tu32^       := Param1^.tu32^ xor Param2^.ts16^;
        btU32       : Param1^.tu32^       := Param1^.tu32^ xor Param2^.tu32^;
        btS32       : Param1^.tu32^       := Param1^.tu32^ xor Param2^.ts32^;
        btS64       : Param1^.tu32^       := Param1^.tu32^ xor Param2^.ts64^;
        end;
      end;
  btS32 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts32^       := Param1^.ts32^ xor Param2^.tu8^;
        btS8        : Param1^.ts32^       := Param1^.ts32^ xor Param2^.ts8^;
        btU16       : Param1^.ts32^       := Param1^.ts32^ xor Param2^.tu16^;
        btS16       : Param1^.ts32^       := Param1^.ts32^ xor Param2^.ts16^;
        btU32       : Param1^.ts32^       := Param1^.ts32^ xor Param2^.tu32^;
        btS32       : Param1^.ts32^       := Param1^.ts32^ xor Param2^.ts32^;
        btS64       : Param1^.ts32^       := Param1^.ts32^ xor Param2^.ts64^;
        end;
      end;
  btS64 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts64^       := Param1^.ts64^ xor Param2^.tu8^;
        btS8        : Param1^.ts64^       := Param1^.ts64^ xor Param2^.ts8^;
        btU16       : Param1^.ts64^       := Param1^.ts64^ xor Param2^.tu16^;
        btS16       : Param1^.ts64^       := Param1^.ts64^ xor Param2^.ts16^;
        btU32       : Param1^.ts64^       := Param1^.ts64^ xor Param2^.tu32^;
        btS32       : Param1^.ts64^       := Param1^.ts64^ xor Param2^.ts32^;
        btS64       : Param1^.ts64^       := Param1^.ts64^ xor Param2^.ts64^;
        end;
      end;
  end;
end;

procedure TSE2VarOperation.BooleanNot(Data: PSE2VarData);
begin
  case Data^.AType of
  btBoolean     :
      begin
        if Data^.tu8^ <> 0 then
           Data^.tu8^ := 0
        else
           Data^.tu8^ := 1;
      end;
  btS8          : Data^.ts8^      := TbtS8(not boolean(Data^.ts8^));
  btU16         : Data^.tu16^     := TbtU16(not boolean(Data^.tu16^));
  btS16         : Data^.ts16^     := TbtS16(not boolean(Data^.ts16^));
  btU32         : Data^.tu32^     := TbtU32(not boolean(Data^.tu32^));
  btS32         : Data^.ts32^     := TbtS32(not boolean(Data^.ts32^));
  btS64         : Data^.ts64^     := TbtS64(not boolean(Data^.ts64^));
  end;
end;

constructor TSE2VarOperation.Create(VarHelper: TSE2VarHelper);
begin
  inherited Create;
  FVarHelp := VarHelper;
end;

procedure TSE2VarOperation.Divide(Param1, Param2: PSE2VarData);
begin
  case Param1.AType of
  btU8 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu8^       := Param1^.tu8^ div Param2^.tu8^;
        btS8        : Param1^.tu8^       := Param1^.tu8^ div Param2^.ts8^;
        btU16       : Param1^.tu8^       := Param1^.tu8^ div Param2^.tu16^;
        btS16       : Param1^.tu8^       := Param1^.tu8^ div Param2^.ts16^;
        btU32       : Param1^.tu8^       := Param1^.tu8^ div Param2^.tu32^;
        btS32       : Param1^.tu8^       := Param1^.tu8^ div Param2^.ts32^;
        btS64       : Param1^.tu8^       := Param1^.tu8^ div Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.tu8^ / Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.tu8^ / Param2^.tDouble^);
        end;
      end;
  btS8 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts8^       := Param1^.ts8^ div Param2^.tu8^;
        btS8        : Param1^.ts8^       := Param1^.ts8^ div Param2^.ts8^;
        btU16       : Param1^.ts8^       := Param1^.ts8^ div Param2^.tu16^;
        btS16       : Param1^.ts8^       := Param1^.ts8^ div Param2^.ts16^;
        btU32       : Param1^.ts8^       := Param1^.ts8^ div Param2^.tu32^;
        btS32       : Param1^.ts8^       := Param1^.ts8^ div Param2^.ts32^;
        btS64       : Param1^.ts8^       := Param1^.ts8^ div Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.ts8^ / Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.ts8^ / Param2^.tDouble^);
        end;
      end;
  btU16 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu16^       := Param1^.tu16^ div Param2^.tu8^;
        btS8        : Param1^.tu16^       := Param1^.tu16^ div Param2^.ts8^;
        btU16       : Param1^.tu16^       := Param1^.tu16^ div Param2^.tu16^;
        btS16       : Param1^.tu16^       := Param1^.tu16^ div Param2^.ts16^;
        btU32       : Param1^.tu16^       := Param1^.tu16^ div Param2^.tu32^;
        btS32       : Param1^.tu16^       := Param1^.tu16^ div Param2^.ts32^;
        btS64       : Param1^.tu16^       := Param1^.tu16^ div Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.tu16^ / Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.tu16^ / Param2^.tDouble^);
        end;
      end;
  btS16 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts16^       := Param1^.ts16^ div Param2^.tu8^;
        btS8        : Param1^.ts16^       := Param1^.ts16^ div Param2^.ts8^;
        btU16       : Param1^.ts16^       := Param1^.ts16^ div Param2^.tu16^;
        btS16       : Param1^.ts16^       := Param1^.ts16^ div Param2^.ts16^;
        btU32       : Param1^.ts16^       := Param1^.ts16^ div Param2^.tu32^;
        btS32       : Param1^.ts16^       := Param1^.ts16^ div Param2^.ts32^;
        btS64       : Param1^.ts16^       := Param1^.ts16^ div Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.ts16^ / Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.ts16^ / Param2^.tDouble^);
        end;
      end;
  btU32 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu32^       := Param1^.tu32^ div Param2^.tu8^;
        btS8        : Param1^.tu32^       := Param1^.tu32^ div Param2^.ts8^;
        btU16       : Param1^.tu32^       := Param1^.tu32^ div Param2^.tu16^;
        btS16       : Param1^.tu32^       := Param1^.tu32^ div Param2^.ts16^;
        btU32       : Param1^.tu32^       := Param1^.tu32^ div Param2^.tu32^;
        btS32       : Param1^.tu32^       := Param1^.tu32^ div Param2^.ts32^;
        btS64       : Param1^.tu32^       := Param1^.tu32^ div Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.tu32^ / Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.tu32^ / Param2^.tDouble^);
        end;
      end;
  btS32 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts32^       := Param1^.ts32^ div Param2^.tu8^;
        btS8        : Param1^.ts32^       := Param1^.ts32^ div Param2^.ts8^;
        btU16       : Param1^.ts32^       := Param1^.ts32^ div Param2^.tu16^;
        btS16       : Param1^.ts32^       := Param1^.ts32^ div Param2^.ts16^;
        btU32       : Param1^.ts32^       := Param1^.ts32^ div Param2^.tu32^;
        btS32       : Param1^.ts32^       := Param1^.ts32^ div Param2^.ts32^;
        btS64       : Param1^.ts32^       := Param1^.ts32^ div Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.ts32^ / Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.ts32^ / Param2^.tDouble^);
        end;
      end;
  btS64 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts64^       := Param1^.ts64^ div Param2^.tu8^;
        btS8        : Param1^.ts64^       := Param1^.ts64^ div Param2^.ts8^;
        btU16       : Param1^.ts64^       := Param1^.ts64^ div Param2^.tu16^;
        btS16       : Param1^.ts64^       := Param1^.ts64^ div Param2^.ts16^;
        btU32       : Param1^.ts64^       := Param1^.ts64^ div Param2^.tu32^;
        btS32       : Param1^.ts64^       := Param1^.ts64^ div Param2^.ts32^;
        btS64       : Param1^.ts64^       := Param1^.ts64^ div Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.ts64^ / Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.ts64^ / Param2^.tDouble^);
        end;
      end;
  btSingle :
      begin
        case Param2.AType of
        btU8        : Param1^.tSingle^       := Param1^.tSingle^ / Param2^.tu8^;
        btS8        : Param1^.tSingle^       := Param1^.tSingle^ / Param2^.ts8^;
        btU16       : Param1^.tSingle^       := Param1^.tSingle^ / Param2^.tu16^;
        btS16       : Param1^.tSingle^       := Param1^.tSingle^ / Param2^.ts16^;
        btU32       : Param1^.tSingle^       := Param1^.tSingle^ / Param2^.tu32^;
        btS32       : Param1^.tSingle^       := Param1^.tSingle^ / Param2^.ts32^;
        btS64       : Param1^.tSingle^       := Param1^.tSingle^ / Param2^.ts64^;
        btSingle    : Param1^.tSingle^       := Param1^.tSingle^ / Param2^.tSingle^;
        btDouble    : Param1^.tSingle^       := Param1^.tSingle^ / Param2^.tDouble^;
        end;
      end;
  btDouble :
      begin
        case Param2.AType of
        btU8        : Param1^.tDouble^       := Param1^.tDouble^ / Param2^.tu8^;
        btS8        : Param1^.tDouble^       := Param1^.tDouble^ / Param2^.ts8^;
        btU16       : Param1^.tDouble^       := Param1^.tDouble^ / Param2^.tu16^;
        btS16       : Param1^.tDouble^       := Param1^.tDouble^ / Param2^.ts16^;
        btU32       : Param1^.tDouble^       := Param1^.tDouble^ / Param2^.tu32^;
        btS32       : Param1^.tDouble^       := Param1^.tDouble^ / Param2^.ts32^;
        btS64       : Param1^.tDouble^       := Param1^.tDouble^ / Param2^.ts64^;
        btSingle    : Param1^.tDouble^       := Param1^.tDouble^ / Param2^.tSingle^;
        btDouble    : Param1^.tDouble^       := Param1^.tDouble^ / Param2^.tDouble^;
        end;
      end;
  end;
end;

procedure TSE2VarOperation.DivideMod(Param1, Param2: PSE2VarData);
begin
  case Param1.AType of
  btU8 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu8^       := Param1^.tu8^ mod Param2^.tu8^;
        btS8        : Param1^.tu8^       := Param1^.tu8^ mod Param2^.ts8^;
        btU16       : Param1^.tu8^       := Param1^.tu8^ mod Param2^.tu16^;
        btS16       : Param1^.tu8^       := Param1^.tu8^ mod Param2^.ts16^;
        btU32       : Param1^.tu8^       := Param1^.tu8^ mod Param2^.tu32^;
        btS32       : Param1^.tu8^       := Param1^.tu8^ mod Param2^.ts32^;
        btS64       : Param1^.tu8^       := Param1^.tu8^ mod Param2^.ts64^;
        end;
      end;
  btS8 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts8^       := Param1^.ts8^ mod Param2^.tu8^;
        btS8        : Param1^.ts8^       := Param1^.ts8^ mod Param2^.ts8^;
        btU16       : Param1^.ts8^       := Param1^.ts8^ mod Param2^.tu16^;
        btS16       : Param1^.ts8^       := Param1^.ts8^ mod Param2^.ts16^;
        btU32       : Param1^.ts8^       := Param1^.ts8^ mod Param2^.tu32^;
        btS32       : Param1^.ts8^       := Param1^.ts8^ mod Param2^.ts32^;
        btS64       : Param1^.ts8^       := Param1^.ts8^ mod Param2^.ts64^;
        end;
      end;
  btU16 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu16^       := Param1^.tu16^ mod Param2^.tu8^;
        btS8        : Param1^.tu16^       := Param1^.tu16^ mod Param2^.ts8^;
        btU16       : Param1^.tu16^       := Param1^.tu16^ mod Param2^.tu16^;
        btS16       : Param1^.tu16^       := Param1^.tu16^ mod Param2^.ts16^;
        btU32       : Param1^.tu16^       := Param1^.tu16^ mod Param2^.tu32^;
        btS32       : Param1^.tu16^       := Param1^.tu16^ mod Param2^.ts32^;
        btS64       : Param1^.tu16^       := Param1^.tu16^ mod Param2^.ts64^;
        end;
      end;
  btS16 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts16^       := Param1^.ts16^ mod Param2^.tu8^;
        btS8        : Param1^.ts16^       := Param1^.ts16^ mod Param2^.ts8^;
        btU16       : Param1^.ts16^       := Param1^.ts16^ mod Param2^.tu16^;
        btS16       : Param1^.ts16^       := Param1^.ts16^ mod Param2^.ts16^;
        btU32       : Param1^.ts16^       := Param1^.ts16^ mod Param2^.tu32^;
        btS32       : Param1^.ts16^       := Param1^.ts16^ mod Param2^.ts32^;
        btS64       : Param1^.ts16^       := Param1^.ts16^ mod Param2^.ts64^;
        end;
      end;
  btU32 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu32^       := Param1^.tu32^ mod Param2^.tu8^;
        btS8        : Param1^.tu32^       := Param1^.tu32^ mod Param2^.ts8^;
        btU16       : Param1^.tu32^       := Param1^.tu32^ mod Param2^.tu16^;
        btS16       : Param1^.tu32^       := Param1^.tu32^ mod Param2^.ts16^;
        btU32       : Param1^.tu32^       := Param1^.tu32^ mod Param2^.tu32^;
        btS32       : Param1^.tu32^       := Param1^.tu32^ mod Param2^.ts32^;
        btS64       : Param1^.tu32^       := Param1^.tu32^ mod Param2^.ts64^;
        end;
      end;
  btS32 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts32^       := Param1^.ts32^ mod Param2^.tu8^;
        btS8        : Param1^.ts32^       := Param1^.ts32^ mod Param2^.ts8^;
        btU16       : Param1^.ts32^       := Param1^.ts32^ mod Param2^.tu16^;
        btS16       : Param1^.ts32^       := Param1^.ts32^ mod Param2^.ts16^;
        btU32       : Param1^.ts32^       := Param1^.ts32^ mod Param2^.tu32^;
        btS32       : Param1^.ts32^       := Param1^.ts32^ mod Param2^.ts32^;
        btS64       : Param1^.ts32^       := Param1^.ts32^ mod Param2^.ts64^;
        end;
      end;
  btS64 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts64^       := Param1^.ts64^ mod Param2^.tu8^;
        btS8        : Param1^.ts64^       := Param1^.ts64^ mod Param2^.ts8^;
        btU16       : Param1^.ts64^       := Param1^.ts64^ mod Param2^.tu16^;
        btS16       : Param1^.ts64^       := Param1^.ts64^ mod Param2^.ts16^;
        btU32       : Param1^.ts64^       := Param1^.ts64^ mod Param2^.tu32^;
        btS32       : Param1^.ts64^       := Param1^.ts64^ mod Param2^.ts32^;
        btS64       : Param1^.ts64^       := Param1^.ts64^ mod Param2^.ts64^;
        end;
      end;
  end;
end;

procedure TSE2VarOperation.Multiply(Param1, Param2: PSE2VarData);
begin
  case Param1.AType of
  btU8 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu8^       := Param1^.tu8^ * Param2^.tu8^;
        btS8        : Param1^.tu8^       := Param1^.tu8^ * Param2^.ts8^;
        btU16       : Param1^.tu8^       := Param1^.tu8^ * Param2^.tu16^;
        btS16       : Param1^.tu8^       := Param1^.tu8^ * Param2^.ts16^;
        btU32       : Param1^.tu8^       := Param1^.tu8^ * Param2^.tu32^;
        btS32       : Param1^.tu8^       := Param1^.tu8^ * Param2^.ts32^;
        btS64       : Param1^.tu8^       := Param1^.tu8^ * Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.tu8^ * Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.tu8^ * Param2^.tDouble^);
        end;
      end;
  btS8 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts8^       := Param1^.ts8^ * Param2^.tu8^;
        btS8        : Param1^.ts8^       := Param1^.ts8^ * Param2^.ts8^;
        btU16       : Param1^.ts8^       := Param1^.ts8^ * Param2^.tu16^;
        btS16       : Param1^.ts8^       := Param1^.ts8^ * Param2^.ts16^;
        btU32       : Param1^.ts8^       := Param1^.ts8^ * Param2^.tu32^;
        btS32       : Param1^.ts8^       := Param1^.ts8^ * Param2^.ts32^;
        btS64       : Param1^.ts8^       := Param1^.ts8^ * Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.ts8^ * Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.ts8^ * Param2^.tDouble^);
        end;
      end;
  btU16 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu16^       := Param1^.tu16^ * Param2^.tu8^;
        btS8        : Param1^.tu16^       := Param1^.tu16^ * Param2^.ts8^;
        btU16       : Param1^.tu16^       := Param1^.tu16^ * Param2^.tu16^;
        btS16       : Param1^.tu16^       := Param1^.tu16^ * Param2^.ts16^;
        btU32       : Param1^.tu16^       := Param1^.tu16^ * Param2^.tu32^;
        btS32       : Param1^.tu16^       := Param1^.tu16^ * Param2^.ts32^;
        btS64       : Param1^.tu16^       := Param1^.tu16^ * Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.tu16^ * Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.tu16^ * Param2^.tDouble^);
        end;
      end;
  btS16 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts16^       := Param1^.ts16^ * Param2^.tu8^;
        btS8        : Param1^.ts16^       := Param1^.ts16^ * Param2^.ts8^;
        btU16       : Param1^.ts16^       := Param1^.ts16^ * Param2^.tu16^;
        btS16       : Param1^.ts16^       := Param1^.ts16^ * Param2^.ts16^;
        btU32       : Param1^.ts16^       := Param1^.ts16^ * Param2^.tu32^;
        btS32       : Param1^.ts16^       := Param1^.ts16^ * Param2^.ts32^;
        btS64       : Param1^.ts16^       := Param1^.ts16^ * Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.ts16^ * Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.ts16^ * Param2^.tDouble^);
        end;
      end;
  btU32 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu32^       := Param1^.tu32^ * Param2^.tu8^;
        btS8        : Param1^.tu32^       := Param1^.tu32^ * Param2^.ts8^;
        btU16       : Param1^.tu32^       := Param1^.tu32^ * Param2^.tu16^;
        btS16       : Param1^.tu32^       := Param1^.tu32^ * Param2^.ts16^;
        btU32       : Param1^.tu32^       := Param1^.tu32^ * Param2^.tu32^;
        btS32       : Param1^.tu32^       := Param1^.tu32^ * Param2^.ts32^;
        btS64       : Param1^.tu32^       := Param1^.tu32^ * Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.tu32^ * Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.tu32^ * Param2^.tDouble^);
        end;
      end;
  btS32 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts32^       := Param1^.ts32^ * Param2^.tu8^;
        btS8        : Param1^.ts32^       := Param1^.ts32^ * Param2^.ts8^;
        btU16       : Param1^.ts32^       := Param1^.ts32^ * Param2^.tu16^;
        btS16       : Param1^.ts32^       := Param1^.ts32^ * Param2^.ts16^;
        btU32       : Param1^.ts32^       := Param1^.ts32^ * Param2^.tu32^;
        btS32       : Param1^.ts32^       := Param1^.ts32^ * Param2^.ts32^;
        btS64       : Param1^.ts32^       := Param1^.ts32^ * Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.ts32^ - Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.ts32^ - Param2^.tDouble^);
        end;
      end;
  btS64 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts64^       := Param1^.ts64^ * Param2^.tu8^;
        btS8        : Param1^.ts64^       := Param1^.ts64^ * Param2^.ts8^;
        btU16       : Param1^.ts64^       := Param1^.ts64^ * Param2^.tu16^;
        btS16       : Param1^.ts64^       := Param1^.ts64^ * Param2^.ts16^;
        btU32       : Param1^.ts64^       := Param1^.ts64^ * Param2^.tu32^;
        btS32       : Param1^.ts64^       := Param1^.ts64^ * Param2^.ts32^;
        btS64       : Param1^.ts64^       := Param1^.ts64^ * Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.ts64^ * Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.ts64^ * Param2^.tDouble^);
        end;
      end;
  btSingle :
      begin
        case Param2.AType of
        btU8        : Param1^.tSingle^       := Param1^.tSingle^ * Param2^.tu8^;
        btS8        : Param1^.tSingle^       := Param1^.tSingle^ * Param2^.ts8^;
        btU16       : Param1^.tSingle^       := Param1^.tSingle^ * Param2^.tu16^;
        btS16       : Param1^.tSingle^       := Param1^.tSingle^ * Param2^.ts16^;
        btU32       : Param1^.tSingle^       := Param1^.tSingle^ * Param2^.tu32^;
        btS32       : Param1^.tSingle^       := Param1^.tSingle^ * Param2^.ts32^;
        btS64       : Param1^.tSingle^       := Param1^.tSingle^ * Param2^.ts64^;
        btSingle    : Param1^.tSingle^       := Param1^.tSingle^ * Param2^.tSingle^;
        btDouble    : Param1^.tSingle^       := Param1^.tSingle^ * Param2^.tDouble^;
        end;
      end;
  btDouble :
      begin
        case Param2.AType of
        btU8        : Param1^.tDouble^       := Param1^.tDouble^ * Param2^.tu8^;
        btS8        : Param1^.tDouble^       := Param1^.tDouble^ * Param2^.ts8^;
        btU16       : Param1^.tDouble^       := Param1^.tDouble^ * Param2^.tu16^;
        btS16       : Param1^.tDouble^       := Param1^.tDouble^ * Param2^.ts16^;
        btU32       : Param1^.tDouble^       := Param1^.tDouble^ * Param2^.tu32^;
        btS32       : Param1^.tDouble^       := Param1^.tDouble^ * Param2^.ts32^;
        btS64       : Param1^.tDouble^       := Param1^.tDouble^ * Param2^.ts64^;
        btSingle    : Param1^.tDouble^       := Param1^.tDouble^ * Param2^.tSingle^;
        btDouble    : Param1^.tDouble^       := Param1^.tDouble^ * Param2^.tDouble^;
        end;
      end;
  end;
end;

procedure TSE2VarOperation.Negation(Data: PSE2VarData);
begin
  case Data^.AType of
  btU8          : Data^.tu8^      := -Data^.tu8^;
  btS8          : Data^.ts8^      := -Data^.ts8^;
  btU16         : Data^.tu16^     := -Data^.tu16^;
  btS16         : Data^.ts16^     := -Data^.ts16^;
  btU32         : Data^.tu32^     := -Data^.tu32^;
  btS32         : Data^.ts32^     := -Data^.ts32^;
  btS64         : Data^.ts64^     := -Data^.ts64^;
  btSingle      : Data^.tSingle^  := -Data^.tSingle^;
  btDouble      : Data^.tDouble^  := -Data^.tDouble^;
  end;
end;

procedure TSE2VarOperation.Substract(Param1, Param2: PSE2VarData);
begin
  case Param1.AType of
  btU8 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu8^       := Param1^.tu8^ - Param2^.tu8^;
        btS8        : Param1^.tu8^       := Param1^.tu8^ - Param2^.ts8^;
        btU16       : Param1^.tu8^       := Param1^.tu8^ - Param2^.tu16^;
        btS16       : Param1^.tu8^       := Param1^.tu8^ - Param2^.ts16^;
        btU32       : Param1^.tu8^       := Param1^.tu8^ - Param2^.tu32^;
        btS32       : Param1^.tu8^       := Param1^.tu8^ - Param2^.ts32^;
        btS64       : Param1^.tu8^       := Param1^.tu8^ - Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.tu8^ - Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.tu8^ - Param2^.tDouble^);
        end;
      end;
  btS8 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts8^       := Param1^.ts8^ - Param2^.tu8^;
        btS8        : Param1^.ts8^       := Param1^.ts8^ - Param2^.ts8^;
        btU16       : Param1^.ts8^       := Param1^.ts8^ - Param2^.tu16^;
        btS16       : Param1^.ts8^       := Param1^.ts8^ - Param2^.ts16^;
        btU32       : Param1^.ts8^       := Param1^.ts8^ - Param2^.tu32^;
        btS32       : Param1^.ts8^       := Param1^.ts8^ - Param2^.ts32^;
        btS64       : Param1^.ts8^       := Param1^.ts8^ - Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.ts8^ - Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.ts8^ - Param2^.tDouble^);
        end;
      end;
  btU16 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu16^       := Param1^.tu16^ - Param2^.tu8^;
        btS8        : Param1^.tu16^       := Param1^.tu16^ - Param2^.ts8^;
        btU16       : Param1^.tu16^       := Param1^.tu16^ - Param2^.tu16^;
        btS16       : Param1^.tu16^       := Param1^.tu16^ - Param2^.ts16^;
        btU32       : Param1^.tu16^       := Param1^.tu16^ - Param2^.tu32^;
        btS32       : Param1^.tu16^       := Param1^.tu16^ - Param2^.ts32^;
        btS64       : Param1^.tu16^       := Param1^.tu16^ - Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.tu16^ - Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.tu16^ - Param2^.tDouble^);
        end;
      end;
  btS16 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts16^       := Param1^.ts16^ - Param2^.tu8^;
        btS8        : Param1^.ts16^       := Param1^.ts16^ - Param2^.ts8^;
        btU16       : Param1^.ts16^       := Param1^.ts16^ - Param2^.tu16^;
        btS16       : Param1^.ts16^       := Param1^.ts16^ - Param2^.ts16^;
        btU32       : Param1^.ts16^       := Param1^.ts16^ - Param2^.tu32^;
        btS32       : Param1^.ts16^       := Param1^.ts16^ - Param2^.ts32^;
        btS64       : Param1^.ts16^       := Param1^.ts16^ - Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.ts16^ - Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.ts16^ - Param2^.tDouble^);
        end;
      end;
  btU32 :
      begin
        case Param2.AType of
        btU8        : Param1^.tu32^       := Param1^.tu32^ - Param2^.tu8^;
        btS8        : Param1^.tu32^       := Param1^.tu32^ - Param2^.ts8^;
        btU16       : Param1^.tu32^       := Param1^.tu32^ - Param2^.tu16^;
        btS16       : Param1^.tu32^       := Param1^.tu32^ - Param2^.ts16^;
        btU32       : Param1^.tu32^       := Param1^.tu32^ - Param2^.tu32^;
        btS32       : Param1^.tu32^       := Param1^.tu32^ - Param2^.ts32^;
        btS64       : Param1^.tu32^       := Param1^.tu32^ - Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.tu32^ - Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.tu32^ - Param2^.tDouble^);
        end;
      end;
  btS32 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts32^       := Param1^.ts32^ - Param2^.tu8^;
        btS8        : Param1^.ts32^       := Param1^.ts32^ - Param2^.ts8^;
        btU16       : Param1^.ts32^       := Param1^.ts32^ - Param2^.tu16^;
        btS16       : Param1^.ts32^       := Param1^.ts32^ - Param2^.ts16^;
        btU32       : Param1^.ts32^       := Param1^.ts32^ - Param2^.tu32^;
        btS32       : Param1^.ts32^       := Param1^.ts32^ - Param2^.ts32^;
        btS64       : Param1^.ts32^       := Param1^.ts32^ - Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.ts32^ - Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.ts32^ - Param2^.tDouble^);
        end;
      end;
  btS64 :
      begin
        case Param2.AType of
        btU8        : Param1^.ts64^       := Param1^.ts64^ - Param2^.tu8^;
        btS8        : Param1^.ts64^       := Param1^.ts64^ - Param2^.ts8^;
        btU16       : Param1^.ts64^       := Param1^.ts64^ - Param2^.tu16^;
        btS16       : Param1^.ts64^       := Param1^.ts64^ - Param2^.ts16^;
        btU32       : Param1^.ts64^       := Param1^.ts64^ - Param2^.tu32^;
        btS32       : Param1^.ts64^       := Param1^.ts64^ - Param2^.ts32^;
        btS64       : Param1^.ts64^       := Param1^.ts64^ - Param2^.ts64^;
        btSingle    : FVarHelp.SetContentAsSingle(Param1, Param1^.ts64^ - Param2^.tSingle^);
        btDouble    : FVarHelp.SetContentAsDouble(Param1, Param1^.ts64^ - Param2^.tDouble^);
        end;
      end;
  btSingle :
      begin
        case Param2.AType of
        btU8        : Param1^.tSingle^       := Param1^.tSingle^ - Param2^.tu8^;
        btS8        : Param1^.tSingle^       := Param1^.tSingle^ - Param2^.ts8^;
        btU16       : Param1^.tSingle^       := Param1^.tSingle^ - Param2^.tu16^;
        btS16       : Param1^.tSingle^       := Param1^.tSingle^ - Param2^.ts16^;
        btU32       : Param1^.tSingle^       := Param1^.tSingle^ - Param2^.tu32^;
        btS32       : Param1^.tSingle^       := Param1^.tSingle^ - Param2^.ts32^;
        btS64       : Param1^.tSingle^       := Param1^.tSingle^ - Param2^.ts64^;
        btSingle    : Param1^.tSingle^       := Param1^.tSingle^ - Param2^.tSingle^;
        btDouble    : Param1^.tSingle^       := Param1^.tSingle^ - Param2^.tDouble^;
        end;
      end;
  btDouble :
      begin
        case Param2.AType of
        btU8        : Param1^.tDouble^       := Param1^.tDouble^ - Param2^.tu8^;
        btS8        : Param1^.tDouble^       := Param1^.tDouble^ - Param2^.ts8^;
        btU16       : Param1^.tDouble^       := Param1^.tDouble^ - Param2^.tu16^;
        btS16       : Param1^.tDouble^       := Param1^.tDouble^ - Param2^.ts16^;
        btU32       : Param1^.tDouble^       := Param1^.tDouble^ - Param2^.tu32^;
        btS32       : Param1^.tDouble^       := Param1^.tDouble^ - Param2^.ts32^;
        btS64       : Param1^.tDouble^       := Param1^.tDouble^ - Param2^.ts64^;
        btSingle    : Param1^.tDouble^       := Param1^.tDouble^ - Param2^.tSingle^;
        btDouble    : Param1^.tDouble^       := Param1^.tDouble^ - Param2^.tDouble^;
        end;
      end;
  end;
end;

{ TSE2VarCompare }

function TSE2VarCompare.Bigger(Param1, Param2: PSE2VarData): boolean;
begin
  result := False;
  case Param1.AType of
  btU8 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tu8^ > Param2^.tu8^;
        btS8        : result := Param1^.tu8^ > Param2^.ts8^;
        btU16       : result := Param1^.tu8^ > Param2^.tu16^;
        btS16       : result := Param1^.tu8^ > Param2^.ts16^;
        btU32       : result := Param1^.tu8^ > Param2^.tu32^;
        btS32       : result := Param1^.tu8^ > Param2^.ts32^;
        btS64       : result := Param1^.tu8^ > Param2^.ts64^;
        btSingle    : result := Param1^.tu8^ > Param2^.tSingle^;
        btDouble    : result := Param1^.tu8^ > Param2^.tDouble^;
        end;
      end;
  btS8 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts8^ > Param2^.tu8^;
        btS8        : result := Param1^.ts8^ > Param2^.ts8^;
        btU16       : result := Param1^.ts8^ > Param2^.tu16^;
        btS16       : result := Param1^.ts8^ > Param2^.ts16^;
        btU32       : result := Param1^.ts8^ > Param2^.tu32^;
        btS32       : result := Param1^.ts8^ > Param2^.ts32^;
        btS64       : result := Param1^.ts8^ > Param2^.ts64^;
        btSingle    : result := Param1^.ts8^ > Param2^.tSingle^;
        btDouble    : result := Param1^.ts8^ > Param2^.tDouble^;
        end;
      end;
  btU16 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tu16^ > Param2^.tu8^;
        btS8        : result := Param1^.tu16^ > Param2^.ts8^;
        btU16       : result := Param1^.tu16^ > Param2^.tu16^;
        btS16       : result := Param1^.tu16^ > Param2^.ts16^;
        btU32       : result := Param1^.tu16^ > Param2^.tu32^;
        btS32       : result := Param1^.tu16^ > Param2^.ts32^;
        btS64       : result := Param1^.tu16^ > Param2^.ts64^;
        btSingle    : result := Param1^.tu16^ > Param2^.tSingle^;
        btDouble    : result := Param1^.tu16^ > Param2^.tDouble^;
        end;
      end;
  btS16 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts16^ > Param2^.tu8^;
        btS8        : result := Param1^.ts16^ > Param2^.ts8^;
        btU16       : result := Param1^.ts16^ > Param2^.tu16^;
        btS16       : result := Param1^.ts16^ > Param2^.ts16^;
        btU32       : result := Param1^.ts16^ > Param2^.tu32^;
        btS32       : result := Param1^.ts16^ > Param2^.ts32^;
        btS64       : result := Param1^.ts16^ > Param2^.ts64^;
        btSingle    : result := Param1^.ts16^ > Param2^.tSingle^;
        btDouble    : result := Param1^.ts16^ > Param2^.tDouble^;
        end;
      end;
  btU32 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tu32^ > Param2^.tu8^;
        btS8        : result := Param1^.tu32^ > Param2^.ts8^;
        btU16       : result := Param1^.tu32^ > Param2^.tu16^;
        btS16       : result := Param1^.tu32^ > Param2^.ts16^;
        btU32       : result := Param1^.tu32^ > Param2^.tu32^;
        btS32       : result := Param1^.tu32^ > Param2^.ts32^;
        btS64       : result := Param1^.tu32^ > Param2^.ts64^;
        btSingle    : result := Param1^.tu32^ > Param2^.tSingle^;
        btDouble    : result := Param1^.tu32^ > Param2^.tDouble^;
        end;
      end;
  btS32 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts32^ > Param2^.tu8^;
        btS8        : result := Param1^.ts32^ > Param2^.ts8^;
        btU16       : result := Param1^.ts32^ > Param2^.tu16^;
        btS16       : result := Param1^.ts32^ > Param2^.ts16^;
        btU32       : result := Param1^.ts32^ > Param2^.tu32^;
        btS32       : result := Param1^.ts32^ > Param2^.ts32^;
        btS64       : result := Param1^.ts32^ > Param2^.ts64^;
        btSingle    : result := Param1^.ts32^ > Param2^.tSingle^;
        btDouble    : result := Param1^.ts32^ > Param2^.tDouble^;
        end;
      end;
  btS64 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts64^ > Param2^.tu8^;
        btS8        : result := Param1^.ts64^ > Param2^.ts8^;
        btU16       : result := Param1^.ts64^ > Param2^.tu16^;
        btS16       : result := Param1^.ts64^ > Param2^.ts16^;
        btU32       : result := Param1^.ts64^ > Param2^.tu32^;
        btS32       : result := Param1^.ts64^ > Param2^.ts32^;
        btS64       : result := Param1^.ts64^ > Param2^.ts64^;
        btSingle    : result := Param1^.ts64^ > Param2^.tSingle^;
        btDouble    : result := Param1^.ts64^ > Param2^.tDouble^;
        end;
      end;
  btSingle :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tSingle^ > Param2^.tu8^;
        btS8        : result := Param1^.tSingle^ > Param2^.ts8^;
        btU16       : result := Param1^.tSingle^ > Param2^.tu16^;
        btS16       : result := Param1^.tSingle^ > Param2^.ts16^;
        btU32       : result := Param1^.tSingle^ > Param2^.tu32^;
        btS32       : result := Param1^.tSingle^ > Param2^.ts32^;
        btS64       : result := Param1^.tSingle^ > Param2^.ts64^;
        btSingle    : result := Param1^.tSingle^ > Param2^.tSingle^;
        btDouble    : result := Param1^.tSingle^ > Param2^.tDouble^;
        end;
      end;
  btDouble :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tDouble^ > Param2^.tu8^;
        btS8        : result := Param1^.tDouble^ > Param2^.ts8^;
        btU16       : result := Param1^.tDouble^ > Param2^.tu16^;
        btS16       : result := Param1^.tDouble^ > Param2^.ts16^;
        btU32       : result := Param1^.tDouble^ > Param2^.tu32^;
        btS32       : result := Param1^.tDouble^ > Param2^.ts32^;
        btS64       : result := Param1^.tDouble^ > Param2^.ts64^;
        btSingle    : result := Param1^.tDouble^ > Param2^.tSingle^;
        btDouble    : result := Param1^.tDouble^ > Param2^.tDouble^;
        end;      
      end;
  btString :
      begin
        case Param2.AType of
        btString       : result := PbtString(Param1^.tString^)^ > PbtString(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btString);
              result := PbtString(Param1^.tString^)^ > PbtString(Param2^.tString^)^;
            end;
        end;
      end;
  btUTF8String :
      begin
        case Param2.AType of
        btString       : result := PbtUTF8String(Param1^.tString^)^ > PbtUTF8String(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btUTF8String);
              result := PbtUTF8String(Param1^.tString^)^ > PbtUTF8String(Param2^.tString^)^;
            end;
        end;
      end;
  btWideString :
      begin
        case Param2.AType of
        btString       : result := PbtWideString(Param1^.tString^)^ > PbtWideString(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btWideString);
              result := PbtWideString(Param1^.tString^)^ > PbtWideString(Param2^.tString^)^;
            end;
        end;
      end;
  btPChar :
      begin
        case Param2.AType of
        btString       : result := PbtPChar(Param1^.tString^)^ > PbtPChar(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btPChar);
              result := PbtPChar(Param1^.tString^)^ > PbtPChar(Param2^.tString^)^;
            end;
        end;
      end;
  end;
end;

function TSE2VarCompare.BiggerEqual(Param1,
  Param2: PSE2VarData): boolean;
begin
  result := False;
  case Param1.AType of
  btU8 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tu8^ >= Param2^.tu8^;
        btS8        : result := Param1^.tu8^ >= Param2^.ts8^;
        btU16       : result := Param1^.tu8^ >= Param2^.tu16^;
        btS16       : result := Param1^.tu8^ >= Param2^.ts16^;
        btU32       : result := Param1^.tu8^ >= Param2^.tu32^;
        btS32       : result := Param1^.tu8^ >= Param2^.ts32^;
        btS64       : result := Param1^.tu8^ >= Param2^.ts64^;
        btSingle    : result := Param1^.tu8^ >= Param2^.tSingle^;
        btDouble    : result := Param1^.tu8^ >= Param2^.tDouble^;
        end;
      end;
  btS8 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts8^ >= Param2^.tu8^;
        btS8        : result := Param1^.ts8^ >= Param2^.ts8^;
        btU16       : result := Param1^.ts8^ >= Param2^.tu16^;
        btS16       : result := Param1^.ts8^ >= Param2^.ts16^;
        btU32       : result := Param1^.ts8^ >= Param2^.tu32^;
        btS32       : result := Param1^.ts8^ >= Param2^.ts32^;
        btS64       : result := Param1^.ts8^ >= Param2^.ts64^;
        btSingle    : result := Param1^.ts8^ >= Param2^.tSingle^;
        btDouble    : result := Param1^.ts8^ >= Param2^.tDouble^;
        end;
      end;
  btU16 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tu16^ >= Param2^.tu8^;
        btS8        : result := Param1^.tu16^ >= Param2^.ts8^;
        btU16       : result := Param1^.tu16^ >= Param2^.tu16^;
        btS16       : result := Param1^.tu16^ >= Param2^.ts16^;
        btU32       : result := Param1^.tu16^ >= Param2^.tu32^;
        btS32       : result := Param1^.tu16^ >= Param2^.ts32^;
        btS64       : result := Param1^.tu16^ >= Param2^.ts64^;
        btSingle    : result := Param1^.tu16^ >= Param2^.tSingle^;
        btDouble    : result := Param1^.tu16^ >= Param2^.tDouble^;
        end;
      end;
  btS16 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts16^ >= Param2^.tu8^;
        btS8        : result := Param1^.ts16^ >= Param2^.ts8^;
        btU16       : result := Param1^.ts16^ >= Param2^.tu16^;
        btS16       : result := Param1^.ts16^ >= Param2^.ts16^;
        btU32       : result := Param1^.ts16^ >= Param2^.tu32^;
        btS32       : result := Param1^.ts16^ >= Param2^.ts32^;
        btS64       : result := Param1^.ts16^ >= Param2^.ts64^;
        btSingle    : result := Param1^.ts16^ >= Param2^.tSingle^;
        btDouble    : result := Param1^.ts16^ >= Param2^.tDouble^;
        end;
      end;
  btU32 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tu32^ >= Param2^.tu8^;
        btS8        : result := Param1^.tu32^ >= Param2^.ts8^;
        btU16       : result := Param1^.tu32^ >= Param2^.tu16^;
        btS16       : result := Param1^.tu32^ >= Param2^.ts16^;
        btU32       : result := Param1^.tu32^ >= Param2^.tu32^;
        btS32       : result := Param1^.tu32^ >= Param2^.ts32^;
        btS64       : result := Param1^.tu32^ >= Param2^.ts64^;
        btSingle    : result := Param1^.tu32^ >= Param2^.tSingle^;
        btDouble    : result := Param1^.tu32^ >= Param2^.tDouble^;
        end;
      end;
  btS32 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts32^ >= Param2^.tu8^;
        btS8        : result := Param1^.ts32^ >= Param2^.ts8^;
        btU16       : result := Param1^.ts32^ >= Param2^.tu16^;
        btS16       : result := Param1^.ts32^ >= Param2^.ts16^;
        btU32       : result := Param1^.ts32^ >= Param2^.tu32^;
        btS32       : result := Param1^.ts32^ >= Param2^.ts32^;
        btS64       : result := Param1^.ts32^ >= Param2^.ts64^;
        btSingle    : result := Param1^.ts32^ >= Param2^.tSingle^;
        btDouble    : result := Param1^.ts32^ >= Param2^.tDouble^;
        end;
      end;
  btS64 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts64^ >= Param2^.tu8^;
        btS8        : result := Param1^.ts64^ >= Param2^.ts8^;
        btU16       : result := Param1^.ts64^ >= Param2^.tu16^;
        btS16       : result := Param1^.ts64^ >= Param2^.ts16^;
        btU32       : result := Param1^.ts64^ >= Param2^.tu32^;
        btS32       : result := Param1^.ts64^ >= Param2^.ts32^;
        btS64       : result := Param1^.ts64^ >= Param2^.ts64^;
        btSingle    : result := Param1^.ts64^ >= Param2^.tSingle^;
        btDouble    : result := Param1^.ts64^ >= Param2^.tDouble^;
        end;
      end;
  btSingle :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tSingle^ >= Param2^.tu8^;
        btS8        : result := Param1^.tSingle^ >= Param2^.ts8^;
        btU16       : result := Param1^.tSingle^ >= Param2^.tu16^;
        btS16       : result := Param1^.tSingle^ >= Param2^.ts16^;
        btU32       : result := Param1^.tSingle^ >= Param2^.tu32^;
        btS32       : result := Param1^.tSingle^ >= Param2^.ts32^;
        btS64       : result := Param1^.tSingle^ >= Param2^.ts64^;
        btSingle    : result := Param1^.tSingle^ >= Param2^.tSingle^;
        btDouble    : result := Param1^.tSingle^ >= Param2^.tDouble^;
        end;
      end;
  btDouble :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tDouble^ >= Param2^.tu8^;
        btS8        : result := Param1^.tDouble^ >= Param2^.ts8^;
        btU16       : result := Param1^.tDouble^ >= Param2^.tu16^;
        btS16       : result := Param1^.tDouble^ >= Param2^.ts16^;
        btU32       : result := Param1^.tDouble^ >= Param2^.tu32^;
        btS32       : result := Param1^.tDouble^ >= Param2^.ts32^;
        btS64       : result := Param1^.tDouble^ >= Param2^.ts64^;
        btSingle    : result := Param1^.tDouble^ >= Param2^.tSingle^;
        btDouble    : result := Param1^.tDouble^ >= Param2^.tDouble^;
        end;      
      end;
  btString :
      begin
        case Param2.AType of
        btString       : result := PbtString(Param1^.tString^)^ >= PbtString(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btString);
              result := PbtString(Param1^.tString^)^ >= PbtString(Param2^.tString^)^;
            end;
        end;
      end;
  btUTF8String :
      begin
        case Param2.AType of
        btString       : result := PbtUTF8String(Param1^.tString^)^ >= PbtUTF8String(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btUTF8String);
              result := PbtUTF8String(Param1^.tString^)^ >= PbtUTF8String(Param2^.tString^)^;
            end;
        end;
      end;
  btWideString :
      begin
        case Param2.AType of
        btString       : result := PbtWideString(Param1^.tString^)^ >= PbtWideString(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btWideString);
              result := PbtWideString(Param1^.tString^)^ >= PbtWideString(Param2^.tString^)^;
            end;
        end;
      end;
  btPChar :
      begin
        case Param2.AType of
        btString       : result := PbtPChar(Param1^.tString^)^ >= PbtPChar(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btPChar);
              result := PbtPChar(Param1^.tString^)^ >= PbtPChar(Param2^.tString^)^;
            end;
        end;
      end;
  end;
end;

constructor TSE2VarCompare.Create(VarHelper: TSE2VarHelper);
begin
  inherited Create;
  FVarHelp := VarHelper;
end;

function TSE2VarCompare.Equal(Param1, Param2: PSE2VarData): boolean;
begin
  result := False;
  case Param1.AType of
  btU8 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tu8^ = Param2^.tu8^;
        btS8        : result := Param1^.tu8^ = Param2^.ts8^;
        btU16       : result := Param1^.tu8^ = Param2^.tu16^;
        btS16       : result := Param1^.tu8^ = Param2^.ts16^;
        btU32       : result := Param1^.tu8^ = Param2^.tu32^;
        btS32       : result := Param1^.tu8^ = Param2^.ts32^;
        btS64       : result := Param1^.tu8^ = Param2^.ts64^;
        btSingle    : result := Param1^.tu8^ = Param2^.tSingle^;
        btDouble    : result := Param1^.tu8^ = Param2^.tDouble^;
        end;
      end;
  btS8 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts8^ = Param2^.tu8^;
        btS8        : result := Param1^.ts8^ = Param2^.ts8^;
        btU16       : result := Param1^.ts8^ = Param2^.tu16^;
        btS16       : result := Param1^.ts8^ = Param2^.ts16^;
        btU32       : result := Param1^.ts8^ = Param2^.tu32^;
        btS32       : result := Param1^.ts8^ = Param2^.ts32^;
        btS64       : result := Param1^.ts8^ = Param2^.ts64^;
        btSingle    : result := Param1^.ts8^ = Param2^.tSingle^;
        btDouble    : result := Param1^.ts8^ = Param2^.tDouble^;
        end;
      end;
  btU16 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tu16^ = Param2^.tu8^;
        btS8        : result := Param1^.tu16^ = Param2^.ts8^;
        btU16       : result := Param1^.tu16^ = Param2^.tu16^;
        btS16       : result := Param1^.tu16^ = Param2^.ts16^;
        btU32       : result := Param1^.tu16^ = Param2^.tu32^;
        btS32       : result := Param1^.tu16^ = Param2^.ts32^;
        btS64       : result := Param1^.tu16^ = Param2^.ts64^;
        btSingle    : result := Param1^.tu16^ = Param2^.tSingle^;
        btDouble    : result := Param1^.tu16^ = Param2^.tDouble^;
        end;        
      end;
  btS16 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts16^ = Param2^.tu8^;
        btS8        : result := Param1^.ts16^ = Param2^.ts8^;
        btU16       : result := Param1^.ts16^ = Param2^.tu16^;
        btS16       : result := Param1^.ts16^ = Param2^.ts16^;
        btU32       : result := Param1^.ts16^ = Param2^.tu32^;
        btS32       : result := Param1^.ts16^ = Param2^.ts32^;
        btS64       : result := Param1^.ts16^ = Param2^.ts64^;
        btSingle    : result := Param1^.ts16^ = Param2^.tSingle^;
        btDouble    : result := Param1^.ts16^ = Param2^.tDouble^;
        end;
      end;
  btU32 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tu32^ = Param2^.tu8^;
        btS8        : result := Param1^.tu32^ = Param2^.ts8^;
        btU16       : result := Param1^.tu32^ = Param2^.tu16^;
        btS16       : result := Param1^.tu32^ = Param2^.ts16^;
        btU32       : result := Param1^.tu32^ = Param2^.tu32^;
        btS32       : result := Param1^.tu32^ = Param2^.ts32^;
        btS64       : result := Param1^.tu32^ = Param2^.ts64^;
        btSingle    : result := Param1^.tu32^ = Param2^.tSingle^;
        btDouble    : result := Param1^.tu32^ = Param2^.tDouble^;
        end;
      end;
  btS32 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts32^ = Param2^.tu8^;
        btS8        : result := Param1^.ts32^ = Param2^.ts8^;
        btU16       : result := Param1^.ts32^ = Param2^.tu16^;
        btS16       : result := Param1^.ts32^ = Param2^.ts16^;
        btU32       : result := Param1^.ts32^ = Param2^.tu32^;
        btS32       : result := Param1^.ts32^ = Param2^.ts32^;
        btS64       : result := Param1^.ts32^ = Param2^.ts64^;
        btSingle    : result := Param1^.ts32^ = Param2^.tSingle^;
        btDouble    : result := Param1^.ts32^ = Param2^.tDouble^;
        end;
      end;
  btS64 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts64^ = Param2^.tu8^;
        btS8        : result := Param1^.ts64^ = Param2^.ts8^;
        btU16       : result := Param1^.ts64^ = Param2^.tu16^;
        btS16       : result := Param1^.ts64^ = Param2^.ts16^;
        btU32       : result := Param1^.ts64^ = Param2^.tu32^;
        btS32       : result := Param1^.ts64^ = Param2^.ts32^;
        btS64       : result := Param1^.ts64^ = Param2^.ts64^;
        btSingle    : result := Param1^.ts64^ = Param2^.tSingle^;
        btDouble    : result := Param1^.ts64^ = Param2^.tDouble^;
        end;
      end;
  btSingle :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tSingle^ = Param2^.tu8^;
        btS8        : result := Param1^.tSingle^ = Param2^.ts8^;
        btU16       : result := Param1^.tSingle^ = Param2^.tu16^;
        btS16       : result := Param1^.tSingle^ = Param2^.ts16^;
        btU32       : result := Param1^.tSingle^ = Param2^.tu32^;
        btS32       : result := Param1^.tSingle^ = Param2^.ts32^;
        btS64       : result := Param1^.tSingle^ = Param2^.ts64^;
        btSingle    : result := Param1^.tSingle^ = Param2^.tSingle^;
        btDouble    : result := Param1^.tSingle^ = Param2^.tDouble^;
        end;
      end;
  btDouble :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tDouble^ = Param2^.tu8^;
        btS8        : result := Param1^.tDouble^ = Param2^.ts8^;
        btU16       : result := Param1^.tDouble^ = Param2^.tu16^;
        btS16       : result := Param1^.tDouble^ = Param2^.ts16^;
        btU32       : result := Param1^.tDouble^ = Param2^.tu32^;
        btS32       : result := Param1^.tDouble^ = Param2^.ts32^;
        btS64       : result := Param1^.tDouble^ = Param2^.ts64^;
        btSingle    : result := Param1^.tDouble^ = Param2^.tSingle^;
        btDouble    : result := Param1^.tDouble^ = Param2^.tDouble^;
        end;      
      end;
  btPointer, btObject, btProcPtr :
      begin
        case Param2.AType of
        btPointer,
        btProcPtr,
        btObject        : result := Pointer(Param1^.tPointer^) = Pointer(Param2^.tPointer^);
        end;
      end;  
  btString :
      begin
        case Param2.AType of
        btString       : result := PbtString(Param1^.tString^)^ = PbtString(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btString);
              result := PbtString(Param1^.tString^)^ = PbtString(Param2^.tString^)^;
            end;
        end;
      end;
  btUTF8String :
      begin
        case Param2.AType of
        btString       : result := PbtUTF8String(Param1^.tString^)^ = PbtUTF8String(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btUTF8String);
              result := PbtUTF8String(Param1^.tString^)^ = PbtUTF8String(Param2^.tString^)^;
            end;
        end;
      end;
  btWideString :
      begin
        case Param2.AType of
        btString       : result := PbtWideString(Param1^.tString^)^ = PbtWideString(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btWideString);
              result := PbtWideString(Param1^.tString^)^ = PbtWideString(Param2^.tString^)^;
            end;
        end;     
      end;
  btPChar :
      begin
        case Param2.AType of
        btString       : result := PbtPChar(Param1^.tString^)^ = PbtPChar(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btPChar);
              result := PbtPChar(Param1^.tString^)^ = PbtPChar(Param2^.tString^)^;
            end;
        end;
      end;
  end;
end;

function TSE2VarCompare.Smaller(Param1,
  Param2: PSE2VarData): boolean;
begin
  result := False;
  case Param1.AType of
  btU8 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tu8^ < Param2^.tu8^;
        btS8        : result := Param1^.tu8^ < Param2^.ts8^;
        btU16       : result := Param1^.tu8^ < Param2^.tu16^;
        btS16       : result := Param1^.tu8^ < Param2^.ts16^;
        btU32       : result := Param1^.tu8^ < Param2^.tu32^;
        btS32       : result := Param1^.tu8^ < Param2^.ts32^;
        btS64       : result := Param1^.tu8^ < Param2^.ts64^;
        btSingle    : result := Param1^.tu8^ < Param2^.tSingle^;
        btDouble    : result := Param1^.tu8^ < Param2^.tDouble^;
        end;
      end;
  btS8 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts8^ < Param2^.tu8^;
        btS8        : result := Param1^.ts8^ < Param2^.ts8^;
        btU16       : result := Param1^.ts8^ < Param2^.tu16^;
        btS16       : result := Param1^.ts8^ < Param2^.ts16^;
        btU32       : result := Param1^.ts8^ < Param2^.tu32^;
        btS32       : result := Param1^.ts8^ < Param2^.ts32^;
        btS64       : result := Param1^.ts8^ < Param2^.ts64^;
        btSingle    : result := Param1^.ts8^ < Param2^.tSingle^;
        btDouble    : result := Param1^.ts8^ < Param2^.tDouble^;
        end;
      end;
  btU16 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tu16^ < Param2^.tu8^;
        btS8        : result := Param1^.tu16^ < Param2^.ts8^;
        btU16       : result := Param1^.tu16^ < Param2^.tu16^;
        btS16       : result := Param1^.tu16^ < Param2^.ts16^;
        btU32       : result := Param1^.tu16^ < Param2^.tu32^;
        btS32       : result := Param1^.tu16^ < Param2^.ts32^;
        btS64       : result := Param1^.tu16^ < Param2^.ts64^;
        btSingle    : result := Param1^.tu16^ < Param2^.tSingle^;
        btDouble    : result := Param1^.tu16^ < Param2^.tDouble^;
        end;
      end;
  btS16 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts16^ < Param2^.tu8^;
        btS8        : result := Param1^.ts16^ < Param2^.ts8^;
        btU16       : result := Param1^.ts16^ < Param2^.tu16^;
        btS16       : result := Param1^.ts16^ < Param2^.ts16^;
        btU32       : result := Param1^.ts16^ < Param2^.tu32^;
        btS32       : result := Param1^.ts16^ < Param2^.ts32^;
        btS64       : result := Param1^.ts16^ < Param2^.ts64^;
        btSingle    : result := Param1^.ts16^ < Param2^.tSingle^;
        btDouble    : result := Param1^.ts16^ < Param2^.tDouble^;
        end;
      end;
  btU32 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tu32^ < Param2^.tu8^;
        btS8        : result := Param1^.tu32^ < Param2^.ts8^;
        btU16       : result := Param1^.tu32^ < Param2^.tu16^;
        btS16       : result := Param1^.tu32^ < Param2^.ts16^;
        btU32       : result := Param1^.tu32^ < Param2^.tu32^;
        btS32       : result := Param1^.tu32^ < Param2^.ts32^;
        btS64       : result := Param1^.tu32^ < Param2^.ts64^;
        btSingle    : result := Param1^.tu32^ < Param2^.tSingle^;
        btDouble    : result := Param1^.tu32^ < Param2^.tDouble^;
        end;
      end;
  btS32 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts32^ < Param2^.tu8^;
        btS8        : result := Param1^.ts32^ < Param2^.ts8^;
        btU16       : result := Param1^.ts32^ < Param2^.tu16^;
        btS16       : result := Param1^.ts32^ < Param2^.ts16^;
        btU32       : result := Param1^.ts32^ < Param2^.tu32^;
        btS32       : result := Param1^.ts32^ < Param2^.ts32^;
        btS64       : result := Param1^.ts32^ < Param2^.ts64^;
        btSingle    : result := Param1^.ts32^ < Param2^.tSingle^;
        btDouble    : result := Param1^.ts32^ < Param2^.tDouble^;
        end;
      end;
  btS64 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts64^ < Param2^.tu8^;
        btS8        : result := Param1^.ts64^ < Param2^.ts8^;
        btU16       : result := Param1^.ts64^ < Param2^.tu16^;
        btS16       : result := Param1^.ts64^ < Param2^.ts16^;
        btU32       : result := Param1^.ts64^ < Param2^.tu32^;
        btS32       : result := Param1^.ts64^ < Param2^.ts32^;
        btS64       : result := Param1^.ts64^ < Param2^.ts64^;
        btSingle    : result := Param1^.ts64^ < Param2^.tSingle^;
        btDouble    : result := Param1^.ts64^ < Param2^.tDouble^;
        end;
      end;
  btSingle :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tSingle^ < Param2^.tu8^;
        btS8        : result := Param1^.tSingle^ < Param2^.ts8^;
        btU16       : result := Param1^.tSingle^ < Param2^.tu16^;
        btS16       : result := Param1^.tSingle^ < Param2^.ts16^;
        btU32       : result := Param1^.tSingle^ < Param2^.tu32^;
        btS32       : result := Param1^.tSingle^ < Param2^.ts32^;
        btS64       : result := Param1^.tSingle^ < Param2^.ts64^;
        btSingle    : result := Param1^.tSingle^ < Param2^.tSingle^;
        btDouble    : result := Param1^.tSingle^ < Param2^.tDouble^;
        end;
      end;
  btDouble :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tDouble^ < Param2^.tu8^;
        btS8        : result := Param1^.tDouble^ < Param2^.ts8^;
        btU16       : result := Param1^.tDouble^ < Param2^.tu16^;
        btS16       : result := Param1^.tDouble^ < Param2^.ts16^;
        btU32       : result := Param1^.tDouble^ < Param2^.tu32^;
        btS32       : result := Param1^.tDouble^ < Param2^.ts32^;
        btS64       : result := Param1^.tDouble^ < Param2^.ts64^;
        btSingle    : result := Param1^.tDouble^ < Param2^.tSingle^;
        btDouble    : result := Param1^.tDouble^ < Param2^.tDouble^;
        end;      
      end;
  btString :
      begin
        case Param2.AType of
        btString       : result := PbtString(Param1^.tString^)^ < PbtString(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btString);
              result := PbtString(Param1^.tString^)^ < PbtString(Param2^.tString^)^;
            end;
        end;
      end;
  btUTF8String :
      begin
        case Param2.AType of
        btString       : result := PbtUTF8String(Param1^.tString^)^ < PbtUTF8String(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btUTF8String);
              result := PbtUTF8String(Param1^.tString^)^ < PbtUTF8String(Param2^.tString^)^;
            end;
        end;
      end;
  btWideString :
      begin
        case Param2.AType of
        btString       : result := PbtWideString(Param1^.tString^)^ < PbtWideString(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btWideString);
              result := PbtWideString(Param1^.tString^)^ < PbtWideString(Param2^.tString^)^;
            end;
        end;
      end;
  btPChar :
      begin
        case Param2.AType of
        btString       : result := PbtPChar(Param1^.tString^)^ < PbtPChar(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btPChar);
              result := PbtPChar(Param1^.tString^)^ < PbtPChar(Param2^.tString^)^;
            end;
        end;
      end;
  end;
end;

function TSE2VarCompare.SmallerEqual(Param1,
  Param2: PSE2VarData): boolean;
begin
  case Param1.AType of
  btU8 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tu8^ <= Param2^.tu8^;
        btS8        : result := Param1^.tu8^ <= Param2^.ts8^;
        btU16       : result := Param1^.tu8^ <= Param2^.tu16^;
        btS16       : result := Param1^.tu8^ <= Param2^.ts16^;
        btU32       : result := Param1^.tu8^ <= Param2^.tu32^;
        btS32       : result := Param1^.tu8^ <= Param2^.ts32^;
        btS64       : result := Param1^.tu8^ <= Param2^.ts64^;
        btSingle    : result := Param1^.tu8^ <= Param2^.tSingle^;
        btDouble    : result := Param1^.tu8^ <= Param2^.tDouble^;
        end;
      end;
  btS8 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts8^ <= Param2^.tu8^;
        btS8        : result := Param1^.ts8^ <= Param2^.ts8^;
        btU16       : result := Param1^.ts8^ <= Param2^.tu16^;
        btS16       : result := Param1^.ts8^ <= Param2^.ts16^;
        btU32       : result := Param1^.ts8^ <= Param2^.tu32^;
        btS32       : result := Param1^.ts8^ <= Param2^.ts32^;
        btS64       : result := Param1^.ts8^ <= Param2^.ts64^;
        btSingle    : result := Param1^.ts8^ <= Param2^.tSingle^;
        btDouble    : result := Param1^.ts8^ <= Param2^.tDouble^;
        end;
      end;
  btU16 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tu16^ <= Param2^.tu8^;
        btS8        : result := Param1^.tu16^ <= Param2^.ts8^;
        btU16       : result := Param1^.tu16^ <= Param2^.tu16^;
        btS16       : result := Param1^.tu16^ <= Param2^.ts16^;
        btU32       : result := Param1^.tu16^ <= Param2^.tu32^;
        btS32       : result := Param1^.tu16^ <= Param2^.ts32^;
        btS64       : result := Param1^.tu16^ <= Param2^.ts64^;
        btSingle    : result := Param1^.tu16^ <= Param2^.tSingle^;
        btDouble    : result := Param1^.tu16^ <= Param2^.tDouble^;
        end;
      end;
  btS16 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts16^ <= Param2^.tu8^;
        btS8        : result := Param1^.ts16^ <= Param2^.ts8^;
        btU16       : result := Param1^.ts16^ <= Param2^.tu16^;
        btS16       : result := Param1^.ts16^ <= Param2^.ts16^;
        btU32       : result := Param1^.ts16^ <= Param2^.tu32^;
        btS32       : result := Param1^.ts16^ <= Param2^.ts32^;
        btS64       : result := Param1^.ts16^ <= Param2^.ts64^;
        btSingle    : result := Param1^.ts16^ <= Param2^.tSingle^;
        btDouble    : result := Param1^.ts16^ <= Param2^.tDouble^;
        end;
      end;
  btU32 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tu32^ <= Param2^.tu8^;
        btS8        : result := Param1^.tu32^ <= Param2^.ts8^;
        btU16       : result := Param1^.tu32^ <= Param2^.tu16^;
        btS16       : result := Param1^.tu32^ <= Param2^.ts16^;
        btU32       : result := Param1^.tu32^ <= Param2^.tu32^;
        btS32       : result := Param1^.tu32^ <= Param2^.ts32^;
        btS64       : result := Param1^.tu32^ <= Param2^.ts64^;
        btSingle    : result := Param1^.tu32^ <= Param2^.tSingle^;
        btDouble    : result := Param1^.tu32^ <= Param2^.tDouble^;
        end;
      end;
  btS32 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts32^ <= Param2^.tu8^;
        btS8        : result := Param1^.ts32^ <= Param2^.ts8^;
        btU16       : result := Param1^.ts32^ <= Param2^.tu16^;
        btS16       : result := Param1^.ts32^ <= Param2^.ts16^;
        btU32       : result := Param1^.ts32^ <= Param2^.tu32^;
        btS32       : result := Param1^.ts32^ <= Param2^.ts32^;
        btS64       : result := Param1^.ts32^ <= Param2^.ts64^;
        btSingle    : result := Param1^.ts32^ <= Param2^.tSingle^;
        btDouble    : result := Param1^.ts32^ <= Param2^.tDouble^;
        end;
      end;
  btS64 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts64^ <= Param2^.tu8^;
        btS8        : result := Param1^.ts64^ <= Param2^.ts8^;
        btU16       : result := Param1^.ts64^ <= Param2^.tu16^;
        btS16       : result := Param1^.ts64^ <= Param2^.ts16^;
        btU32       : result := Param1^.ts64^ <= Param2^.tu32^;
        btS32       : result := Param1^.ts64^ <= Param2^.ts32^;
        btS64       : result := Param1^.ts64^ <= Param2^.ts64^;
        btSingle    : result := Param1^.ts64^ <= Param2^.tSingle^;
        btDouble    : result := Param1^.ts64^ <= Param2^.tDouble^;
        end;
      end;
  btSingle :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tSingle^ <= Param2^.tu8^;
        btS8        : result := Param1^.tSingle^ <= Param2^.ts8^;
        btU16       : result := Param1^.tSingle^ <= Param2^.tu16^;
        btS16       : result := Param1^.tSingle^ <= Param2^.ts16^;
        btU32       : result := Param1^.tSingle^ <= Param2^.tu32^;
        btS32       : result := Param1^.tSingle^ <= Param2^.ts32^;
        btS64       : result := Param1^.tSingle^ <= Param2^.ts64^;
        btSingle    : result := Param1^.tSingle^ <= Param2^.tSingle^;
        btDouble    : result := Param1^.tSingle^ <= Param2^.tDouble^;
        end;
      end;
  btDouble :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tDouble^ <= Param2^.tu8^;
        btS8        : result := Param1^.tDouble^ <= Param2^.ts8^;
        btU16       : result := Param1^.tDouble^ <= Param2^.tu16^;
        btS16       : result := Param1^.tDouble^ <= Param2^.ts16^;
        btU32       : result := Param1^.tDouble^ <= Param2^.tu32^;
        btS32       : result := Param1^.tDouble^ <= Param2^.ts32^;
        btS64       : result := Param1^.tDouble^ <= Param2^.ts64^;
        btSingle    : result := Param1^.tDouble^ <= Param2^.tSingle^;
        btDouble    : result := Param1^.tDouble^ <= Param2^.tDouble^;
        end;      
      end;
  btString :
      begin
        case Param2.AType of
        btString       : result := PbtString(Param1^.tString^)^ <= PbtString(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btString);
              result := PbtString(Param1^.tString^)^ <= PbtString(Param2^.tString^)^;
            end;
        end;
      end;
  btUTF8String :
      begin
        case Param2.AType of
        btString       : result := PbtUTF8String(Param1^.tString^)^ <= PbtUTF8String(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btUTF8String);
              result := PbtUTF8String(Param1^.tString^)^ <= PbtUTF8String(Param2^.tString^)^;
            end;
        end;
      end;
  btWideString :
      begin
        case Param2.AType of
        btString       : result := PbtWideString(Param1^.tString^)^ <= PbtWideString(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btWideString);
              result := PbtWideString(Param1^.tString^)^ <= PbtWideString(Param2^.tString^)^;
            end;
        end;
      end;
  btPChar :
      begin
        case Param2.AType of
        btString       : result := PbtPChar(Param1^.tString^)^ <= PbtPChar(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btPChar);
              result := PbtPChar(Param1^.tString^)^ <= PbtPChar(Param2^.tString^)^;
            end;
        end;
      end;
  else result := False;
  end;
end;

function TSE2VarCompare.UnEqual(Param1,
  Param2: PSE2VarData): boolean;
begin
  result := False;
  case Param1.AType of
  btU8 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tu8^ <> Param2^.tu8^;
        btS8        : result := Param1^.tu8^ <> Param2^.ts8^;
        btU16       : result := Param1^.tu8^ <> Param2^.tu16^;
        btS16       : result := Param1^.tu8^ <> Param2^.ts16^;
        btU32       : result := Param1^.tu8^ <> Param2^.tu32^;
        btS32       : result := Param1^.tu8^ <> Param2^.ts32^;
        btS64       : result := Param1^.tu8^ <> Param2^.ts64^;
        btSingle    : result := Param1^.tu8^ <> Param2^.tSingle^;
        btDouble    : result := Param1^.tu8^ <> Param2^.tDouble^;
        end;
      end;
  btS8 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts8^ <> Param2^.tu8^;
        btS8        : result := Param1^.ts8^ <> Param2^.ts8^;
        btU16       : result := Param1^.ts8^ <> Param2^.tu16^;
        btS16       : result := Param1^.ts8^ <> Param2^.ts16^;
        btU32       : result := Param1^.ts8^ <> Param2^.tu32^;
        btS32       : result := Param1^.ts8^ <> Param2^.ts32^;
        btS64       : result := Param1^.ts8^ <> Param2^.ts64^;
        btSingle    : result := Param1^.ts8^ <> Param2^.tSingle^;
        btDouble    : result := Param1^.ts8^ <> Param2^.tDouble^;
        end;
      end;
  btU16 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tu16^ <> Param2^.tu8^;
        btS8        : result := Param1^.tu16^ <> Param2^.ts8^;
        btU16       : result := Param1^.tu16^ <> Param2^.tu16^;
        btS16       : result := Param1^.tu16^ <> Param2^.ts16^;
        btU32       : result := Param1^.tu16^ <> Param2^.tu32^;
        btS32       : result := Param1^.tu16^ <> Param2^.ts32^;
        btS64       : result := Param1^.tu16^ <> Param2^.ts64^;
        btSingle    : result := Param1^.tu16^ <> Param2^.tSingle^;
        btDouble    : result := Param1^.tu16^ <> Param2^.tDouble^;
        end;        
      end;
  btS16 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts16^ <> Param2^.tu8^;
        btS8        : result := Param1^.ts16^ <> Param2^.ts8^;
        btU16       : result := Param1^.ts16^ <> Param2^.tu16^;
        btS16       : result := Param1^.ts16^ <> Param2^.ts16^;
        btU32       : result := Param1^.ts16^ <> Param2^.tu32^;
        btS32       : result := Param1^.ts16^ <> Param2^.ts32^;
        btS64       : result := Param1^.ts16^ <> Param2^.ts64^;
        btSingle    : result := Param1^.ts16^ <> Param2^.tSingle^;
        btDouble    : result := Param1^.ts16^ <> Param2^.tDouble^;
        end;
      end;
  btU32 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tu32^ <> Param2^.tu8^;
        btS8        : result := Param1^.tu32^ <> Param2^.ts8^;
        btU16       : result := Param1^.tu32^ <> Param2^.tu16^;
        btS16       : result := Param1^.tu32^ <> Param2^.ts16^;
        btU32       : result := Param1^.tu32^ <> Param2^.tu32^;
        btS32       : result := Param1^.tu32^ <> Param2^.ts32^;
        btS64       : result := Param1^.tu32^ <> Param2^.ts64^;
        btSingle    : result := Param1^.tu32^ <> Param2^.tSingle^;
        btDouble    : result := Param1^.tu32^ <> Param2^.tDouble^;
        end;
      end;
  btS32 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts32^ <> Param2^.tu8^;
        btS8        : result := Param1^.ts32^ <> Param2^.ts8^;
        btU16       : result := Param1^.ts32^ <> Param2^.tu16^;
        btS16       : result := Param1^.ts32^ <> Param2^.ts16^;
        btU32       : result := Param1^.ts32^ <> Param2^.tu32^;
        btS32       : result := Param1^.ts32^ <> Param2^.ts32^;
        btS64       : result := Param1^.ts32^ <> Param2^.ts64^;
        btSingle    : result := Param1^.ts32^ <> Param2^.tSingle^;
        btDouble    : result := Param1^.ts32^ <> Param2^.tDouble^;
        end;
      end;
  btS64 :
      begin
        case Param2.AType of
        btU8        : result := Param1^.ts64^ <> Param2^.tu8^;
        btS8        : result := Param1^.ts64^ <> Param2^.ts8^;
        btU16       : result := Param1^.ts64^ <> Param2^.tu16^;
        btS16       : result := Param1^.ts64^ <> Param2^.ts16^;
        btU32       : result := Param1^.ts64^ <> Param2^.tu32^;
        btS32       : result := Param1^.ts64^ <> Param2^.ts32^;
        btS64       : result := Param1^.ts64^ <> Param2^.ts64^;
        btSingle    : result := Param1^.ts64^ <> Param2^.tSingle^;
        btDouble    : result := Param1^.ts64^ <> Param2^.tDouble^;
        end;
      end;
  btSingle :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tSingle^ <> Param2^.tu8^;
        btS8        : result := Param1^.tSingle^ <> Param2^.ts8^;
        btU16       : result := Param1^.tSingle^ <> Param2^.tu16^;
        btS16       : result := Param1^.tSingle^ <> Param2^.ts16^;
        btU32       : result := Param1^.tSingle^ <> Param2^.tu32^;
        btS32       : result := Param1^.tSingle^ <> Param2^.ts32^;
        btS64       : result := Param1^.tSingle^ <> Param2^.ts64^;
        btSingle    : result := Param1^.tSingle^ <> Param2^.tSingle^;
        btDouble    : result := Param1^.tSingle^ <> Param2^.tDouble^;
        end;
      end;
  btDouble :
      begin
        case Param2.AType of
        btU8        : result := Param1^.tDouble^ <> Param2^.tu8^;
        btS8        : result := Param1^.tDouble^ <> Param2^.ts8^;
        btU16       : result := Param1^.tDouble^ <> Param2^.tu16^;
        btS16       : result := Param1^.tDouble^ <> Param2^.ts16^;
        btU32       : result := Param1^.tDouble^ <> Param2^.tu32^;
        btS32       : result := Param1^.tDouble^ <> Param2^.ts32^;
        btS64       : result := Param1^.tDouble^ <> Param2^.ts64^;
        btSingle    : result := Param1^.tDouble^ <> Param2^.tSingle^;
        btDouble    : result := Param1^.tDouble^ <> Param2^.tDouble^;
        end;      
      end;
  btPointer, btObject, btProcPtr :
      begin
        case Param2.AType of
        btPointer,
        btProcPtr,
        btObject        : result := Pointer(Param1^.tPointer^) <> Pointer(Param2^.tPointer^);
        end;
      end;
  btString :
      begin
        case Param2.AType of
        btString       : result := PbtString(Param1^.tString^)^ <> PbtString(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btString);
              result := PbtString(Param1^.tString^)^ <> PbtString(Param2^.tString^)^;
            end;
        end;
      end;
  btUTF8String :
      begin
        case Param2.AType of
        btString       : result := PbtUTF8String(Param1^.tString^)^ <> PbtUTF8String(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btUTF8String);
              result := PbtUTF8String(Param1^.tString^)^ <> PbtUTF8String(Param2^.tString^)^;
            end;
        end;
      end;
  btWideString :
      begin
        case Param2.AType of
        btString       : result := PbtWideString(Param1^.tString^)^ <> PbtWideString(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btWideString);
              result := PbtWideString(Param1^.tString^)^ <> PbtWideString(Param2^.tString^)^;
            end;
        end;
      end;
  btPChar :
      begin
        case Param2.AType of
        btString       : result := PbtPChar(Param1^.tString^)^ <> PbtPChar(Param2^.tString^)^;
        btUTF8String,
        btWideString,
        btPChar        :
            begin
              FVarHelp.ConvertContent(Param2, btPChar);
              result := PbtPChar(Param1^.tString^)^ <> PbtPChar(Param2^.tString^)^;
            end;
        end;
      end;
  end;
end;

//FVarHelp.SetContentAsDouble(p1, p1^.tu8^ + p2^.tDouble^);

procedure add_u8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                        begin p1^.tu8^ := p1^.tu8^ + p2^.tu8^; end;
procedure add_u8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                        begin p1^.tu8^ := p1^.tu8^ + p2^.ts8^; end;
procedure add_u8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ + p2^.tu16^; end;
procedure add_u8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ + p2^.ts16^; end;
procedure add_u8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ + p2^.tu32^; end;
procedure add_u8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ + p2^.ts32^; end;
procedure add_u8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ + p2^.ts64^; end;
procedure add_u8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin FVarHelp.SetContentAsSingle(p1, p1^.tu8^ + p2^.tSingle^); end;
procedure add_u8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin FVarHelp.SetContentAsDouble(p1, p1^.tu8^ + p2^.tDouble^); end;
procedure add_u8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure add_u8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_u8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_u8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                     begin  end;
procedure add_u8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_u8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure add_s8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                        begin p1^.ts8^ := p1^.ts8^ + p2^.tu8^; end;
procedure add_s8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                        begin p1^.ts8^ := p1^.ts8^ + p2^.ts8^; end;
procedure add_s8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ + p2^.tu16^; end;
procedure add_s8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ + p2^.ts16^; end;
procedure add_s8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ + p2^.tu32^; end;
procedure add_s8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ + p2^.ts32^; end;
procedure add_s8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ + p2^.ts64^; end;
procedure add_s8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin FVarHelp.SetContentAsSingle(p1, p1^.ts8^ + p2^.tSingle^); end;
procedure add_s8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin FVarHelp.SetContentAsDouble(p1, p1^.ts8^ + p2^.tDouble^); end;
procedure add_s8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure add_s8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_s8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_s8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                     begin  end;
procedure add_s8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_s8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure add_u16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu16^ := p1^.tu16^ + p2^.tu8^; end;
procedure add_u16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu16^ := p1^.tu16^ + p2^.ts8^; end;
procedure add_u16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ + p2^.tu16^; end;
procedure add_u16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ + p2^.ts16^; end;
procedure add_u16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ + p2^.tu32^; end;
procedure add_u16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ + p2^.ts32^; end;
procedure add_u16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ + p2^.ts64^; end;
procedure add_u16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.tu16^ + p2^.tSingle^); end;
procedure add_u16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.tu16^ + p2^.tDouble^); end;
procedure add_u16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_u16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_u16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_u16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure add_u16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure add_u16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_s16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts16^ := p1^.ts16^ + p2^.tu8^; end;
procedure add_s16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts16^ := p1^.ts16^ + p2^.ts8^; end;
procedure add_s16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ + p2^.tu16^; end;
procedure add_s16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ + p2^.ts16^; end;
procedure add_s16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ + p2^.tu32^; end;
procedure add_s16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ + p2^.ts32^; end;
procedure add_s16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ + p2^.ts64^; end;
procedure add_s16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.ts16^ + p2^.tSingle^); end;
procedure add_s16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.ts16^ + p2^.tDouble^); end;
procedure add_s16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_s16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_s16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_s16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure add_s16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure add_s16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_u32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu32^ := p1^.tu32^ + p2^.tu8^; end;
procedure add_u32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu32^ := p1^.tu32^ + p2^.ts8^; end;
procedure add_u32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ + p2^.tu16^; end;
procedure add_u32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ + p2^.ts16^; end;
procedure add_u32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ + p2^.tu32^; end;
procedure add_u32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ + p2^.ts32^; end;
procedure add_u32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ + p2^.ts64^; end;
procedure add_u32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.tu32^ + p2^.tSingle^); end;
procedure add_u32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.tu32^ + p2^.tDouble^); end;
procedure add_u32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_u32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_u32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_u32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure add_u32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure add_u32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_s32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts32^ := p1^.ts32^ + p2^.tu8^; end;
procedure add_s32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts32^ := p1^.ts32^ + p2^.ts8^; end;
procedure add_s32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ + p2^.tu16^; end;
procedure add_s32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ + p2^.ts16^; end;
procedure add_s32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ + p2^.tu32^; end;
procedure add_s32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ + p2^.ts32^; end;
procedure add_s32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ + p2^.ts64^; end;
procedure add_s32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.ts32^ + p2^.tSingle^); end;
procedure add_s32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.ts32^ + p2^.tDouble^); end;
procedure add_s32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_s32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_s32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_s32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure add_s32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure add_s32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_s64_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts64^ := p1^.ts64^ + p2^.tu8^; end;
procedure add_s64_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts64^ := p1^.ts64^ + p2^.ts8^; end;
procedure add_s64_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ + p2^.tu16^; end;
procedure add_s64_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ + p2^.ts16^; end;
procedure add_s64_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ + p2^.tu32^; end;
procedure add_s64_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ + p2^.ts32^; end;
procedure add_s64_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ + p2^.ts64^; end;
procedure add_s64_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.ts64^ + p2^.tSingle^); end;
procedure add_s64_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.ts64^ + p2^.tDouble^); end;
procedure add_s64_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_s64_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_s64_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_s64_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure add_s64_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure add_s64_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_single_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin p1^.tSingle^ := p1^.tSingle^ + p2^.tu8^; end;
procedure add_single_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin p1^.tSingle^ := p1^.tSingle^ + p2^.ts8^; end;
procedure add_single_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ + p2^.tu16^; end;
procedure add_single_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ + p2^.ts16^; end;
procedure add_single_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ + p2^.tu32^; end;
procedure add_single_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ + p2^.ts32^; end;
procedure add_single_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ + p2^.ts64^; end;
procedure add_single_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin p1^.tSingle^ := p1^.tSingle^ + p2^.tSingle^; end;
procedure add_single_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin p1^.tSingle^ := p1^.tSingle^ + p2^.tDouble^; end;
procedure add_single_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_single_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure add_single_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure add_single_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure add_single_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_single_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_double_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin p1^.tDouble^ := p1^.tDouble^ + p2^.tu8^; end;
procedure add_double_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin p1^.tDouble^ := p1^.tDouble^ + p2^.ts8^; end;
procedure add_double_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ + p2^.tu16^; end;
procedure add_double_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ + p2^.ts16^; end;
procedure add_double_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ + p2^.tu32^; end;
procedure add_double_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ + p2^.ts32^; end;
procedure add_double_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ + p2^.ts64^; end;
procedure add_double_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin p1^.tDouble^ := p1^.tDouble^ + p2^.tSingle^; end;
procedure add_double_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin p1^.tDouble^ := p1^.tDouble^ + p2^.tDouble^; end;
procedure add_double_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_double_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure add_double_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure add_double_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure add_double_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_double_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure add_string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure add_string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin PbtString(p1^.tString^)^ := PbtString(p1^.tString^)^ + PbtString(p2^.tString^)^; end;
procedure add_string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin FVarHelp.ConvertContent(p2, btString); PbtString(p1^.tString^)^ := PbtString(p1^.tString^)^ + PbtString(p2^.tString^)^; end;
procedure add_string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin FVarHelp.ConvertContent(p2, btString); PbtString(p1^.tString^)^ := PbtString(p1^.tString^)^ + PbtString(p2^.tString^)^; end;
procedure add_string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin FVarHelp.ConvertContent(p2, btString); PbtString(p1^.tString^)^ := PbtString(p1^.tString^)^ + PbtString(p2^.tString^)^; end;
procedure add_string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_utf8string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_utf8string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_utf8string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_utf8string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_utf8string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_utf8string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_utf8string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_utf8string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure add_utf8string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure add_utf8string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin FVarHelp.ConvertContent(p2, btUTF8String); PbtUTF8String(p1^.tString^)^ := PbtUTF8String(p1^.tString^)^ + PbtUTF8String(p2^.tString^)^; end;
procedure add_utf8string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);        begin PbtUTF8String(p1^.tString^)^ := PbtUTF8String(p1^.tString^)^ + PbtUTF8String(p2^.tString^)^; end;
procedure add_utf8string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);        begin FVarHelp.ConvertContent(p2, btUTF8String); PbtUTF8String(p1^.tString^)^ := PbtUTF8String(p1^.tString^)^ + PbtUTF8String(p2^.tString^)^; end;
procedure add_utf8string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);             begin FVarHelp.ConvertContent(p2, btUTF8String); PbtUTF8String(p1^.tString^)^ := PbtUTF8String(p1^.tString^)^ + PbtUTF8String(p2^.tString^)^; end;
procedure add_utf8string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);           begin  end;
procedure add_utf8string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure add_widestring_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_widestring_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_widestring_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_widestring_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_widestring_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_widestring_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_widestring_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_widestring_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure add_widestring_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure add_widestring_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin FVarHelp.ConvertContent(p2, btWideString); PbtWideString(p1^.tString^)^ := PbtWideString(p1^.tString^)^ + PbtWideString(p2^.tString^)^; end;
procedure add_widestring_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);        begin FVarHelp.ConvertContent(p2, btWideString); PbtWideString(p1^.tString^)^ := PbtWideString(p1^.tString^)^ + PbtWideString(p2^.tString^)^; end;
procedure add_widestring_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);        begin PbtWideString(p1^.tString^)^ := PbtWideString(p1^.tString^)^ + PbtWideString(p2^.tString^)^; end;
procedure add_widestring_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);             begin FVarHelp.ConvertContent(p2, btWideString); PbtWideString(p1^.tString^)^ := PbtWideString(p1^.tString^)^ + PbtWideString(p2^.tString^)^; end;
procedure add_widestring_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);           begin  end;
procedure add_widestring_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure add_pchar_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                     begin  end;
procedure add_pchar_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                     begin  end;
procedure add_pchar_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure add_pchar_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure add_pchar_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure add_pchar_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure add_pchar_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure add_pchar_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure add_pchar_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure add_pchar_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin FVarHelp.ConvertContent(p1, btString); PbtString(p1^.tString^)^ := PbtString(p1^.tString^)^ + PbtString(p2^.tString^)^; FVarHelp.ConvertContent(p1, btPChar); end;
procedure add_pchar_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);             begin FVarHelp.ConvertContent(p1, btString); FVarHelp.ConvertContent(p2, btString); PbtString(p1^.tString^)^ := PbtString(p1^.tString^)^ + PbtString(p2^.tString^)^; FVarHelp.ConvertContent(p1, btPChar); end;
procedure add_pchar_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);             begin FVarHelp.ConvertContent(p1, btString); FVarHelp.ConvertContent(p2, btString); PbtString(p1^.tString^)^ := PbtString(p1^.tString^)^ + PbtString(p2^.tString^)^; FVarHelp.ConvertContent(p1, btPChar); end;
procedure add_pchar_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin FVarHelp.ConvertContent(p1, btString); FVarHelp.ConvertContent(p2, btString); PbtString(p1^.tString^)^ := PbtString(p1^.tString^)^ + PbtString(p2^.tString^)^; FVarHelp.ConvertContent(p1, btPChar); end;
procedure add_pchar_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_pchar_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure add_pointer_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_pointer_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_pointer_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure add_pointer_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure add_pointer_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure add_pointer_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure add_pointer_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure add_pointer_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_pointer_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_pointer_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_pointer_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);           begin  end;
procedure add_pointer_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);           begin  end;
procedure add_pointer_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_pointer_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);              begin  end;
procedure add_pointer_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_object_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure add_object_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure add_object_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_object_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_object_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_object_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_object_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure add_object_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_object_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_object_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure add_object_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure add_object_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure add_object_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure add_object_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure add_object_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_u8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                        begin p1^.tu8^ := p1^.tu8^ - p2^.tu8^; end;
procedure sub_u8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                        begin p1^.tu8^ := p1^.tu8^ - p2^.ts8^; end;
procedure sub_u8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ - p2^.tu16^; end;
procedure sub_u8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ - p2^.ts16^; end;
procedure sub_u8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ - p2^.tu32^; end;
procedure sub_u8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ - p2^.ts32^; end;
procedure sub_u8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ - p2^.ts64^; end;
procedure sub_u8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin FVarHelp.SetContentAsSingle(p1, p1^.tu8^ - p2^.tSingle^); end;
procedure sub_u8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin FVarHelp.SetContentAsDouble(p1, p1^.tu8^ - p2^.tDouble^); end;
procedure sub_u8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure sub_u8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_u8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_u8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                     begin  end;
procedure sub_u8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_u8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure sub_s8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                        begin p1^.ts8^ := p1^.ts8^ - p2^.tu8^; end;
procedure sub_s8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                        begin p1^.ts8^ := p1^.ts8^ - p2^.ts8^; end;
procedure sub_s8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ - p2^.tu16^; end;
procedure sub_s8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ - p2^.ts16^; end;
procedure sub_s8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ - p2^.tu32^; end;
procedure sub_s8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ - p2^.ts32^; end;
procedure sub_s8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ - p2^.ts64^; end;
procedure sub_s8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin FVarHelp.SetContentAsSingle(p1, p1^.ts8^ - p2^.tSingle^); end;
procedure sub_s8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin FVarHelp.SetContentAsDouble(p1, p1^.ts8^ - p2^.tDouble^); end;
procedure sub_s8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure sub_s8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_s8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_s8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                     begin  end;
procedure sub_s8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_s8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure sub_u16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu16^ := p1^.tu16^ - p2^.tu8^; end;
procedure sub_u16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu16^ := p1^.tu16^ - p2^.ts8^; end;
procedure sub_u16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ - p2^.tu16^; end;
procedure sub_u16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ - p2^.ts16^; end;
procedure sub_u16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ - p2^.tu32^; end;
procedure sub_u16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ - p2^.ts32^; end;
procedure sub_u16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ - p2^.ts64^; end;
procedure sub_u16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.tu16^ - p2^.tSingle^); end;
procedure sub_u16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.tu16^ - p2^.tDouble^); end;
procedure sub_u16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_u16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_u16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_u16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure sub_u16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure sub_u16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_s16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts16^ := p1^.ts16^ - p2^.tu8^; end;
procedure sub_s16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts16^ := p1^.ts16^ - p2^.ts8^; end;
procedure sub_s16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ - p2^.tu16^; end;
procedure sub_s16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ - p2^.ts16^; end;
procedure sub_s16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ - p2^.tu32^; end;
procedure sub_s16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ - p2^.ts32^; end;
procedure sub_s16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ - p2^.ts64^; end;
procedure sub_s16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.ts16^ - p2^.tSingle^); end;
procedure sub_s16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.ts16^ - p2^.tDouble^); end;
procedure sub_s16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_s16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_s16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_s16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure sub_s16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure sub_s16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_u32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu32^ := p1^.tu32^ - p2^.tu8^; end;
procedure sub_u32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu32^ := p1^.tu32^ - p2^.ts8^; end;
procedure sub_u32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ - p2^.tu16^; end;
procedure sub_u32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ - p2^.ts16^; end;
procedure sub_u32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ - p2^.tu32^; end;
procedure sub_u32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ - p2^.ts32^; end;
procedure sub_u32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ - p2^.ts64^; end;
procedure sub_u32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.tu32^ - p2^.tSingle^); end;
procedure sub_u32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.tu32^ - p2^.tDouble^); end;
procedure sub_u32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_u32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_u32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_u32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure sub_u32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure sub_u32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_s32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts32^ := p1^.ts32^ - p2^.tu8^; end;
procedure sub_s32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts32^ := p1^.ts32^ - p2^.ts8^; end;
procedure sub_s32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ - p2^.tu16^; end;
procedure sub_s32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ - p2^.ts16^; end;
procedure sub_s32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ - p2^.tu32^; end;
procedure sub_s32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ - p2^.ts32^; end;
procedure sub_s32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ - p2^.ts64^; end;
procedure sub_s32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.ts32^ - p2^.tSingle^); end;
procedure sub_s32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.ts32^ - p2^.tDouble^); end;
procedure sub_s32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_s32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_s32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_s32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure sub_s32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure sub_s32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_s64_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts64^ := p1^.ts64^ - p2^.tu8^; end;
procedure sub_s64_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts64^ := p1^.ts64^ - p2^.ts8^; end;
procedure sub_s64_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ - p2^.tu16^; end;
procedure sub_s64_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ - p2^.ts16^; end;
procedure sub_s64_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ - p2^.tu32^; end;
procedure sub_s64_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ - p2^.ts32^; end;
procedure sub_s64_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ - p2^.ts64^; end;
procedure sub_s64_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.ts64^ - p2^.tSingle^); end;
procedure sub_s64_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.ts64^ - p2^.tDouble^); end;
procedure sub_s64_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_s64_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_s64_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_s64_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure sub_s64_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure sub_s64_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_single_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin p1^.tSingle^ := p1^.tSingle^ - p2^.tu8^; end;
procedure sub_single_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin p1^.tSingle^ := p1^.tSingle^ - p2^.ts8^; end;
procedure sub_single_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ - p2^.tu16^; end;
procedure sub_single_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ - p2^.ts16^; end;
procedure sub_single_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ - p2^.tu32^; end;
procedure sub_single_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ - p2^.ts32^; end;
procedure sub_single_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ - p2^.ts64^; end;
procedure sub_single_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin p1^.tSingle^ := p1^.tSingle^ - p2^.tSingle^; end;
procedure sub_single_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin p1^.tSingle^ := p1^.tSingle^ - p2^.tDouble^; end;
procedure sub_single_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_single_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure sub_single_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure sub_single_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure sub_single_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_single_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_double_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin p1^.tDouble^ := p1^.tDouble^ - p2^.tu8^; end;
procedure sub_double_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin p1^.tDouble^ := p1^.tDouble^ - p2^.ts8^; end;
procedure sub_double_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ - p2^.tu16^; end;
procedure sub_double_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ - p2^.ts16^; end;
procedure sub_double_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ - p2^.tu32^; end;
procedure sub_double_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ - p2^.ts32^; end;
procedure sub_double_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ - p2^.ts64^; end;
procedure sub_double_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin p1^.tDouble^ := p1^.tDouble^ - p2^.tSingle^; end;
procedure sub_double_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin p1^.tDouble^ := p1^.tDouble^ - p2^.tDouble^; end;
procedure sub_double_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_double_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure sub_double_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure sub_double_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure sub_double_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_double_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure sub_string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure sub_string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure sub_string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure sub_string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure sub_string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_utf8string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_utf8string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_utf8string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_utf8string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_utf8string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_utf8string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_utf8string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_utf8string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure sub_utf8string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure sub_utf8string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure sub_utf8string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);        begin  end;
procedure sub_utf8string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);        begin  end;
procedure sub_utf8string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);             begin  end;
procedure sub_utf8string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);           begin  end;
procedure sub_utf8string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure sub_widestring_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_widestring_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_widestring_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_widestring_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_widestring_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_widestring_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_widestring_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_widestring_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure sub_widestring_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure sub_widestring_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure sub_widestring_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);        begin  end;
procedure sub_widestring_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);        begin  end;
procedure sub_widestring_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);             begin  end;
procedure sub_widestring_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);           begin  end;
procedure sub_widestring_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure sub_pchar_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                     begin  end;
procedure sub_pchar_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                     begin  end;
procedure sub_pchar_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure sub_pchar_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure sub_pchar_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure sub_pchar_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure sub_pchar_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure sub_pchar_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure sub_pchar_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure sub_pchar_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure sub_pchar_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);             begin  end;
procedure sub_pchar_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);             begin  end;
procedure sub_pchar_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure sub_pchar_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_pchar_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure sub_pointer_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_pointer_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_pointer_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure sub_pointer_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure sub_pointer_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure sub_pointer_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure sub_pointer_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure sub_pointer_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_pointer_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_pointer_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_pointer_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);           begin  end;
procedure sub_pointer_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);           begin  end;
procedure sub_pointer_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_pointer_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);              begin  end;
procedure sub_pointer_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_object_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure sub_object_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure sub_object_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_object_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_object_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_object_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_object_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure sub_object_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_object_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_object_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure sub_object_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure sub_object_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure sub_object_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure sub_object_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure sub_object_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_u8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                        begin p1^.tu8^ := p1^.tu8^ * p2^.tu8^; end;
procedure mul_u8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                        begin p1^.tu8^ := p1^.tu8^ * p2^.ts8^; end;
procedure mul_u8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ * p2^.tu16^; end;
procedure mul_u8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ * p2^.ts16^; end;
procedure mul_u8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ * p2^.tu32^; end;
procedure mul_u8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ * p2^.ts32^; end;
procedure mul_u8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ * p2^.ts64^; end;
procedure mul_u8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin FVarHelp.SetContentAsSingle(p1, p1^.tu8^ * p2^.tSingle^); end;
procedure mul_u8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin FVarHelp.SetContentAsDouble(p1, p1^.tu8^ * p2^.tDouble^); end;
procedure mul_u8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure mul_u8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_u8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_u8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                     begin  end;
procedure mul_u8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_u8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure mul_s8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                        begin p1^.ts8^ := p1^.ts8^ * p2^.tu8^; end;
procedure mul_s8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                        begin p1^.ts8^ := p1^.ts8^ * p2^.ts8^; end;
procedure mul_s8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ * p2^.tu16^; end;
procedure mul_s8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ * p2^.ts16^; end;
procedure mul_s8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ * p2^.tu32^; end;
procedure mul_s8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ * p2^.ts32^; end;
procedure mul_s8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ * p2^.ts64^; end;
procedure mul_s8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin FVarHelp.SetContentAsSingle(p1, p1^.ts8^ * p2^.tSingle^); end;
procedure mul_s8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin FVarHelp.SetContentAsDouble(p1, p1^.ts8^ * p2^.tDouble^); end;
procedure mul_s8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure mul_s8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_s8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_s8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                     begin  end;
procedure mul_s8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_s8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure mul_u16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu16^ := p1^.tu16^ * p2^.tu8^; end;
procedure mul_u16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu16^ := p1^.tu16^ * p2^.ts8^; end;
procedure mul_u16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ * p2^.tu16^; end;
procedure mul_u16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ * p2^.ts16^; end;
procedure mul_u16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ * p2^.tu32^; end;
procedure mul_u16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ * p2^.ts32^; end;
procedure mul_u16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ * p2^.ts64^; end;
procedure mul_u16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.tu16^ * p2^.tSingle^); end;
procedure mul_u16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.tu16^ * p2^.tDouble^); end;
procedure mul_u16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_u16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_u16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_u16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure mul_u16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure mul_u16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_s16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts16^ := p1^.ts16^ * p2^.tu8^; end;
procedure mul_s16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts16^ := p1^.ts16^ * p2^.ts8^; end;
procedure mul_s16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ * p2^.tu16^; end;
procedure mul_s16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ * p2^.ts16^; end;
procedure mul_s16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ * p2^.tu32^; end;
procedure mul_s16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ * p2^.ts32^; end;
procedure mul_s16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ * p2^.ts64^; end;
procedure mul_s16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.ts16^ * p2^.tSingle^); end;
procedure mul_s16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.ts16^ * p2^.tDouble^); end;
procedure mul_s16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_s16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_s16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_s16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure mul_s16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure mul_s16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_u32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu32^ := p1^.tu32^ * p2^.tu8^; end;
procedure mul_u32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu32^ := p1^.tu32^ * p2^.ts8^; end;
procedure mul_u32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ * p2^.tu16^; end;
procedure mul_u32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ * p2^.ts16^; end;
procedure mul_u32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ * p2^.tu32^; end;
procedure mul_u32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ * p2^.ts32^; end;
procedure mul_u32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ * p2^.ts64^; end;
procedure mul_u32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.tu32^ * p2^.tSingle^); end;
procedure mul_u32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.tu32^ * p2^.tDouble^); end;
procedure mul_u32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_u32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_u32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_u32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure mul_u32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure mul_u32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_s32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts32^ := p1^.ts32^ * p2^.tu8^; end;
procedure mul_s32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts32^ := p1^.ts32^ * p2^.ts8^; end;
procedure mul_s32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ * p2^.tu16^; end;
procedure mul_s32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ * p2^.ts16^; end;
procedure mul_s32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ * p2^.tu32^; end;
procedure mul_s32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ * p2^.ts32^; end;
procedure mul_s32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ * p2^.ts64^; end;
procedure mul_s32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.ts32^ * p2^.tSingle^); end;
procedure mul_s32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.ts32^ * p2^.tDouble^); end;
procedure mul_s32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_s32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_s32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_s32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure mul_s32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure mul_s32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_s64_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts64^ := p1^.ts64^ * p2^.tu8^; end;
procedure mul_s64_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts64^ := p1^.ts64^ * p2^.ts8^; end;
procedure mul_s64_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ * p2^.tu16^; end;
procedure mul_s64_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ * p2^.ts16^; end;
procedure mul_s64_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ * p2^.tu32^; end;
procedure mul_s64_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ * p2^.ts32^; end;
procedure mul_s64_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ * p2^.ts64^; end;
procedure mul_s64_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.ts64^ * p2^.tSingle^); end;
procedure mul_s64_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.ts64^ * p2^.tDouble^); end;
procedure mul_s64_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_s64_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_s64_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_s64_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure mul_s64_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure mul_s64_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_single_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin p1^.tSingle^ := p1^.tSingle^ * p2^.tu8^; end;
procedure mul_single_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin p1^.tSingle^ := p1^.tSingle^ * p2^.ts8^; end;
procedure mul_single_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ * p2^.tu16^; end;
procedure mul_single_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ * p2^.ts16^; end;
procedure mul_single_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ * p2^.tu32^; end;
procedure mul_single_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ * p2^.ts32^; end;
procedure mul_single_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ * p2^.ts64^; end;
procedure mul_single_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin p1^.tSingle^ := p1^.tSingle^ * p2^.tSingle^; end;
procedure mul_single_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin p1^.tSingle^ := p1^.tSingle^ * p2^.tDouble^; end;
procedure mul_single_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_single_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure mul_single_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure mul_single_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure mul_single_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_single_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_double_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin p1^.tDouble^ := p1^.tDouble^ * p2^.tu8^; end;
procedure mul_double_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin p1^.tDouble^ := p1^.tDouble^ * p2^.ts8^; end;
procedure mul_double_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ * p2^.tu16^; end;
procedure mul_double_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ * p2^.ts16^; end;
procedure mul_double_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ * p2^.tu32^; end;
procedure mul_double_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ * p2^.ts32^; end;
procedure mul_double_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ * p2^.ts64^; end;
procedure mul_double_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin p1^.tDouble^ := p1^.tDouble^ * p2^.tSingle^; end;
procedure mul_double_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin p1^.tDouble^ := p1^.tDouble^ * p2^.tDouble^; end;
procedure mul_double_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_double_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure mul_double_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure mul_double_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure mul_double_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_double_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure mul_string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure mul_string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure mul_string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure mul_string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure mul_string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_utf8string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_utf8string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_utf8string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_utf8string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_utf8string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_utf8string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_utf8string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_utf8string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure mul_utf8string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure mul_utf8string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure mul_utf8string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);        begin  end;
procedure mul_utf8string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);        begin  end;
procedure mul_utf8string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);             begin  end;
procedure mul_utf8string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);           begin  end;
procedure mul_utf8string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure mul_widestring_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_widestring_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_widestring_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_widestring_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_widestring_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_widestring_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_widestring_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_widestring_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure mul_widestring_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure mul_widestring_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure mul_widestring_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);        begin  end;
procedure mul_widestring_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);        begin  end;
procedure mul_widestring_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);             begin  end;
procedure mul_widestring_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);           begin  end;
procedure mul_widestring_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure mul_pchar_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                     begin  end;
procedure mul_pchar_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                     begin  end;
procedure mul_pchar_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure mul_pchar_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure mul_pchar_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure mul_pchar_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure mul_pchar_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure mul_pchar_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure mul_pchar_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure mul_pchar_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure mul_pchar_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);             begin  end;
procedure mul_pchar_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);             begin  end;
procedure mul_pchar_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure mul_pchar_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_pchar_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure mul_pointer_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_pointer_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_pointer_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure mul_pointer_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure mul_pointer_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure mul_pointer_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure mul_pointer_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure mul_pointer_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_pointer_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_pointer_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_pointer_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);           begin  end;
procedure mul_pointer_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);           begin  end;
procedure mul_pointer_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_pointer_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);              begin  end;
procedure mul_pointer_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_object_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure mul_object_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure mul_object_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_object_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_object_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_object_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_object_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure mul_object_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_object_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_object_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure mul_object_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure mul_object_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure mul_object_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure mul_object_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure mul_object_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_u8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                        begin p1^.tu8^ := p1^.tu8^ div p2^.tu8^; end;
procedure div_u8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                        begin p1^.tu8^ := p1^.tu8^ div p2^.ts8^; end;
procedure div_u8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ div p2^.tu16^; end;
procedure div_u8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ div p2^.ts16^; end;
procedure div_u8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ div p2^.tu32^; end;
procedure div_u8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ div p2^.ts32^; end;
procedure div_u8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu8^ := p1^.tu8^ div p2^.ts64^; end;
procedure div_u8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin FVarHelp.SetContentAsSingle(p1, p1^.tu8^ / p2^.tSingle^); end;
procedure div_u8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin FVarHelp.SetContentAsDouble(p1, p1^.tu8^ / p2^.tDouble^); end;
procedure div_u8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure div_u8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_u8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_u8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                     begin  end;
procedure div_u8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_u8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure div_s8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                        begin p1^.ts8^ := p1^.ts8^ div p2^.tu8^; end;
procedure div_s8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                        begin p1^.ts8^ := p1^.ts8^ div p2^.ts8^; end;
procedure div_s8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ div p2^.tu16^; end;
procedure div_s8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ div p2^.ts16^; end;
procedure div_s8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ div p2^.tu32^; end;
procedure div_s8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ div p2^.ts32^; end;
procedure div_s8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts8^ := p1^.ts8^ div p2^.ts64^; end;
procedure div_s8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin FVarHelp.SetContentAsSingle(p1, p1^.ts8^ / p2^.tSingle^); end;
procedure div_s8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin FVarHelp.SetContentAsDouble(p1, p1^.ts8^ / p2^.tDouble^); end;
procedure div_s8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure div_s8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_s8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_s8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                     begin  end;
procedure div_s8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_s8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure div_u16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu16^ := p1^.tu16^ div p2^.tu8^; end;
procedure div_u16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu16^ := p1^.tu16^ div p2^.ts8^; end;
procedure div_u16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ div p2^.tu16^; end;
procedure div_u16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ div p2^.ts16^; end;
procedure div_u16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ div p2^.tu32^; end;
procedure div_u16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ div p2^.ts32^; end;
procedure div_u16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu16^ := p1^.tu16^ div p2^.ts64^; end;
procedure div_u16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.tu16^ / p2^.tSingle^); end;
procedure div_u16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.tu16^ / p2^.tDouble^); end;
procedure div_u16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_u16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_u16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_u16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure div_u16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure div_u16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_s16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts16^ := p1^.ts16^ div p2^.tu8^; end;
procedure div_s16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts16^ := p1^.ts16^ div p2^.ts8^; end;
procedure div_s16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ div p2^.tu16^; end;
procedure div_s16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ div p2^.ts16^; end;
procedure div_s16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ div p2^.tu32^; end;
procedure div_s16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ div p2^.ts32^; end;
procedure div_s16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts16^ := p1^.ts16^ div p2^.ts64^; end;
procedure div_s16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.ts16^ / p2^.tSingle^); end;
procedure div_s16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.ts16^ / p2^.tDouble^); end;
procedure div_s16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_s16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_s16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_s16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure div_s16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure div_s16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_u32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu32^ := p1^.tu32^ div p2^.tu8^; end;
procedure div_u32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.tu32^ := p1^.tu32^ div p2^.ts8^; end;
procedure div_u32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ div p2^.tu16^; end;
procedure div_u32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ div p2^.ts16^; end;
procedure div_u32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ div p2^.tu32^; end;
procedure div_u32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ div p2^.ts32^; end;
procedure div_u32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.tu32^ := p1^.tu32^ div p2^.ts64^; end;
procedure div_u32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.tu32^ / p2^.tSingle^); end;
procedure div_u32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.tu32^ / p2^.tDouble^); end;
procedure div_u32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_u32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_u32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_u32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure div_u32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure div_u32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_s32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts32^ := p1^.ts32^ div p2^.tu8^; end;
procedure div_s32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts32^ := p1^.ts32^ div p2^.ts8^; end;
procedure div_s32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ div p2^.tu16^; end;
procedure div_s32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ div p2^.ts16^; end;
procedure div_s32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ div p2^.tu32^; end;
procedure div_s32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ div p2^.ts32^; end;
procedure div_s32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts32^ := p1^.ts32^ div p2^.ts64^; end;
procedure div_s32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.ts32^ / p2^.tSingle^); end;
procedure div_s32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.ts32^ / p2^.tDouble^); end;
procedure div_s32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_s32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_s32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_s32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure div_s32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure div_s32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_s64_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts64^ := p1^.ts64^ div p2^.tu8^; end;
procedure div_s64_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                       begin p1^.ts64^ := p1^.ts64^ div p2^.ts8^; end;
procedure div_s64_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ div p2^.tu16^; end;
procedure div_s64_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ div p2^.ts16^; end;
procedure div_s64_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ div p2^.tu32^; end;
procedure div_s64_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ div p2^.ts32^; end;
procedure div_s64_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                      begin p1^.ts64^ := p1^.ts64^ div p2^.ts64^; end;
procedure div_s64_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsSingle(p1, p1^.ts64^ / p2^.tSingle^); end;
procedure div_s64_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin FVarHelp.SetContentAsDouble(p1, p1^.ts64^ / p2^.tDouble^); end;
procedure div_s64_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_s64_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_s64_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_s64_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure div_s64_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure div_s64_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_single_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin p1^.tSingle^ := p1^.tSingle^ / p2^.tu8^; end;
procedure div_single_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin p1^.tSingle^ := p1^.tSingle^ / p2^.ts8^; end;
procedure div_single_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ / p2^.tu16^; end;
procedure div_single_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ / p2^.ts16^; end;
procedure div_single_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ / p2^.tu32^; end;
procedure div_single_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ / p2^.ts32^; end;
procedure div_single_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tSingle^ := p1^.tSingle^ / p2^.ts64^; end;
procedure div_single_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin p1^.tSingle^ := p1^.tSingle^ / p2^.tSingle^; end;
procedure div_single_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin p1^.tSingle^ := p1^.tSingle^ / p2^.tDouble^; end;
procedure div_single_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_single_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure div_single_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure div_single_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure div_single_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_single_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_double_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin p1^.tDouble^ := p1^.tDouble^ / p2^.tu8^; end;
procedure div_double_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin p1^.tDouble^ := p1^.tDouble^ / p2^.ts8^; end;
procedure div_double_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ / p2^.tu16^; end;
procedure div_double_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ / p2^.ts16^; end;
procedure div_double_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ / p2^.tu32^; end;
procedure div_double_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ / p2^.ts32^; end;
procedure div_double_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin p1^.tDouble^ := p1^.tDouble^ / p2^.ts64^; end;
procedure div_double_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin p1^.tDouble^ := p1^.tDouble^ / p2^.tSingle^; end;
procedure div_double_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin p1^.tDouble^ := p1^.tDouble^ / p2^.tDouble^; end;
procedure div_double_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_double_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure div_double_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure div_double_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure div_double_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_double_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure div_string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure div_string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure div_string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure div_string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure div_string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_utf8string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_utf8string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_utf8string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_utf8string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_utf8string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_utf8string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_utf8string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_utf8string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure div_utf8string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure div_utf8string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure div_utf8string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);        begin  end;
procedure div_utf8string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);        begin  end;
procedure div_utf8string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);             begin  end;
procedure div_utf8string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);           begin  end;
procedure div_utf8string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure div_widestring_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_widestring_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_widestring_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_widestring_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_widestring_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_widestring_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_widestring_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_widestring_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure div_widestring_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure div_widestring_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure div_widestring_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);        begin  end;
procedure div_widestring_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);        begin  end;
procedure div_widestring_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);             begin  end;
procedure div_widestring_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);           begin  end;
procedure div_widestring_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure div_pchar_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                     begin  end;
procedure div_pchar_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                     begin  end;
procedure div_pchar_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure div_pchar_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure div_pchar_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure div_pchar_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure div_pchar_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure div_pchar_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure div_pchar_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure div_pchar_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure div_pchar_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);             begin  end;
procedure div_pchar_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);             begin  end;
procedure div_pchar_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure div_pchar_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_pchar_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure div_pointer_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_pointer_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_pointer_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure div_pointer_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure div_pointer_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure div_pointer_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure div_pointer_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                  begin  end;
procedure div_pointer_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_pointer_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_pointer_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_pointer_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);           begin  end;
procedure div_pointer_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);           begin  end;
procedure div_pointer_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_pointer_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);              begin  end;
procedure div_pointer_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_object_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure div_object_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                    begin  end;
procedure div_object_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_object_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_object_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_object_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_object_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                   begin  end;
procedure div_object_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_object_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_object_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure div_object_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure div_object_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);            begin  end;
procedure div_object_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                 begin  end;
procedure div_object_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);               begin  end;
procedure div_object_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper);                begin  end;
procedure and_u8_u8(p1, p2: PSE2VarData);                                                 begin p1^.tu8^ := p1^.tu8^ and p2^.tu8^; end;
procedure and_u8_s8(p1, p2: PSE2VarData);                                                 begin p1^.tu8^ := p1^.tu8^ and p2^.ts8^; end;
procedure and_u8_u16(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ and p2^.tu16^; end;
procedure and_u8_s16(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ and p2^.ts16^; end;
procedure and_u8_u32(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ and p2^.tu32^; end;
procedure and_u8_s32(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ and p2^.ts32^; end;
procedure and_u8_s64(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ and p2^.ts64^; end;
procedure and_u8_single(p1, p2: PSE2VarData);                                             begin  end;
procedure and_u8_double(p1, p2: PSE2VarData);                                             begin  end;
procedure and_u8_string(p1, p2: PSE2VarData);                                             begin  end;
procedure and_u8_utf8string(p1, p2: PSE2VarData);                                         begin  end;
procedure and_u8_widestring(p1, p2: PSE2VarData);                                         begin  end;
procedure and_u8_pchar(p1, p2: PSE2VarData);                                              begin  end;
procedure and_u8_pointer(p1, p2: PSE2VarData);                                            begin  end;
procedure and_u8_object(p1, p2: PSE2VarData);                                             begin  end;
procedure and_s8_u8(p1, p2: PSE2VarData);                                                 begin p1^.ts8^ := p1^.ts8^ and p2^.tu8^; end;
procedure and_s8_s8(p1, p2: PSE2VarData);                                                 begin p1^.ts8^ := p1^.ts8^ and p2^.ts8^; end;
procedure and_s8_u16(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ and p2^.tu16^; end;
procedure and_s8_s16(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ and p2^.ts16^; end;
procedure and_s8_u32(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ and p2^.tu32^; end;
procedure and_s8_s32(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ and p2^.ts32^; end;
procedure and_s8_s64(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ and p2^.ts64^; end;
procedure and_s8_single(p1, p2: PSE2VarData);                                             begin  end;
procedure and_s8_double(p1, p2: PSE2VarData);                                             begin  end;
procedure and_s8_string(p1, p2: PSE2VarData);                                             begin  end;
procedure and_s8_utf8string(p1, p2: PSE2VarData);                                         begin  end;
procedure and_s8_widestring(p1, p2: PSE2VarData);                                         begin  end;
procedure and_s8_pchar(p1, p2: PSE2VarData);                                              begin  end;
procedure and_s8_pointer(p1, p2: PSE2VarData);                                            begin  end;
procedure and_s8_object(p1, p2: PSE2VarData);                                             begin  end;
procedure and_u16_u8(p1, p2: PSE2VarData);                                                begin p1^.tu16^ := p1^.tu16^ and p2^.tu8^; end;
procedure and_u16_s8(p1, p2: PSE2VarData);                                                begin p1^.tu16^ := p1^.tu16^ and p2^.ts8^; end;
procedure and_u16_u16(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ and p2^.tu16^; end;
procedure and_u16_s16(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ and p2^.ts16^; end;
procedure and_u16_u32(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ and p2^.tu32^; end;
procedure and_u16_s32(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ and p2^.ts32^; end;
procedure and_u16_s64(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ and p2^.ts64^; end;
procedure and_u16_single(p1, p2: PSE2VarData);                                            begin  end;
procedure and_u16_double(p1, p2: PSE2VarData);                                            begin  end;
procedure and_u16_string(p1, p2: PSE2VarData);                                            begin  end;
procedure and_u16_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure and_u16_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure and_u16_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure and_u16_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure and_u16_object(p1, p2: PSE2VarData);                                            begin  end;
procedure and_s16_u8(p1, p2: PSE2VarData);                                                begin p1^.ts16^ := p1^.ts16^ and p2^.tu8^; end;
procedure and_s16_s8(p1, p2: PSE2VarData);                                                begin p1^.ts16^ := p1^.ts16^ and p2^.ts8^; end;
procedure and_s16_u16(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ and p2^.tu16^; end;
procedure and_s16_s16(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ and p2^.ts16^; end;
procedure and_s16_u32(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ and p2^.tu32^; end;
procedure and_s16_s32(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ and p2^.ts32^; end;
procedure and_s16_s64(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ and p2^.ts64^; end;
procedure and_s16_single(p1, p2: PSE2VarData);                                            begin  end;
procedure and_s16_double(p1, p2: PSE2VarData);                                            begin  end;
procedure and_s16_string(p1, p2: PSE2VarData);                                            begin  end;
procedure and_s16_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure and_s16_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure and_s16_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure and_s16_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure and_s16_object(p1, p2: PSE2VarData);                                            begin  end;
procedure and_u32_u8(p1, p2: PSE2VarData);                                                begin p1^.tu32^ := p1^.tu32^ and p2^.tu8^; end;
procedure and_u32_s8(p1, p2: PSE2VarData);                                                begin p1^.tu32^ := p1^.tu32^ and p2^.ts8^; end;
procedure and_u32_u16(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ and p2^.tu16^; end;
procedure and_u32_s16(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ and p2^.ts16^; end;
procedure and_u32_u32(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ and p2^.tu32^; end;
procedure and_u32_s32(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ and p2^.ts32^; end;
procedure and_u32_s64(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ and p2^.ts64^; end;
procedure and_u32_single(p1, p2: PSE2VarData);                                            begin  end;
procedure and_u32_double(p1, p2: PSE2VarData);                                            begin  end;
procedure and_u32_string(p1, p2: PSE2VarData);                                            begin  end;
procedure and_u32_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure and_u32_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure and_u32_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure and_u32_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure and_u32_object(p1, p2: PSE2VarData);                                            begin  end;
procedure and_s32_u8(p1, p2: PSE2VarData);                                                begin p1^.ts32^ := p1^.ts32^ and p2^.tu8^; end;
procedure and_s32_s8(p1, p2: PSE2VarData);                                                begin p1^.ts32^ := p1^.ts32^ and p2^.ts8^; end;
procedure and_s32_u16(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ and p2^.tu16^; end;
procedure and_s32_s16(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ and p2^.ts16^; end;
procedure and_s32_u32(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ and p2^.tu32^; end;
procedure and_s32_s32(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ and p2^.ts32^; end;
procedure and_s32_s64(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ and p2^.ts64^; end;
procedure and_s32_single(p1, p2: PSE2VarData);                                            begin  end;
procedure and_s32_double(p1, p2: PSE2VarData);                                            begin  end;
procedure and_s32_string(p1, p2: PSE2VarData);                                            begin  end;
procedure and_s32_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure and_s32_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure and_s32_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure and_s32_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure and_s32_object(p1, p2: PSE2VarData);                                            begin  end;
procedure and_s64_u8(p1, p2: PSE2VarData);                                                begin p1^.ts64^ := p1^.ts64^ and p2^.tu8^; end;
procedure and_s64_s8(p1, p2: PSE2VarData);                                                begin p1^.ts64^ := p1^.ts64^ and p2^.ts8^; end;
procedure and_s64_u16(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ and p2^.tu16^; end;
procedure and_s64_s16(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ and p2^.ts16^; end;
procedure and_s64_u32(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ and p2^.tu32^; end;
procedure and_s64_s32(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ and p2^.ts32^; end;
procedure and_s64_s64(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ and p2^.ts64^; end;
procedure and_s64_single(p1, p2: PSE2VarData);                                            begin  end;
procedure and_s64_double(p1, p2: PSE2VarData);                                            begin  end;
procedure and_s64_string(p1, p2: PSE2VarData);                                            begin  end;
procedure and_s64_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure and_s64_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure and_s64_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure and_s64_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure and_s64_object(p1, p2: PSE2VarData);                                            begin  end;
procedure and_single_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure and_single_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure and_single_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure and_single_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure and_single_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure and_single_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure and_single_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure and_single_single(p1, p2: PSE2VarData);                                         begin  end;
procedure and_single_double(p1, p2: PSE2VarData);                                         begin  end;
procedure and_single_string(p1, p2: PSE2VarData);                                         begin  end;
procedure and_single_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure and_single_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure and_single_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure and_single_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure and_single_object(p1, p2: PSE2VarData);                                         begin  end;
procedure and_double_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure and_double_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure and_double_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure and_double_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure and_double_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure and_double_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure and_double_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure and_double_single(p1, p2: PSE2VarData);                                         begin  end;
procedure and_double_double(p1, p2: PSE2VarData);                                         begin  end;
procedure and_double_string(p1, p2: PSE2VarData);                                         begin  end;
procedure and_double_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure and_double_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure and_double_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure and_double_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure and_double_object(p1, p2: PSE2VarData);                                         begin  end;
procedure and_string_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure and_string_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure and_string_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure and_string_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure and_string_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure and_string_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure and_string_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure and_string_single(p1, p2: PSE2VarData);                                         begin  end;
procedure and_string_double(p1, p2: PSE2VarData);                                         begin  end;
procedure and_string_string(p1, p2: PSE2VarData);                                         begin  end;
procedure and_string_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure and_string_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure and_string_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure and_string_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure and_string_object(p1, p2: PSE2VarData);                                         begin  end;
procedure and_utf8string_u8(p1, p2: PSE2VarData);                                         begin  end;
procedure and_utf8string_s8(p1, p2: PSE2VarData);                                         begin  end;
procedure and_utf8string_u16(p1, p2: PSE2VarData);                                        begin  end;
procedure and_utf8string_s16(p1, p2: PSE2VarData);                                        begin  end;
procedure and_utf8string_u32(p1, p2: PSE2VarData);                                        begin  end;
procedure and_utf8string_s32(p1, p2: PSE2VarData);                                        begin  end;
procedure and_utf8string_s64(p1, p2: PSE2VarData);                                        begin  end;
procedure and_utf8string_single(p1, p2: PSE2VarData);                                     begin  end;
procedure and_utf8string_double(p1, p2: PSE2VarData);                                     begin  end;
procedure and_utf8string_string(p1, p2: PSE2VarData);                                     begin  end;
procedure and_utf8string_utf8string(p1, p2: PSE2VarData);                                 begin  end;
procedure and_utf8string_widestring(p1, p2: PSE2VarData);                                 begin  end;
procedure and_utf8string_pchar(p1, p2: PSE2VarData);                                      begin  end;
procedure and_utf8string_pointer(p1, p2: PSE2VarData);                                    begin  end;
procedure and_utf8string_object(p1, p2: PSE2VarData);                                     begin  end;
procedure and_widestring_u8(p1, p2: PSE2VarData);                                         begin  end;
procedure and_widestring_s8(p1, p2: PSE2VarData);                                         begin  end;
procedure and_widestring_u16(p1, p2: PSE2VarData);                                        begin  end;
procedure and_widestring_s16(p1, p2: PSE2VarData);                                        begin  end;
procedure and_widestring_u32(p1, p2: PSE2VarData);                                        begin  end;
procedure and_widestring_s32(p1, p2: PSE2VarData);                                        begin  end;
procedure and_widestring_s64(p1, p2: PSE2VarData);                                        begin  end;
procedure and_widestring_single(p1, p2: PSE2VarData);                                     begin  end;
procedure and_widestring_double(p1, p2: PSE2VarData);                                     begin  end;
procedure and_widestring_string(p1, p2: PSE2VarData);                                     begin  end;
procedure and_widestring_utf8string(p1, p2: PSE2VarData);                                 begin  end;
procedure and_widestring_widestring(p1, p2: PSE2VarData);                                 begin  end;
procedure and_widestring_pchar(p1, p2: PSE2VarData);                                      begin  end;
procedure and_widestring_pointer(p1, p2: PSE2VarData);                                    begin  end;
procedure and_widestring_object(p1, p2: PSE2VarData);                                     begin  end;
procedure and_pchar_u8(p1, p2: PSE2VarData);                                              begin  end;
procedure and_pchar_s8(p1, p2: PSE2VarData);                                              begin  end;
procedure and_pchar_u16(p1, p2: PSE2VarData);                                             begin  end;
procedure and_pchar_s16(p1, p2: PSE2VarData);                                             begin  end;
procedure and_pchar_u32(p1, p2: PSE2VarData);                                             begin  end;
procedure and_pchar_s32(p1, p2: PSE2VarData);                                             begin  end;
procedure and_pchar_s64(p1, p2: PSE2VarData);                                             begin  end;
procedure and_pchar_single(p1, p2: PSE2VarData);                                          begin  end;
procedure and_pchar_double(p1, p2: PSE2VarData);                                          begin  end;
procedure and_pchar_string(p1, p2: PSE2VarData);                                          begin  end;
procedure and_pchar_utf8string(p1, p2: PSE2VarData);                                      begin  end;
procedure and_pchar_widestring(p1, p2: PSE2VarData);                                      begin  end;
procedure and_pchar_pchar(p1, p2: PSE2VarData);                                           begin  end;
procedure and_pchar_pointer(p1, p2: PSE2VarData);                                         begin  end;
procedure and_pchar_object(p1, p2: PSE2VarData);                                          begin  end;
procedure and_pointer_u8(p1, p2: PSE2VarData);                                            begin  end;
procedure and_pointer_s8(p1, p2: PSE2VarData);                                            begin  end;
procedure and_pointer_u16(p1, p2: PSE2VarData);                                           begin  end;
procedure and_pointer_s16(p1, p2: PSE2VarData);                                           begin  end;
procedure and_pointer_u32(p1, p2: PSE2VarData);                                           begin  end;
procedure and_pointer_s32(p1, p2: PSE2VarData);                                           begin  end;
procedure and_pointer_s64(p1, p2: PSE2VarData);                                           begin  end;
procedure and_pointer_single(p1, p2: PSE2VarData);                                        begin  end;
procedure and_pointer_double(p1, p2: PSE2VarData);                                        begin  end;
procedure and_pointer_string(p1, p2: PSE2VarData);                                        begin  end;
procedure and_pointer_utf8string(p1, p2: PSE2VarData);                                    begin  end;
procedure and_pointer_widestring(p1, p2: PSE2VarData);                                    begin  end;
procedure and_pointer_pchar(p1, p2: PSE2VarData);                                         begin  end;
procedure and_pointer_pointer(p1, p2: PSE2VarData);                                       begin  end;
procedure and_pointer_object(p1, p2: PSE2VarData);                                        begin  end;
procedure and_object_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure and_object_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure and_object_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure and_object_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure and_object_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure and_object_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure and_object_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure and_object_single(p1, p2: PSE2VarData);                                         begin  end;
procedure and_object_double(p1, p2: PSE2VarData);                                         begin  end;
procedure and_object_string(p1, p2: PSE2VarData);                                         begin  end;
procedure and_object_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure and_object_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure and_object_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure and_object_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure and_object_object(p1, p2: PSE2VarData);                                         begin  end;
procedure or_u8_u8(p1, p2: PSE2VarData);                                                  begin p1^.tu8^ := p1^.tu8^ or p2^.tu8^; end;
procedure or_u8_s8(p1, p2: PSE2VarData);                                                  begin p1^.tu8^ := p1^.tu8^ or p2^.ts8^; end;
procedure or_u8_u16(p1, p2: PSE2VarData);                                                 begin p1^.tu8^ := p1^.tu8^ or p2^.tu16^; end;
procedure or_u8_s16(p1, p2: PSE2VarData);                                                 begin p1^.tu8^ := p1^.tu8^ or p2^.ts16^; end;
procedure or_u8_u32(p1, p2: PSE2VarData);                                                 begin p1^.tu8^ := p1^.tu8^ or p2^.tu32^; end;
procedure or_u8_s32(p1, p2: PSE2VarData);                                                 begin p1^.tu8^ := p1^.tu8^ or p2^.ts32^; end;
procedure or_u8_s64(p1, p2: PSE2VarData);                                                 begin p1^.tu8^ := p1^.tu8^ or p2^.ts64^; end;
procedure or_u8_single(p1, p2: PSE2VarData);                                              begin  end;
procedure or_u8_double(p1, p2: PSE2VarData);                                              begin  end;
procedure or_u8_string(p1, p2: PSE2VarData);                                              begin  end;
procedure or_u8_utf8string(p1, p2: PSE2VarData);                                          begin  end;
procedure or_u8_widestring(p1, p2: PSE2VarData);                                          begin  end;
procedure or_u8_pchar(p1, p2: PSE2VarData);                                               begin  end;
procedure or_u8_pointer(p1, p2: PSE2VarData);                                             begin  end;
procedure or_u8_object(p1, p2: PSE2VarData);                                              begin  end;
procedure or_s8_u8(p1, p2: PSE2VarData);                                                  begin p1^.ts8^ := p1^.ts8^ or p2^.tu8^; end;
procedure or_s8_s8(p1, p2: PSE2VarData);                                                  begin p1^.ts8^ := p1^.ts8^ or p2^.ts8^; end;
procedure or_s8_u16(p1, p2: PSE2VarData);                                                 begin p1^.ts8^ := p1^.ts8^ or p2^.tu16^; end;
procedure or_s8_s16(p1, p2: PSE2VarData);                                                 begin p1^.ts8^ := p1^.ts8^ or p2^.ts16^; end;
procedure or_s8_u32(p1, p2: PSE2VarData);                                                 begin p1^.ts8^ := p1^.ts8^ or p2^.tu32^; end;
procedure or_s8_s32(p1, p2: PSE2VarData);                                                 begin p1^.ts8^ := p1^.ts8^ or p2^.ts32^; end;
procedure or_s8_s64(p1, p2: PSE2VarData);                                                 begin p1^.ts8^ := p1^.ts8^ or p2^.ts64^; end;
procedure or_s8_single(p1, p2: PSE2VarData);                                              begin  end;
procedure or_s8_double(p1, p2: PSE2VarData);                                              begin  end;
procedure or_s8_string(p1, p2: PSE2VarData);                                              begin  end;
procedure or_s8_utf8string(p1, p2: PSE2VarData);                                          begin  end;
procedure or_s8_widestring(p1, p2: PSE2VarData);                                          begin  end;
procedure or_s8_pchar(p1, p2: PSE2VarData);                                               begin  end;
procedure or_s8_pointer(p1, p2: PSE2VarData);                                             begin  end;
procedure or_s8_object(p1, p2: PSE2VarData);                                              begin  end;
procedure or_u16_u8(p1, p2: PSE2VarData);                                                 begin p1^.tu16^ := p1^.tu16^ or p2^.tu8^; end;
procedure or_u16_s8(p1, p2: PSE2VarData);                                                 begin p1^.tu16^ := p1^.tu16^ or p2^.ts8^; end;
procedure or_u16_u16(p1, p2: PSE2VarData);                                                begin p1^.tu16^ := p1^.tu16^ or p2^.tu16^; end;
procedure or_u16_s16(p1, p2: PSE2VarData);                                                begin p1^.tu16^ := p1^.tu16^ or p2^.ts16^; end;
procedure or_u16_u32(p1, p2: PSE2VarData);                                                begin p1^.tu16^ := p1^.tu16^ or p2^.tu32^; end;
procedure or_u16_s32(p1, p2: PSE2VarData);                                                begin p1^.tu16^ := p1^.tu16^ or p2^.ts32^; end;
procedure or_u16_s64(p1, p2: PSE2VarData);                                                begin p1^.tu16^ := p1^.tu16^ or p2^.ts64^; end;
procedure or_u16_single(p1, p2: PSE2VarData);                                             begin  end;
procedure or_u16_double(p1, p2: PSE2VarData);                                             begin  end;
procedure or_u16_string(p1, p2: PSE2VarData);                                             begin  end;
procedure or_u16_utf8string(p1, p2: PSE2VarData);                                         begin  end;
procedure or_u16_widestring(p1, p2: PSE2VarData);                                         begin  end;
procedure or_u16_pchar(p1, p2: PSE2VarData);                                              begin  end;
procedure or_u16_pointer(p1, p2: PSE2VarData);                                            begin  end;
procedure or_u16_object(p1, p2: PSE2VarData);                                             begin  end;
procedure or_s16_u8(p1, p2: PSE2VarData);                                                 begin p1^.ts16^ := p1^.ts16^ or p2^.tu8^; end;
procedure or_s16_s8(p1, p2: PSE2VarData);                                                 begin p1^.ts16^ := p1^.ts16^ or p2^.ts8^; end;
procedure or_s16_u16(p1, p2: PSE2VarData);                                                begin p1^.ts16^ := p1^.ts16^ or p2^.tu16^; end;
procedure or_s16_s16(p1, p2: PSE2VarData);                                                begin p1^.ts16^ := p1^.ts16^ or p2^.ts16^; end;
procedure or_s16_u32(p1, p2: PSE2VarData);                                                begin p1^.ts16^ := p1^.ts16^ or p2^.tu32^; end;
procedure or_s16_s32(p1, p2: PSE2VarData);                                                begin p1^.ts16^ := p1^.ts16^ or p2^.ts32^; end;
procedure or_s16_s64(p1, p2: PSE2VarData);                                                begin p1^.ts16^ := p1^.ts16^ or p2^.ts64^; end;
procedure or_s16_single(p1, p2: PSE2VarData);                                             begin  end;
procedure or_s16_double(p1, p2: PSE2VarData);                                             begin  end;
procedure or_s16_string(p1, p2: PSE2VarData);                                             begin  end;
procedure or_s16_utf8string(p1, p2: PSE2VarData);                                         begin  end;
procedure or_s16_widestring(p1, p2: PSE2VarData);                                         begin  end;
procedure or_s16_pchar(p1, p2: PSE2VarData);                                              begin  end;
procedure or_s16_pointer(p1, p2: PSE2VarData);                                            begin  end;
procedure or_s16_object(p1, p2: PSE2VarData);                                             begin  end;
procedure or_u32_u8(p1, p2: PSE2VarData);                                                 begin p1^.tu32^ := p1^.tu32^ or p2^.tu8^; end;
procedure or_u32_s8(p1, p2: PSE2VarData);                                                 begin p1^.tu32^ := p1^.tu32^ or p2^.ts8^; end;
procedure or_u32_u16(p1, p2: PSE2VarData);                                                begin p1^.tu32^ := p1^.tu32^ or p2^.tu16^; end;
procedure or_u32_s16(p1, p2: PSE2VarData);                                                begin p1^.tu32^ := p1^.tu32^ or p2^.ts16^; end;
procedure or_u32_u32(p1, p2: PSE2VarData);                                                begin p1^.tu32^ := p1^.tu32^ or p2^.tu32^; end;
procedure or_u32_s32(p1, p2: PSE2VarData);                                                begin p1^.tu32^ := p1^.tu32^ or p2^.ts32^; end;
procedure or_u32_s64(p1, p2: PSE2VarData);                                                begin p1^.tu32^ := p1^.tu32^ or p2^.ts64^; end;
procedure or_u32_single(p1, p2: PSE2VarData);                                             begin  end;
procedure or_u32_double(p1, p2: PSE2VarData);                                             begin  end;
procedure or_u32_string(p1, p2: PSE2VarData);                                             begin  end;
procedure or_u32_utf8string(p1, p2: PSE2VarData);                                         begin  end;
procedure or_u32_widestring(p1, p2: PSE2VarData);                                         begin  end;
procedure or_u32_pchar(p1, p2: PSE2VarData);                                              begin  end;
procedure or_u32_pointer(p1, p2: PSE2VarData);                                            begin  end;
procedure or_u32_object(p1, p2: PSE2VarData);                                             begin  end;
procedure or_s32_u8(p1, p2: PSE2VarData);                                                 begin p1^.ts32^ := p1^.ts32^ or p2^.tu8^; end;
procedure or_s32_s8(p1, p2: PSE2VarData);                                                 begin p1^.ts32^ := p1^.ts32^ or p2^.ts8^; end;
procedure or_s32_u16(p1, p2: PSE2VarData);                                                begin p1^.ts32^ := p1^.ts32^ or p2^.tu16^; end;
procedure or_s32_s16(p1, p2: PSE2VarData);                                                begin p1^.ts32^ := p1^.ts32^ or p2^.ts16^; end;
procedure or_s32_u32(p1, p2: PSE2VarData);                                                begin p1^.ts32^ := p1^.ts32^ or p2^.tu32^; end;
procedure or_s32_s32(p1, p2: PSE2VarData);                                                begin p1^.ts32^ := p1^.ts32^ or p2^.ts32^; end;
procedure or_s32_s64(p1, p2: PSE2VarData);                                                begin p1^.ts32^ := p1^.ts32^ or p2^.ts64^; end;
procedure or_s32_single(p1, p2: PSE2VarData);                                             begin  end;
procedure or_s32_double(p1, p2: PSE2VarData);                                             begin  end;
procedure or_s32_string(p1, p2: PSE2VarData);                                             begin  end;
procedure or_s32_utf8string(p1, p2: PSE2VarData);                                         begin  end;
procedure or_s32_widestring(p1, p2: PSE2VarData);                                         begin  end;
procedure or_s32_pchar(p1, p2: PSE2VarData);                                              begin  end;
procedure or_s32_pointer(p1, p2: PSE2VarData);                                            begin  end;
procedure or_s32_object(p1, p2: PSE2VarData);                                             begin  end;
procedure or_s64_u8(p1, p2: PSE2VarData);                                                 begin p1^.ts64^ := p1^.ts64^ or p2^.tu8^; end;
procedure or_s64_s8(p1, p2: PSE2VarData);                                                 begin p1^.ts64^ := p1^.ts64^ or p2^.ts8^; end;
procedure or_s64_u16(p1, p2: PSE2VarData);                                                begin p1^.ts64^ := p1^.ts64^ or p2^.tu16^; end;
procedure or_s64_s16(p1, p2: PSE2VarData);                                                begin p1^.ts64^ := p1^.ts64^ or p2^.ts16^; end;
procedure or_s64_u32(p1, p2: PSE2VarData);                                                begin p1^.ts64^ := p1^.ts64^ or p2^.tu32^; end;
procedure or_s64_s32(p1, p2: PSE2VarData);                                                begin p1^.ts64^ := p1^.ts64^ or p2^.ts32^; end;
procedure or_s64_s64(p1, p2: PSE2VarData);                                                begin p1^.ts64^ := p1^.ts64^ or p2^.ts64^; end;
procedure or_s64_single(p1, p2: PSE2VarData);                                             begin  end;
procedure or_s64_double(p1, p2: PSE2VarData);                                             begin  end;
procedure or_s64_string(p1, p2: PSE2VarData);                                             begin  end;
procedure or_s64_utf8string(p1, p2: PSE2VarData);                                         begin  end;
procedure or_s64_widestring(p1, p2: PSE2VarData);                                         begin  end;
procedure or_s64_pchar(p1, p2: PSE2VarData);                                              begin  end;
procedure or_s64_pointer(p1, p2: PSE2VarData);                                            begin  end;
procedure or_s64_object(p1, p2: PSE2VarData);                                             begin  end;
procedure or_single_u8(p1, p2: PSE2VarData);                                              begin  end;
procedure or_single_s8(p1, p2: PSE2VarData);                                              begin  end;
procedure or_single_u16(p1, p2: PSE2VarData);                                             begin  end;
procedure or_single_s16(p1, p2: PSE2VarData);                                             begin  end;
procedure or_single_u32(p1, p2: PSE2VarData);                                             begin  end;
procedure or_single_s32(p1, p2: PSE2VarData);                                             begin  end;
procedure or_single_s64(p1, p2: PSE2VarData);                                             begin  end;
procedure or_single_single(p1, p2: PSE2VarData);                                          begin  end;
procedure or_single_double(p1, p2: PSE2VarData);                                          begin  end;
procedure or_single_string(p1, p2: PSE2VarData);                                          begin  end;
procedure or_single_utf8string(p1, p2: PSE2VarData);                                      begin  end;
procedure or_single_widestring(p1, p2: PSE2VarData);                                      begin  end;
procedure or_single_pchar(p1, p2: PSE2VarData);                                           begin  end;
procedure or_single_pointer(p1, p2: PSE2VarData);                                         begin  end;
procedure or_single_object(p1, p2: PSE2VarData);                                          begin  end;
procedure or_double_u8(p1, p2: PSE2VarData);                                              begin  end;
procedure or_double_s8(p1, p2: PSE2VarData);                                              begin  end;
procedure or_double_u16(p1, p2: PSE2VarData);                                             begin  end;
procedure or_double_s16(p1, p2: PSE2VarData);                                             begin  end;
procedure or_double_u32(p1, p2: PSE2VarData);                                             begin  end;
procedure or_double_s32(p1, p2: PSE2VarData);                                             begin  end;
procedure or_double_s64(p1, p2: PSE2VarData);                                             begin  end;
procedure or_double_single(p1, p2: PSE2VarData);                                          begin  end;
procedure or_double_double(p1, p2: PSE2VarData);                                          begin  end;
procedure or_double_string(p1, p2: PSE2VarData);                                          begin  end;
procedure or_double_utf8string(p1, p2: PSE2VarData);                                      begin  end;
procedure or_double_widestring(p1, p2: PSE2VarData);                                      begin  end;
procedure or_double_pchar(p1, p2: PSE2VarData);                                           begin  end;
procedure or_double_pointer(p1, p2: PSE2VarData);                                         begin  end;
procedure or_double_object(p1, p2: PSE2VarData);                                          begin  end;
procedure or_string_u8(p1, p2: PSE2VarData);                                              begin  end;
procedure or_string_s8(p1, p2: PSE2VarData);                                              begin  end;
procedure or_string_u16(p1, p2: PSE2VarData);                                             begin  end;
procedure or_string_s16(p1, p2: PSE2VarData);                                             begin  end;
procedure or_string_u32(p1, p2: PSE2VarData);                                             begin  end;
procedure or_string_s32(p1, p2: PSE2VarData);                                             begin  end;
procedure or_string_s64(p1, p2: PSE2VarData);                                             begin  end;
procedure or_string_single(p1, p2: PSE2VarData);                                          begin  end;
procedure or_string_double(p1, p2: PSE2VarData);                                          begin  end;
procedure or_string_string(p1, p2: PSE2VarData);                                          begin  end;
procedure or_string_utf8string(p1, p2: PSE2VarData);                                      begin  end;
procedure or_string_widestring(p1, p2: PSE2VarData);                                      begin  end;
procedure or_string_pchar(p1, p2: PSE2VarData);                                           begin  end;
procedure or_string_pointer(p1, p2: PSE2VarData);                                         begin  end;
procedure or_string_object(p1, p2: PSE2VarData);                                          begin  end;
procedure or_utf8string_u8(p1, p2: PSE2VarData);                                          begin  end;
procedure or_utf8string_s8(p1, p2: PSE2VarData);                                          begin  end;
procedure or_utf8string_u16(p1, p2: PSE2VarData);                                         begin  end;
procedure or_utf8string_s16(p1, p2: PSE2VarData);                                         begin  end;
procedure or_utf8string_u32(p1, p2: PSE2VarData);                                         begin  end;
procedure or_utf8string_s32(p1, p2: PSE2VarData);                                         begin  end;
procedure or_utf8string_s64(p1, p2: PSE2VarData);                                         begin  end;
procedure or_utf8string_single(p1, p2: PSE2VarData);                                      begin  end;
procedure or_utf8string_double(p1, p2: PSE2VarData);                                      begin  end;
procedure or_utf8string_string(p1, p2: PSE2VarData);                                      begin  end;
procedure or_utf8string_utf8string(p1, p2: PSE2VarData);                                  begin  end;
procedure or_utf8string_widestring(p1, p2: PSE2VarData);                                  begin  end;
procedure or_utf8string_pchar(p1, p2: PSE2VarData);                                       begin  end;
procedure or_utf8string_pointer(p1, p2: PSE2VarData);                                     begin  end;
procedure or_utf8string_object(p1, p2: PSE2VarData);                                      begin  end;
procedure or_widestring_u8(p1, p2: PSE2VarData);                                          begin  end;
procedure or_widestring_s8(p1, p2: PSE2VarData);                                          begin  end;
procedure or_widestring_u16(p1, p2: PSE2VarData);                                         begin  end;
procedure or_widestring_s16(p1, p2: PSE2VarData);                                         begin  end;
procedure or_widestring_u32(p1, p2: PSE2VarData);                                         begin  end;
procedure or_widestring_s32(p1, p2: PSE2VarData);                                         begin  end;
procedure or_widestring_s64(p1, p2: PSE2VarData);                                         begin  end;
procedure or_widestring_single(p1, p2: PSE2VarData);                                      begin  end;
procedure or_widestring_double(p1, p2: PSE2VarData);                                      begin  end;
procedure or_widestring_string(p1, p2: PSE2VarData);                                      begin  end;
procedure or_widestring_utf8string(p1, p2: PSE2VarData);                                  begin  end;
procedure or_widestring_widestring(p1, p2: PSE2VarData);                                  begin  end;
procedure or_widestring_pchar(p1, p2: PSE2VarData);                                       begin  end;
procedure or_widestring_pointer(p1, p2: PSE2VarData);                                     begin  end;
procedure or_widestring_object(p1, p2: PSE2VarData);                                      begin  end;
procedure or_pchar_u8(p1, p2: PSE2VarData);                                               begin  end;
procedure or_pchar_s8(p1, p2: PSE2VarData);                                               begin  end;
procedure or_pchar_u16(p1, p2: PSE2VarData);                                              begin  end;
procedure or_pchar_s16(p1, p2: PSE2VarData);                                              begin  end;
procedure or_pchar_u32(p1, p2: PSE2VarData);                                              begin  end;
procedure or_pchar_s32(p1, p2: PSE2VarData);                                              begin  end;
procedure or_pchar_s64(p1, p2: PSE2VarData);                                              begin  end;
procedure or_pchar_single(p1, p2: PSE2VarData);                                           begin  end;
procedure or_pchar_double(p1, p2: PSE2VarData);                                           begin  end;
procedure or_pchar_string(p1, p2: PSE2VarData);                                           begin  end;
procedure or_pchar_utf8string(p1, p2: PSE2VarData);                                       begin  end;
procedure or_pchar_widestring(p1, p2: PSE2VarData);                                       begin  end;
procedure or_pchar_pchar(p1, p2: PSE2VarData);                                            begin  end;
procedure or_pchar_pointer(p1, p2: PSE2VarData);                                          begin  end;
procedure or_pchar_object(p1, p2: PSE2VarData);                                           begin  end;
procedure or_pointer_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure or_pointer_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure or_pointer_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure or_pointer_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure or_pointer_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure or_pointer_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure or_pointer_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure or_pointer_single(p1, p2: PSE2VarData);                                         begin  end;
procedure or_pointer_double(p1, p2: PSE2VarData);                                         begin  end;
procedure or_pointer_string(p1, p2: PSE2VarData);                                         begin  end;
procedure or_pointer_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure or_pointer_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure or_pointer_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure or_pointer_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure or_pointer_object(p1, p2: PSE2VarData);                                         begin  end;
procedure or_object_u8(p1, p2: PSE2VarData);                                              begin  end;
procedure or_object_s8(p1, p2: PSE2VarData);                                              begin  end;
procedure or_object_u16(p1, p2: PSE2VarData);                                             begin  end;
procedure or_object_s16(p1, p2: PSE2VarData);                                             begin  end;
procedure or_object_u32(p1, p2: PSE2VarData);                                             begin  end;
procedure or_object_s32(p1, p2: PSE2VarData);                                             begin  end;
procedure or_object_s64(p1, p2: PSE2VarData);                                             begin  end;
procedure or_object_single(p1, p2: PSE2VarData);                                          begin  end;
procedure or_object_double(p1, p2: PSE2VarData);                                          begin  end;
procedure or_object_string(p1, p2: PSE2VarData);                                          begin  end;
procedure or_object_utf8string(p1, p2: PSE2VarData);                                      begin  end;
procedure or_object_widestring(p1, p2: PSE2VarData);                                      begin  end;
procedure or_object_pchar(p1, p2: PSE2VarData);                                           begin  end;
procedure or_object_pointer(p1, p2: PSE2VarData);                                         begin  end;
procedure or_object_object(p1, p2: PSE2VarData);                                          begin  end;
procedure xor_u8_u8(p1, p2: PSE2VarData);                                                 begin p1^.tu8^ := p1^.tu8^ xor p2^.tu8^; end;
procedure xor_u8_s8(p1, p2: PSE2VarData);                                                 begin p1^.tu8^ := p1^.tu8^ xor p2^.ts8^; end;
procedure xor_u8_u16(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ xor p2^.tu16^; end;
procedure xor_u8_s16(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ xor p2^.ts16^; end;
procedure xor_u8_u32(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ xor p2^.tu32^; end;
procedure xor_u8_s32(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ xor p2^.ts32^; end;
procedure xor_u8_s64(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ xor p2^.ts64^; end;
procedure xor_u8_single(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_u8_double(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_u8_string(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_u8_utf8string(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_u8_widestring(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_u8_pchar(p1, p2: PSE2VarData);                                              begin  end;
procedure xor_u8_pointer(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_u8_object(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_s8_u8(p1, p2: PSE2VarData);                                                 begin p1^.ts8^ := p1^.ts8^ xor p2^.tu8^; end;
procedure xor_s8_s8(p1, p2: PSE2VarData);                                                 begin p1^.ts8^ := p1^.ts8^ xor p2^.ts8^; end;
procedure xor_s8_u16(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ xor p2^.tu16^; end;
procedure xor_s8_s16(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ xor p2^.ts16^; end;
procedure xor_s8_u32(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ xor p2^.tu32^; end;
procedure xor_s8_s32(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ xor p2^.ts32^; end;
procedure xor_s8_s64(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ xor p2^.ts64^; end;
procedure xor_s8_single(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_s8_double(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_s8_string(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_s8_utf8string(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_s8_widestring(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_s8_pchar(p1, p2: PSE2VarData);                                              begin  end;
procedure xor_s8_pointer(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_s8_object(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_u16_u8(p1, p2: PSE2VarData);                                                begin p1^.tu16^ := p1^.tu16^ xor p2^.tu8^; end;
procedure xor_u16_s8(p1, p2: PSE2VarData);                                                begin p1^.tu16^ := p1^.tu16^ xor p2^.ts8^; end;
procedure xor_u16_u16(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ xor p2^.tu16^; end;
procedure xor_u16_s16(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ xor p2^.ts16^; end;
procedure xor_u16_u32(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ xor p2^.tu32^; end;
procedure xor_u16_s32(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ xor p2^.ts32^; end;
procedure xor_u16_s64(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ xor p2^.ts64^; end;
procedure xor_u16_single(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_u16_double(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_u16_string(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_u16_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_u16_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_u16_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_u16_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure xor_u16_object(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_s16_u8(p1, p2: PSE2VarData);                                                begin p1^.ts16^ := p1^.ts16^ xor p2^.tu8^; end;
procedure xor_s16_s8(p1, p2: PSE2VarData);                                                begin p1^.ts16^ := p1^.ts16^ xor p2^.ts8^; end;
procedure xor_s16_u16(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ xor p2^.tu16^; end;
procedure xor_s16_s16(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ xor p2^.ts16^; end;
procedure xor_s16_u32(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ xor p2^.tu32^; end;
procedure xor_s16_s32(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ xor p2^.ts32^; end;
procedure xor_s16_s64(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ xor p2^.ts64^; end;
procedure xor_s16_single(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_s16_double(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_s16_string(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_s16_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_s16_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_s16_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_s16_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure xor_s16_object(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_u32_u8(p1, p2: PSE2VarData);                                                begin p1^.tu32^ := p1^.tu32^ xor p2^.tu8^; end;
procedure xor_u32_s8(p1, p2: PSE2VarData);                                                begin p1^.tu32^ := p1^.tu32^ xor p2^.ts8^; end;
procedure xor_u32_u16(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ xor p2^.tu16^; end;
procedure xor_u32_s16(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ xor p2^.ts16^; end;
procedure xor_u32_u32(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ xor p2^.tu32^; end;
procedure xor_u32_s32(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ xor p2^.ts32^; end;
procedure xor_u32_s64(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ xor p2^.ts64^; end;
procedure xor_u32_single(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_u32_double(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_u32_string(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_u32_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_u32_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_u32_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_u32_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure xor_u32_object(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_s32_u8(p1, p2: PSE2VarData);                                                begin p1^.ts32^ := p1^.ts32^ xor p2^.tu8^; end;
procedure xor_s32_s8(p1, p2: PSE2VarData);                                                begin p1^.ts32^ := p1^.ts32^ xor p2^.ts8^; end;
procedure xor_s32_u16(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ xor p2^.tu16^; end;
procedure xor_s32_s16(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ xor p2^.ts16^; end;
procedure xor_s32_u32(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ xor p2^.tu32^; end;
procedure xor_s32_s32(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ xor p2^.ts32^; end;
procedure xor_s32_s64(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ xor p2^.ts64^; end;
procedure xor_s32_single(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_s32_double(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_s32_string(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_s32_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_s32_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_s32_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_s32_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure xor_s32_object(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_s64_u8(p1, p2: PSE2VarData);                                                begin p1^.ts64^ := p1^.ts64^ xor p2^.tu8^; end;
procedure xor_s64_s8(p1, p2: PSE2VarData);                                                begin p1^.ts64^ := p1^.ts64^ xor p2^.ts8^; end;
procedure xor_s64_u16(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ xor p2^.tu16^; end;
procedure xor_s64_s16(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ xor p2^.ts16^; end;
procedure xor_s64_u32(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ xor p2^.tu32^; end;
procedure xor_s64_s32(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ xor p2^.ts32^; end;
procedure xor_s64_s64(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ xor p2^.ts64^; end;
procedure xor_s64_single(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_s64_double(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_s64_string(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_s64_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_s64_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_s64_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_s64_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure xor_s64_object(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_single_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_single_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_single_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_single_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_single_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_single_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_single_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_single_single(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_single_double(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_single_string(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_single_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure xor_single_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure xor_single_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure xor_single_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_single_object(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_double_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_double_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_double_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_double_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_double_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_double_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_double_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_double_single(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_double_double(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_double_string(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_double_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure xor_double_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure xor_double_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure xor_double_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_double_object(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_string_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_string_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_string_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_string_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_string_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_string_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_string_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_string_single(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_string_double(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_string_string(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_string_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure xor_string_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure xor_string_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure xor_string_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_string_object(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_utf8string_u8(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_utf8string_s8(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_utf8string_u16(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_utf8string_s16(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_utf8string_u32(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_utf8string_s32(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_utf8string_s64(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_utf8string_single(p1, p2: PSE2VarData);                                     begin  end;
procedure xor_utf8string_double(p1, p2: PSE2VarData);                                     begin  end;
procedure xor_utf8string_string(p1, p2: PSE2VarData);                                     begin  end;
procedure xor_utf8string_utf8string(p1, p2: PSE2VarData);                                 begin  end;
procedure xor_utf8string_widestring(p1, p2: PSE2VarData);                                 begin  end;
procedure xor_utf8string_pchar(p1, p2: PSE2VarData);                                      begin  end;
procedure xor_utf8string_pointer(p1, p2: PSE2VarData);                                    begin  end;
procedure xor_utf8string_object(p1, p2: PSE2VarData);                                     begin  end;
procedure xor_widestring_u8(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_widestring_s8(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_widestring_u16(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_widestring_s16(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_widestring_u32(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_widestring_s32(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_widestring_s64(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_widestring_single(p1, p2: PSE2VarData);                                     begin  end;
procedure xor_widestring_double(p1, p2: PSE2VarData);                                     begin  end;
procedure xor_widestring_string(p1, p2: PSE2VarData);                                     begin  end;
procedure xor_widestring_utf8string(p1, p2: PSE2VarData);                                 begin  end;
procedure xor_widestring_widestring(p1, p2: PSE2VarData);                                 begin  end;
procedure xor_widestring_pchar(p1, p2: PSE2VarData);                                      begin  end;
procedure xor_widestring_pointer(p1, p2: PSE2VarData);                                    begin  end;
procedure xor_widestring_object(p1, p2: PSE2VarData);                                     begin  end;
procedure xor_pchar_u8(p1, p2: PSE2VarData);                                              begin  end;
procedure xor_pchar_s8(p1, p2: PSE2VarData);                                              begin  end;
procedure xor_pchar_u16(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_pchar_s16(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_pchar_u32(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_pchar_s32(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_pchar_s64(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_pchar_single(p1, p2: PSE2VarData);                                          begin  end;
procedure xor_pchar_double(p1, p2: PSE2VarData);                                          begin  end;
procedure xor_pchar_string(p1, p2: PSE2VarData);                                          begin  end;
procedure xor_pchar_utf8string(p1, p2: PSE2VarData);                                      begin  end;
procedure xor_pchar_widestring(p1, p2: PSE2VarData);                                      begin  end;
procedure xor_pchar_pchar(p1, p2: PSE2VarData);                                           begin  end;
procedure xor_pchar_pointer(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_pchar_object(p1, p2: PSE2VarData);                                          begin  end;
procedure xor_pointer_u8(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_pointer_s8(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_pointer_u16(p1, p2: PSE2VarData);                                           begin  end;
procedure xor_pointer_s16(p1, p2: PSE2VarData);                                           begin  end;
procedure xor_pointer_u32(p1, p2: PSE2VarData);                                           begin  end;
procedure xor_pointer_s32(p1, p2: PSE2VarData);                                           begin  end;
procedure xor_pointer_s64(p1, p2: PSE2VarData);                                           begin  end;
procedure xor_pointer_single(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_pointer_double(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_pointer_string(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_pointer_utf8string(p1, p2: PSE2VarData);                                    begin  end;
procedure xor_pointer_widestring(p1, p2: PSE2VarData);                                    begin  end;
procedure xor_pointer_pchar(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_pointer_pointer(p1, p2: PSE2VarData);                                       begin  end;
procedure xor_pointer_object(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_object_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_object_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure xor_object_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_object_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_object_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_object_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_object_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure xor_object_single(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_object_double(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_object_string(p1, p2: PSE2VarData);                                         begin  end;
procedure xor_object_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure xor_object_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure xor_object_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure xor_object_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure xor_object_object(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_u8_u8(p1, p2: PSE2VarData);                                                 begin p1^.tu8^ := p1^.tu8^ shr p2^.tu8^; end;
procedure shr_u8_s8(p1, p2: PSE2VarData);                                                 begin p1^.tu8^ := p1^.tu8^ shr p2^.ts8^; end;
procedure shr_u8_u16(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ shr p2^.tu16^; end;
procedure shr_u8_s16(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ shr p2^.ts16^; end;
procedure shr_u8_u32(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ shr p2^.tu32^; end;
procedure shr_u8_s32(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ shr p2^.ts32^; end;
procedure shr_u8_s64(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ shr p2^.ts64^; end;
procedure shr_u8_single(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_u8_double(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_u8_string(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_u8_utf8string(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_u8_widestring(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_u8_pchar(p1, p2: PSE2VarData);                                              begin  end;
procedure shr_u8_pointer(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_u8_object(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_s8_u8(p1, p2: PSE2VarData);                                                 begin p1^.ts8^ := p1^.ts8^ shr p2^.tu8^; end;
procedure shr_s8_s8(p1, p2: PSE2VarData);                                                 begin p1^.ts8^ := p1^.ts8^ shr p2^.ts8^; end;
procedure shr_s8_u16(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ shr p2^.tu16^; end;
procedure shr_s8_s16(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ shr p2^.ts16^; end;
procedure shr_s8_u32(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ shr p2^.tu32^; end;
procedure shr_s8_s32(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ shr p2^.ts32^; end;
procedure shr_s8_s64(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ shr p2^.ts64^; end;
procedure shr_s8_single(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_s8_double(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_s8_string(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_s8_utf8string(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_s8_widestring(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_s8_pchar(p1, p2: PSE2VarData);                                              begin  end;
procedure shr_s8_pointer(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_s8_object(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_u16_u8(p1, p2: PSE2VarData);                                                begin p1^.tu16^ := p1^.tu16^ shr p2^.tu8^; end;
procedure shr_u16_s8(p1, p2: PSE2VarData);                                                begin p1^.tu16^ := p1^.tu16^ shr p2^.ts8^; end;
procedure shr_u16_u16(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ shr p2^.tu16^; end;
procedure shr_u16_s16(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ shr p2^.ts16^; end;
procedure shr_u16_u32(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ shr p2^.tu32^; end;
procedure shr_u16_s32(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ shr p2^.ts32^; end;
procedure shr_u16_s64(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ shr p2^.ts64^; end;
procedure shr_u16_single(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_u16_double(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_u16_string(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_u16_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_u16_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_u16_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_u16_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure shr_u16_object(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_s16_u8(p1, p2: PSE2VarData);                                                begin p1^.ts16^ := p1^.ts16^ shr p2^.tu8^; end;
procedure shr_s16_s8(p1, p2: PSE2VarData);                                                begin p1^.ts16^ := p1^.ts16^ shr p2^.ts8^; end;
procedure shr_s16_u16(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ shr p2^.tu16^; end;
procedure shr_s16_s16(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ shr p2^.ts16^; end;
procedure shr_s16_u32(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ shr p2^.tu32^; end;
procedure shr_s16_s32(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ shr p2^.ts32^; end;
procedure shr_s16_s64(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ shr p2^.ts64^; end;
procedure shr_s16_single(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_s16_double(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_s16_string(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_s16_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_s16_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_s16_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_s16_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure shr_s16_object(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_u32_u8(p1, p2: PSE2VarData);                                                begin p1^.tu32^ := p1^.tu32^ shr p2^.tu8^; end;
procedure shr_u32_s8(p1, p2: PSE2VarData);                                                begin p1^.tu32^ := p1^.tu32^ shr p2^.ts8^; end;
procedure shr_u32_u16(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ shr p2^.tu16^; end;
procedure shr_u32_s16(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ shr p2^.ts16^; end;
procedure shr_u32_u32(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ shr p2^.tu32^; end;
procedure shr_u32_s32(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ shr p2^.ts32^; end;
procedure shr_u32_s64(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ shr p2^.ts64^; end;
procedure shr_u32_single(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_u32_double(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_u32_string(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_u32_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_u32_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_u32_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_u32_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure shr_u32_object(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_s32_u8(p1, p2: PSE2VarData);                                                begin p1^.ts32^ := p1^.ts32^ shr p2^.tu8^; end;
procedure shr_s32_s8(p1, p2: PSE2VarData);                                                begin p1^.ts32^ := p1^.ts32^ shr p2^.ts8^; end;
procedure shr_s32_u16(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ shr p2^.tu16^; end;
procedure shr_s32_s16(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ shr p2^.ts16^; end;
procedure shr_s32_u32(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ shr p2^.tu32^; end;
procedure shr_s32_s32(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ shr p2^.ts32^; end;
procedure shr_s32_s64(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ shr p2^.ts64^; end;
procedure shr_s32_single(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_s32_double(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_s32_string(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_s32_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_s32_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_s32_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_s32_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure shr_s32_object(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_s64_u8(p1, p2: PSE2VarData);                                                begin p1^.ts64^ := p1^.ts64^ shr p2^.tu8^; end;
procedure shr_s64_s8(p1, p2: PSE2VarData);                                                begin p1^.ts64^ := p1^.ts64^ shr p2^.ts8^; end;
procedure shr_s64_u16(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ shr p2^.tu16^; end;
procedure shr_s64_s16(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ shr p2^.ts16^; end;
procedure shr_s64_u32(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ shr p2^.tu32^; end;
procedure shr_s64_s32(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ shr p2^.ts32^; end;
procedure shr_s64_s64(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ shr p2^.ts64^; end;
procedure shr_s64_single(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_s64_double(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_s64_string(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_s64_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_s64_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_s64_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_s64_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure shr_s64_object(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_single_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_single_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_single_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_single_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_single_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_single_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_single_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_single_single(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_single_double(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_single_string(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_single_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure shr_single_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure shr_single_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure shr_single_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_single_object(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_double_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_double_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_double_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_double_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_double_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_double_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_double_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_double_single(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_double_double(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_double_string(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_double_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure shr_double_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure shr_double_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure shr_double_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_double_object(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_string_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_string_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_string_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_string_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_string_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_string_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_string_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_string_single(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_string_double(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_string_string(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_string_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure shr_string_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure shr_string_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure shr_string_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_string_object(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_utf8string_u8(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_utf8string_s8(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_utf8string_u16(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_utf8string_s16(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_utf8string_u32(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_utf8string_s32(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_utf8string_s64(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_utf8string_single(p1, p2: PSE2VarData);                                     begin  end;
procedure shr_utf8string_double(p1, p2: PSE2VarData);                                     begin  end;
procedure shr_utf8string_string(p1, p2: PSE2VarData);                                     begin  end;
procedure shr_utf8string_utf8string(p1, p2: PSE2VarData);                                 begin  end;
procedure shr_utf8string_widestring(p1, p2: PSE2VarData);                                 begin  end;
procedure shr_utf8string_pchar(p1, p2: PSE2VarData);                                      begin  end;
procedure shr_utf8string_pointer(p1, p2: PSE2VarData);                                    begin  end;
procedure shr_utf8string_object(p1, p2: PSE2VarData);                                     begin  end;
procedure shr_widestring_u8(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_widestring_s8(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_widestring_u16(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_widestring_s16(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_widestring_u32(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_widestring_s32(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_widestring_s64(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_widestring_single(p1, p2: PSE2VarData);                                     begin  end;
procedure shr_widestring_double(p1, p2: PSE2VarData);                                     begin  end;
procedure shr_widestring_string(p1, p2: PSE2VarData);                                     begin  end;
procedure shr_widestring_utf8string(p1, p2: PSE2VarData);                                 begin  end;
procedure shr_widestring_widestring(p1, p2: PSE2VarData);                                 begin  end;
procedure shr_widestring_pchar(p1, p2: PSE2VarData);                                      begin  end;
procedure shr_widestring_pointer(p1, p2: PSE2VarData);                                    begin  end;
procedure shr_widestring_object(p1, p2: PSE2VarData);                                     begin  end;
procedure shr_pchar_u8(p1, p2: PSE2VarData);                                              begin  end;
procedure shr_pchar_s8(p1, p2: PSE2VarData);                                              begin  end;
procedure shr_pchar_u16(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_pchar_s16(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_pchar_u32(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_pchar_s32(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_pchar_s64(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_pchar_single(p1, p2: PSE2VarData);                                          begin  end;
procedure shr_pchar_double(p1, p2: PSE2VarData);                                          begin  end;
procedure shr_pchar_string(p1, p2: PSE2VarData);                                          begin  end;
procedure shr_pchar_utf8string(p1, p2: PSE2VarData);                                      begin  end;
procedure shr_pchar_widestring(p1, p2: PSE2VarData);                                      begin  end;
procedure shr_pchar_pchar(p1, p2: PSE2VarData);                                           begin  end;
procedure shr_pchar_pointer(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_pchar_object(p1, p2: PSE2VarData);                                          begin  end;
procedure shr_pointer_u8(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_pointer_s8(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_pointer_u16(p1, p2: PSE2VarData);                                           begin  end;
procedure shr_pointer_s16(p1, p2: PSE2VarData);                                           begin  end;
procedure shr_pointer_u32(p1, p2: PSE2VarData);                                           begin  end;
procedure shr_pointer_s32(p1, p2: PSE2VarData);                                           begin  end;
procedure shr_pointer_s64(p1, p2: PSE2VarData);                                           begin  end;
procedure shr_pointer_single(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_pointer_double(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_pointer_string(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_pointer_utf8string(p1, p2: PSE2VarData);                                    begin  end;
procedure shr_pointer_widestring(p1, p2: PSE2VarData);                                    begin  end;
procedure shr_pointer_pchar(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_pointer_pointer(p1, p2: PSE2VarData);                                       begin  end;
procedure shr_pointer_object(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_object_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_object_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure shr_object_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_object_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_object_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_object_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_object_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure shr_object_single(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_object_double(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_object_string(p1, p2: PSE2VarData);                                         begin  end;
procedure shr_object_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure shr_object_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure shr_object_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure shr_object_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure shr_object_object(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_u8_u8(p1, p2: PSE2VarData);                                                 begin p1^.tu8^ := p1^.tu8^ shl p2^.tu8^; end;
procedure shl_u8_s8(p1, p2: PSE2VarData);                                                 begin p1^.tu8^ := p1^.tu8^ shl p2^.ts8^; end;
procedure shl_u8_u16(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ shl p2^.tu16^; end;
procedure shl_u8_s16(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ shl p2^.ts16^; end;
procedure shl_u8_u32(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ shl p2^.tu32^; end;
procedure shl_u8_s32(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ shl p2^.ts32^; end;
procedure shl_u8_s64(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ shl p2^.ts64^; end;
procedure shl_u8_single(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_u8_double(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_u8_string(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_u8_utf8string(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_u8_widestring(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_u8_pchar(p1, p2: PSE2VarData);                                              begin  end;
procedure shl_u8_pointer(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_u8_object(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_s8_u8(p1, p2: PSE2VarData);                                                 begin p1^.ts8^ := p1^.ts8^ shl p2^.tu8^; end;
procedure shl_s8_s8(p1, p2: PSE2VarData);                                                 begin p1^.ts8^ := p1^.ts8^ shl p2^.ts8^; end;
procedure shl_s8_u16(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ shl p2^.tu16^; end;
procedure shl_s8_s16(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ shl p2^.ts16^; end;
procedure shl_s8_u32(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ shl p2^.tu32^; end;
procedure shl_s8_s32(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ shl p2^.ts32^; end;
procedure shl_s8_s64(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ shl p2^.ts64^; end;
procedure shl_s8_single(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_s8_double(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_s8_string(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_s8_utf8string(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_s8_widestring(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_s8_pchar(p1, p2: PSE2VarData);                                              begin  end;
procedure shl_s8_pointer(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_s8_object(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_u16_u8(p1, p2: PSE2VarData);                                                begin p1^.tu16^ := p1^.tu16^ shl p2^.tu8^; end;
procedure shl_u16_s8(p1, p2: PSE2VarData);                                                begin p1^.tu16^ := p1^.tu16^ shl p2^.ts8^; end;
procedure shl_u16_u16(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ shl p2^.tu16^; end;
procedure shl_u16_s16(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ shl p2^.ts16^; end;
procedure shl_u16_u32(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ shl p2^.tu32^; end;
procedure shl_u16_s32(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ shl p2^.ts32^; end;
procedure shl_u16_s64(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ shl p2^.ts64^; end;
procedure shl_u16_single(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_u16_double(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_u16_string(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_u16_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_u16_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_u16_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_u16_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure shl_u16_object(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_s16_u8(p1, p2: PSE2VarData);                                                begin p1^.ts16^ := p1^.ts16^ shl p2^.tu8^; end;
procedure shl_s16_s8(p1, p2: PSE2VarData);                                                begin p1^.ts16^ := p1^.ts16^ shl p2^.ts8^; end;
procedure shl_s16_u16(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ shl p2^.tu16^; end;
procedure shl_s16_s16(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ shl p2^.ts16^; end;
procedure shl_s16_u32(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ shl p2^.tu32^; end;
procedure shl_s16_s32(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ shl p2^.ts32^; end;
procedure shl_s16_s64(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ shl p2^.ts64^; end;
procedure shl_s16_single(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_s16_double(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_s16_string(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_s16_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_s16_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_s16_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_s16_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure shl_s16_object(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_u32_u8(p1, p2: PSE2VarData);                                                begin p1^.tu32^ := p1^.tu32^ shl p2^.tu8^; end;
procedure shl_u32_s8(p1, p2: PSE2VarData);                                                begin p1^.tu32^ := p1^.tu32^ shl p2^.ts8^; end;
procedure shl_u32_u16(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ shl p2^.tu16^; end;
procedure shl_u32_s16(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ shl p2^.ts16^; end;
procedure shl_u32_u32(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ shl p2^.tu32^; end;
procedure shl_u32_s32(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ shl p2^.ts32^; end;
procedure shl_u32_s64(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ shl p2^.ts64^; end;
procedure shl_u32_single(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_u32_double(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_u32_string(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_u32_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_u32_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_u32_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_u32_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure shl_u32_object(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_s32_u8(p1, p2: PSE2VarData);                                                begin p1^.ts32^ := p1^.ts32^ shl p2^.tu8^; end;
procedure shl_s32_s8(p1, p2: PSE2VarData);                                                begin p1^.ts32^ := p1^.ts32^ shl p2^.ts8^; end;
procedure shl_s32_u16(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ shl p2^.tu16^; end;
procedure shl_s32_s16(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ shl p2^.ts16^; end;
procedure shl_s32_u32(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ shl p2^.tu32^; end;
procedure shl_s32_s32(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ shl p2^.ts32^; end;
procedure shl_s32_s64(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ shl p2^.ts64^; end;
procedure shl_s32_single(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_s32_double(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_s32_string(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_s32_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_s32_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_s32_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_s32_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure shl_s32_object(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_s64_u8(p1, p2: PSE2VarData);                                                begin p1^.ts64^ := p1^.ts64^ shl p2^.tu8^; end;
procedure shl_s64_s8(p1, p2: PSE2VarData);                                                begin p1^.ts64^ := p1^.ts64^ shl p2^.ts8^; end;
procedure shl_s64_u16(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ shl p2^.tu16^; end;
procedure shl_s64_s16(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ shl p2^.ts16^; end;
procedure shl_s64_u32(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ shl p2^.tu32^; end;
procedure shl_s64_s32(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ shl p2^.ts32^; end;
procedure shl_s64_s64(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ shl p2^.ts64^; end;
procedure shl_s64_single(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_s64_double(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_s64_string(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_s64_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_s64_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_s64_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_s64_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure shl_s64_object(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_single_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_single_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_single_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_single_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_single_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_single_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_single_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_single_single(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_single_double(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_single_string(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_single_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure shl_single_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure shl_single_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure shl_single_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_single_object(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_double_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_double_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_double_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_double_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_double_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_double_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_double_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_double_single(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_double_double(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_double_string(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_double_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure shl_double_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure shl_double_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure shl_double_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_double_object(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_string_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_string_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_string_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_string_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_string_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_string_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_string_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_string_single(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_string_double(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_string_string(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_string_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure shl_string_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure shl_string_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure shl_string_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_string_object(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_utf8string_u8(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_utf8string_s8(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_utf8string_u16(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_utf8string_s16(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_utf8string_u32(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_utf8string_s32(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_utf8string_s64(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_utf8string_single(p1, p2: PSE2VarData);                                     begin  end;
procedure shl_utf8string_double(p1, p2: PSE2VarData);                                     begin  end;
procedure shl_utf8string_string(p1, p2: PSE2VarData);                                     begin  end;
procedure shl_utf8string_utf8string(p1, p2: PSE2VarData);                                 begin  end;
procedure shl_utf8string_widestring(p1, p2: PSE2VarData);                                 begin  end;
procedure shl_utf8string_pchar(p1, p2: PSE2VarData);                                      begin  end;
procedure shl_utf8string_pointer(p1, p2: PSE2VarData);                                    begin  end;
procedure shl_utf8string_object(p1, p2: PSE2VarData);                                     begin  end;
procedure shl_widestring_u8(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_widestring_s8(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_widestring_u16(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_widestring_s16(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_widestring_u32(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_widestring_s32(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_widestring_s64(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_widestring_single(p1, p2: PSE2VarData);                                     begin  end;
procedure shl_widestring_double(p1, p2: PSE2VarData);                                     begin  end;
procedure shl_widestring_string(p1, p2: PSE2VarData);                                     begin  end;
procedure shl_widestring_utf8string(p1, p2: PSE2VarData);                                 begin  end;
procedure shl_widestring_widestring(p1, p2: PSE2VarData);                                 begin  end;
procedure shl_widestring_pchar(p1, p2: PSE2VarData);                                      begin  end;
procedure shl_widestring_pointer(p1, p2: PSE2VarData);                                    begin  end;
procedure shl_widestring_object(p1, p2: PSE2VarData);                                     begin  end;
procedure shl_pchar_u8(p1, p2: PSE2VarData);                                              begin  end;
procedure shl_pchar_s8(p1, p2: PSE2VarData);                                              begin  end;
procedure shl_pchar_u16(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_pchar_s16(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_pchar_u32(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_pchar_s32(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_pchar_s64(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_pchar_single(p1, p2: PSE2VarData);                                          begin  end;
procedure shl_pchar_double(p1, p2: PSE2VarData);                                          begin  end;
procedure shl_pchar_string(p1, p2: PSE2VarData);                                          begin  end;
procedure shl_pchar_utf8string(p1, p2: PSE2VarData);                                      begin  end;
procedure shl_pchar_widestring(p1, p2: PSE2VarData);                                      begin  end;
procedure shl_pchar_pchar(p1, p2: PSE2VarData);                                           begin  end;
procedure shl_pchar_pointer(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_pchar_object(p1, p2: PSE2VarData);                                          begin  end;
procedure shl_pointer_u8(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_pointer_s8(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_pointer_u16(p1, p2: PSE2VarData);                                           begin  end;
procedure shl_pointer_s16(p1, p2: PSE2VarData);                                           begin  end;
procedure shl_pointer_u32(p1, p2: PSE2VarData);                                           begin  end;
procedure shl_pointer_s32(p1, p2: PSE2VarData);                                           begin  end;
procedure shl_pointer_s64(p1, p2: PSE2VarData);                                           begin  end;
procedure shl_pointer_single(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_pointer_double(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_pointer_string(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_pointer_utf8string(p1, p2: PSE2VarData);                                    begin  end;
procedure shl_pointer_widestring(p1, p2: PSE2VarData);                                    begin  end;
procedure shl_pointer_pchar(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_pointer_pointer(p1, p2: PSE2VarData);                                       begin  end;
procedure shl_pointer_object(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_object_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_object_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure shl_object_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_object_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_object_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_object_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_object_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure shl_object_single(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_object_double(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_object_string(p1, p2: PSE2VarData);                                         begin  end;
procedure shl_object_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure shl_object_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure shl_object_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure shl_object_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure shl_object_object(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_u8_u8(p1, p2: PSE2VarData);                                                 begin p1^.tu8^ := p1^.tu8^ mod p2^.tu8^; end;
procedure mod_u8_s8(p1, p2: PSE2VarData);                                                 begin p1^.tu8^ := p1^.tu8^ mod p2^.ts8^; end;
procedure mod_u8_u16(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ mod p2^.tu16^; end;
procedure mod_u8_s16(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ mod p2^.ts16^; end;
procedure mod_u8_u32(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ mod p2^.tu32^; end;
procedure mod_u8_s32(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ mod p2^.ts32^; end;
procedure mod_u8_s64(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ mod p2^.ts64^; end;
procedure mod_u8_single(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_u8_double(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_u8_string(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_u8_utf8string(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_u8_widestring(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_u8_pchar(p1, p2: PSE2VarData);                                              begin  end;
procedure mod_u8_pointer(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_u8_object(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_s8_u8(p1, p2: PSE2VarData);                                                 begin p1^.ts8^ := p1^.ts8^ mod p2^.tu8^; end;
procedure mod_s8_s8(p1, p2: PSE2VarData);                                                 begin p1^.ts8^ := p1^.ts8^ mod p2^.ts8^; end;
procedure mod_s8_u16(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ mod p2^.tu16^; end;
procedure mod_s8_s16(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ mod p2^.ts16^; end;
procedure mod_s8_u32(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ mod p2^.tu32^; end;
procedure mod_s8_s32(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ mod p2^.ts32^; end;
procedure mod_s8_s64(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ mod p2^.ts64^; end;
procedure mod_s8_single(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_s8_double(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_s8_string(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_s8_utf8string(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_s8_widestring(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_s8_pchar(p1, p2: PSE2VarData);                                              begin  end;
procedure mod_s8_pointer(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_s8_object(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_u16_u8(p1, p2: PSE2VarData);                                                begin p1^.tu16^ := p1^.tu16^ mod p2^.tu8^; end;
procedure mod_u16_s8(p1, p2: PSE2VarData);                                                begin p1^.tu16^ := p1^.tu16^ mod p2^.ts8^; end;
procedure mod_u16_u16(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ mod p2^.tu16^; end;
procedure mod_u16_s16(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ mod p2^.ts16^; end;
procedure mod_u16_u32(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ mod p2^.tu32^; end;
procedure mod_u16_s32(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ mod p2^.ts32^; end;
procedure mod_u16_s64(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ mod p2^.ts64^; end;
procedure mod_u16_single(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_u16_double(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_u16_string(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_u16_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_u16_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_u16_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_u16_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure mod_u16_object(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_s16_u8(p1, p2: PSE2VarData);                                                begin p1^.ts16^ := p1^.ts16^ mod p2^.tu8^; end;
procedure mod_s16_s8(p1, p2: PSE2VarData);                                                begin p1^.ts16^ := p1^.ts16^ mod p2^.ts8^; end;
procedure mod_s16_u16(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ mod p2^.tu16^; end;
procedure mod_s16_s16(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ mod p2^.ts16^; end;
procedure mod_s16_u32(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ mod p2^.tu32^; end;
procedure mod_s16_s32(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ mod p2^.ts32^; end;
procedure mod_s16_s64(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ mod p2^.ts64^; end;
procedure mod_s16_single(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_s16_double(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_s16_string(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_s16_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_s16_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_s16_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_s16_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure mod_s16_object(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_u32_u8(p1, p2: PSE2VarData);                                                begin p1^.tu32^ := p1^.tu32^ mod p2^.tu8^; end;
procedure mod_u32_s8(p1, p2: PSE2VarData);                                                begin p1^.tu32^ := p1^.tu32^ mod p2^.ts8^; end;
procedure mod_u32_u16(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ mod p2^.tu16^; end;
procedure mod_u32_s16(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ mod p2^.ts16^; end;
procedure mod_u32_u32(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ mod p2^.tu32^; end;
procedure mod_u32_s32(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ mod p2^.ts32^; end;
procedure mod_u32_s64(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ mod p2^.ts64^; end;
procedure mod_u32_single(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_u32_double(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_u32_string(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_u32_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_u32_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_u32_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_u32_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure mod_u32_object(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_s32_u8(p1, p2: PSE2VarData);                                                begin p1^.ts32^ := p1^.ts32^ mod p2^.tu8^; end;
procedure mod_s32_s8(p1, p2: PSE2VarData);                                                begin p1^.ts32^ := p1^.ts32^ mod p2^.ts8^; end;
procedure mod_s32_u16(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ mod p2^.tu16^; end;
procedure mod_s32_s16(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ mod p2^.ts16^; end;
procedure mod_s32_u32(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ mod p2^.tu32^; end;
procedure mod_s32_s32(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ mod p2^.ts32^; end;
procedure mod_s32_s64(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ mod p2^.ts64^; end;
procedure mod_s32_single(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_s32_double(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_s32_string(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_s32_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_s32_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_s32_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_s32_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure mod_s32_object(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_s64_u8(p1, p2: PSE2VarData);                                                begin p1^.ts64^ := p1^.ts64^ mod p2^.tu8^; end;
procedure mod_s64_s8(p1, p2: PSE2VarData);                                                begin p1^.ts64^ := p1^.ts64^ mod p2^.ts8^; end;
procedure mod_s64_u16(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ mod p2^.tu16^; end;
procedure mod_s64_s16(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ mod p2^.ts16^; end;
procedure mod_s64_u32(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ mod p2^.tu32^; end;
procedure mod_s64_s32(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ mod p2^.ts32^; end;
procedure mod_s64_s64(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ mod p2^.ts64^; end;
procedure mod_s64_single(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_s64_double(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_s64_string(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_s64_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_s64_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_s64_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_s64_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure mod_s64_object(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_single_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_single_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_single_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_single_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_single_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_single_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_single_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_single_single(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_single_double(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_single_string(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_single_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure mod_single_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure mod_single_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure mod_single_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_single_object(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_double_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_double_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_double_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_double_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_double_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_double_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_double_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_double_single(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_double_double(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_double_string(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_double_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure mod_double_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure mod_double_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure mod_double_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_double_object(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_string_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_string_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_string_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_string_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_string_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_string_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_string_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_string_single(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_string_double(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_string_string(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_string_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure mod_string_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure mod_string_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure mod_string_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_string_object(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_utf8string_u8(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_utf8string_s8(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_utf8string_u16(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_utf8string_s16(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_utf8string_u32(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_utf8string_s32(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_utf8string_s64(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_utf8string_single(p1, p2: PSE2VarData);                                     begin  end;
procedure mod_utf8string_double(p1, p2: PSE2VarData);                                     begin  end;
procedure mod_utf8string_string(p1, p2: PSE2VarData);                                     begin  end;
procedure mod_utf8string_utf8string(p1, p2: PSE2VarData);                                 begin  end;
procedure mod_utf8string_widestring(p1, p2: PSE2VarData);                                 begin  end;
procedure mod_utf8string_pchar(p1, p2: PSE2VarData);                                      begin  end;
procedure mod_utf8string_pointer(p1, p2: PSE2VarData);                                    begin  end;
procedure mod_utf8string_object(p1, p2: PSE2VarData);                                     begin  end;
procedure mod_widestring_u8(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_widestring_s8(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_widestring_u16(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_widestring_s16(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_widestring_u32(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_widestring_s32(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_widestring_s64(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_widestring_single(p1, p2: PSE2VarData);                                     begin  end;
procedure mod_widestring_double(p1, p2: PSE2VarData);                                     begin  end;
procedure mod_widestring_string(p1, p2: PSE2VarData);                                     begin  end;
procedure mod_widestring_utf8string(p1, p2: PSE2VarData);                                 begin  end;
procedure mod_widestring_widestring(p1, p2: PSE2VarData);                                 begin  end;
procedure mod_widestring_pchar(p1, p2: PSE2VarData);                                      begin  end;
procedure mod_widestring_pointer(p1, p2: PSE2VarData);                                    begin  end;
procedure mod_widestring_object(p1, p2: PSE2VarData);                                     begin  end;
procedure mod_pchar_u8(p1, p2: PSE2VarData);                                              begin  end;
procedure mod_pchar_s8(p1, p2: PSE2VarData);                                              begin  end;
procedure mod_pchar_u16(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_pchar_s16(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_pchar_u32(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_pchar_s32(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_pchar_s64(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_pchar_single(p1, p2: PSE2VarData);                                          begin  end;
procedure mod_pchar_double(p1, p2: PSE2VarData);                                          begin  end;
procedure mod_pchar_string(p1, p2: PSE2VarData);                                          begin  end;
procedure mod_pchar_utf8string(p1, p2: PSE2VarData);                                      begin  end;
procedure mod_pchar_widestring(p1, p2: PSE2VarData);                                      begin  end;
procedure mod_pchar_pchar(p1, p2: PSE2VarData);                                           begin  end;
procedure mod_pchar_pointer(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_pchar_object(p1, p2: PSE2VarData);                                          begin  end;
procedure mod_pointer_u8(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_pointer_s8(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_pointer_u16(p1, p2: PSE2VarData);                                           begin  end;
procedure mod_pointer_s16(p1, p2: PSE2VarData);                                           begin  end;
procedure mod_pointer_u32(p1, p2: PSE2VarData);                                           begin  end;
procedure mod_pointer_s32(p1, p2: PSE2VarData);                                           begin  end;
procedure mod_pointer_s64(p1, p2: PSE2VarData);                                           begin  end;
procedure mod_pointer_single(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_pointer_double(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_pointer_string(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_pointer_utf8string(p1, p2: PSE2VarData);                                    begin  end;
procedure mod_pointer_widestring(p1, p2: PSE2VarData);                                    begin  end;
procedure mod_pointer_pchar(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_pointer_pointer(p1, p2: PSE2VarData);                                       begin  end;
procedure mod_pointer_object(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_object_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_object_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure mod_object_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_object_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_object_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_object_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_object_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure mod_object_single(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_object_double(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_object_string(p1, p2: PSE2VarData);                                         begin  end;
procedure mod_object_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure mod_object_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure mod_object_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure mod_object_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure mod_object_object(p1, p2: PSE2VarData);                                         begin  end;
                                {
procedure not_u8_u8(p1, p2: PSE2VarData);                                                 begin p1^.tu8^ := not p2^.tu8^; end;
procedure not_u8_s8(p1, p2: PSE2VarData);                                                 begin p1^.tu8^ := p1^.tu8^ not p2^.ts8^; end;
procedure not_u8_u16(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ not p2^.tu16^; end;
procedure not_u8_s16(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ not p2^.ts16^; end;
procedure not_u8_u32(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ not p2^.tu32^; end;
procedure not_u8_s32(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ not p2^.ts32^; end;
procedure not_u8_s64(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ not p2^.ts64^; end;
procedure not_u8_single(p1, p2: PSE2VarData);                                             begin  end;
procedure not_u8_double(p1, p2: PSE2VarData);                                             begin  end;
procedure not_u8_string(p1, p2: PSE2VarData);                                             begin  end;
procedure not_u8_utf8string(p1, p2: PSE2VarData);                                         begin  end;
procedure not_u8_widestring(p1, p2: PSE2VarData);                                         begin  end;
procedure not_u8_pchar(p1, p2: PSE2VarData);                                              begin  end;
procedure not_u8_pointer(p1, p2: PSE2VarData);                                            begin  end;
procedure not_u8_object(p1, p2: PSE2VarData);                                             begin  end;
procedure not_s8_u8(p1, p2: PSE2VarData);                                                 begin p1^.ts8^ := p1^.ts8^ not p2^.tu8^; end;
procedure not_s8_s8(p1, p2: PSE2VarData);                                                 begin p1^.ts8^ := p1^.ts8^ not p2^.ts8^; end;
procedure not_s8_u16(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ not p2^.tu16^; end;
procedure not_s8_s16(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ not p2^.ts16^; end;
procedure not_s8_u32(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ not p2^.tu32^; end;
procedure not_s8_s32(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ not p2^.ts32^; end;
procedure not_s8_s64(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ not p2^.ts64^; end;
procedure not_s8_single(p1, p2: PSE2VarData);                                             begin  end;
procedure not_s8_double(p1, p2: PSE2VarData);                                             begin  end;
procedure not_s8_string(p1, p2: PSE2VarData);                                             begin  end;
procedure not_s8_utf8string(p1, p2: PSE2VarData);                                         begin  end;
procedure not_s8_widestring(p1, p2: PSE2VarData);                                         begin  end;
procedure not_s8_pchar(p1, p2: PSE2VarData);                                              begin  end;
procedure not_s8_pointer(p1, p2: PSE2VarData);                                            begin  end;
procedure not_s8_object(p1, p2: PSE2VarData);                                             begin  end;
procedure not_u16_u8(p1, p2: PSE2VarData);                                                begin p1^.tu16^ := p1^.tu16^ not p2^.tu8^; end;
procedure not_u16_s8(p1, p2: PSE2VarData);                                                begin p1^.tu16^ := p1^.tu16^ not p2^.ts8^; end;
procedure not_u16_u16(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ not p2^.tu16^; end;
procedure not_u16_s16(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ not p2^.ts16^; end;
procedure not_u16_u32(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ not p2^.tu32^; end;
procedure not_u16_s32(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ not p2^.ts32^; end;
procedure not_u16_s64(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ not p2^.ts64^; end;
procedure not_u16_single(p1, p2: PSE2VarData);                                            begin  end;
procedure not_u16_double(p1, p2: PSE2VarData);                                            begin  end;
procedure not_u16_string(p1, p2: PSE2VarData);                                            begin  end;
procedure not_u16_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure not_u16_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure not_u16_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure not_u16_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure not_u16_object(p1, p2: PSE2VarData);                                            begin  end;
procedure not_s16_u8(p1, p2: PSE2VarData);                                                begin p1^.ts16^ := p1^.ts16^ not p2^.tu8^; end;
procedure not_s16_s8(p1, p2: PSE2VarData);                                                begin p1^.ts16^ := p1^.ts16^ not p2^.ts8^; end;
procedure not_s16_u16(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ not p2^.tu16^; end;
procedure not_s16_s16(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ not p2^.ts16^; end;
procedure not_s16_u32(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ not p2^.tu32^; end;
procedure not_s16_s32(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ not p2^.ts32^; end;
procedure not_s16_s64(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ not p2^.ts64^; end;
procedure not_s16_single(p1, p2: PSE2VarData);                                            begin  end;
procedure not_s16_double(p1, p2: PSE2VarData);                                            begin  end;
procedure not_s16_string(p1, p2: PSE2VarData);                                            begin  end;
procedure not_s16_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure not_s16_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure not_s16_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure not_s16_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure not_s16_object(p1, p2: PSE2VarData);                                            begin  end;
procedure not_u32_u8(p1, p2: PSE2VarData);                                                begin p1^.tu32^ := p1^.tu32^ not p2^.tu8^; end;
procedure not_u32_s8(p1, p2: PSE2VarData);                                                begin p1^.tu32^ := p1^.tu32^ not p2^.ts8^; end;
procedure not_u32_u16(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ not p2^.tu16^; end;
procedure not_u32_s16(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ not p2^.ts16^; end;
procedure not_u32_u32(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ not p2^.tu32^; end;
procedure not_u32_s32(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ not p2^.ts32^; end;
procedure not_u32_s64(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ not p2^.ts64^; end;
procedure not_u32_single(p1, p2: PSE2VarData);                                            begin  end;
procedure not_u32_double(p1, p2: PSE2VarData);                                            begin  end;
procedure not_u32_string(p1, p2: PSE2VarData);                                            begin  end;
procedure not_u32_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure not_u32_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure not_u32_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure not_u32_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure not_u32_object(p1, p2: PSE2VarData);                                            begin  end;
procedure not_s32_u8(p1, p2: PSE2VarData);                                                begin p1^.ts32^ := p1^.ts32^ not p2^.tu8^; end;
procedure not_s32_s8(p1, p2: PSE2VarData);                                                begin p1^.ts32^ := p1^.ts32^ not p2^.ts8^; end;
procedure not_s32_u16(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ not p2^.tu16^; end;
procedure not_s32_s16(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ not p2^.ts16^; end;
procedure not_s32_u32(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ not p2^.tu32^; end;
procedure not_s32_s32(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ not p2^.ts32^; end;
procedure not_s32_s64(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ not p2^.ts64^; end;
procedure not_s32_single(p1, p2: PSE2VarData);                                            begin  end;
procedure not_s32_double(p1, p2: PSE2VarData);                                            begin  end;
procedure not_s32_string(p1, p2: PSE2VarData);                                            begin  end;
procedure not_s32_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure not_s32_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure not_s32_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure not_s32_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure not_s32_object(p1, p2: PSE2VarData);                                            begin  end;
procedure not_s64_u8(p1, p2: PSE2VarData);                                                begin p1^.ts64^ := p1^.ts64^ not p2^.tu8^; end;
procedure not_s64_s8(p1, p2: PSE2VarData);                                                begin p1^.ts64^ := p1^.ts64^ not p2^.ts8^; end;
procedure not_s64_u16(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ not p2^.tu16^; end;
procedure not_s64_s16(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ not p2^.ts16^; end;
procedure not_s64_u32(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ not p2^.tu32^; end;
procedure not_s64_s32(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ not p2^.ts32^; end;
procedure not_s64_s64(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ not p2^.ts64^; end;
procedure not_s64_single(p1, p2: PSE2VarData);                                            begin  end;
procedure not_s64_double(p1, p2: PSE2VarData);                                            begin  end;
procedure not_s64_string(p1, p2: PSE2VarData);                                            begin  end;
procedure not_s64_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure not_s64_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure not_s64_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure not_s64_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure not_s64_object(p1, p2: PSE2VarData);                                            begin  end;
procedure not_single_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure not_single_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure not_single_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure not_single_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure not_single_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure not_single_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure not_single_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure not_single_single(p1, p2: PSE2VarData);                                         begin  end;
procedure not_single_double(p1, p2: PSE2VarData);                                         begin  end;
procedure not_single_string(p1, p2: PSE2VarData);                                         begin  end;
procedure not_single_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure not_single_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure not_single_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure not_single_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure not_single_object(p1, p2: PSE2VarData);                                         begin  end;
procedure not_double_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure not_double_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure not_double_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure not_double_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure not_double_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure not_double_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure not_double_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure not_double_single(p1, p2: PSE2VarData);                                         begin  end;
procedure not_double_double(p1, p2: PSE2VarData);                                         begin  end;
procedure not_double_string(p1, p2: PSE2VarData);                                         begin  end;
procedure not_double_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure not_double_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure not_double_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure not_double_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure not_double_object(p1, p2: PSE2VarData);                                         begin  end;
procedure not_string_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure not_string_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure not_string_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure not_string_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure not_string_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure not_string_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure not_string_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure not_string_single(p1, p2: PSE2VarData);                                         begin  end;
procedure not_string_double(p1, p2: PSE2VarData);                                         begin  end;
procedure not_string_string(p1, p2: PSE2VarData);                                         begin  end;
procedure not_string_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure not_string_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure not_string_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure not_string_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure not_string_object(p1, p2: PSE2VarData);                                         begin  end;
procedure not_utf8string_u8(p1, p2: PSE2VarData);                                         begin  end;
procedure not_utf8string_s8(p1, p2: PSE2VarData);                                         begin  end;
procedure not_utf8string_u16(p1, p2: PSE2VarData);                                        begin  end;
procedure not_utf8string_s16(p1, p2: PSE2VarData);                                        begin  end;
procedure not_utf8string_u32(p1, p2: PSE2VarData);                                        begin  end;
procedure not_utf8string_s32(p1, p2: PSE2VarData);                                        begin  end;
procedure not_utf8string_s64(p1, p2: PSE2VarData);                                        begin  end;
procedure not_utf8string_single(p1, p2: PSE2VarData);                                     begin  end;
procedure not_utf8string_double(p1, p2: PSE2VarData);                                     begin  end;
procedure not_utf8string_string(p1, p2: PSE2VarData);                                     begin  end;
procedure not_utf8string_utf8string(p1, p2: PSE2VarData);                                 begin  end;
procedure not_utf8string_widestring(p1, p2: PSE2VarData);                                 begin  end;
procedure not_utf8string_pchar(p1, p2: PSE2VarData);                                      begin  end;
procedure not_utf8string_pointer(p1, p2: PSE2VarData);                                    begin  end;
procedure not_utf8string_object(p1, p2: PSE2VarData);                                     begin  end;
procedure not_widestring_u8(p1, p2: PSE2VarData);                                         begin  end;
procedure not_widestring_s8(p1, p2: PSE2VarData);                                         begin  end;
procedure not_widestring_u16(p1, p2: PSE2VarData);                                        begin  end;
procedure not_widestring_s16(p1, p2: PSE2VarData);                                        begin  end;
procedure not_widestring_u32(p1, p2: PSE2VarData);                                        begin  end;
procedure not_widestring_s32(p1, p2: PSE2VarData);                                        begin  end;
procedure not_widestring_s64(p1, p2: PSE2VarData);                                        begin  end;
procedure not_widestring_single(p1, p2: PSE2VarData);                                     begin  end;
procedure not_widestring_double(p1, p2: PSE2VarData);                                     begin  end;
procedure not_widestring_string(p1, p2: PSE2VarData);                                     begin  end;
procedure not_widestring_utf8string(p1, p2: PSE2VarData);                                 begin  end;
procedure not_widestring_widestring(p1, p2: PSE2VarData);                                 begin  end;
procedure not_widestring_pchar(p1, p2: PSE2VarData);                                      begin  end;
procedure not_widestring_pointer(p1, p2: PSE2VarData);                                    begin  end;
procedure not_widestring_object(p1, p2: PSE2VarData);                                     begin  end;
procedure not_pchar_u8(p1, p2: PSE2VarData);                                              begin  end;
procedure not_pchar_s8(p1, p2: PSE2VarData);                                              begin  end;
procedure not_pchar_u16(p1, p2: PSE2VarData);                                             begin  end;
procedure not_pchar_s16(p1, p2: PSE2VarData);                                             begin  end;
procedure not_pchar_u32(p1, p2: PSE2VarData);                                             begin  end;
procedure not_pchar_s32(p1, p2: PSE2VarData);                                             begin  end;
procedure not_pchar_s64(p1, p2: PSE2VarData);                                             begin  end;
procedure not_pchar_single(p1, p2: PSE2VarData);                                          begin  end;
procedure not_pchar_double(p1, p2: PSE2VarData);                                          begin  end;
procedure not_pchar_string(p1, p2: PSE2VarData);                                          begin  end;
procedure not_pchar_utf8string(p1, p2: PSE2VarData);                                      begin  end;
procedure not_pchar_widestring(p1, p2: PSE2VarData);                                      begin  end;
procedure not_pchar_pchar(p1, p2: PSE2VarData);                                           begin  end;
procedure not_pchar_pointer(p1, p2: PSE2VarData);                                         begin  end;
procedure not_pchar_object(p1, p2: PSE2VarData);                                          begin  end;
procedure not_pointer_u8(p1, p2: PSE2VarData);                                            begin  end;
procedure not_pointer_s8(p1, p2: PSE2VarData);                                            begin  end;
procedure not_pointer_u16(p1, p2: PSE2VarData);                                           begin  end;
procedure not_pointer_s16(p1, p2: PSE2VarData);                                           begin  end;
procedure not_pointer_u32(p1, p2: PSE2VarData);                                           begin  end;
procedure not_pointer_s32(p1, p2: PSE2VarData);                                           begin  end;
procedure not_pointer_s64(p1, p2: PSE2VarData);                                           begin  end;
procedure not_pointer_single(p1, p2: PSE2VarData);                                        begin  end;
procedure not_pointer_double(p1, p2: PSE2VarData);                                        begin  end;
procedure not_pointer_string(p1, p2: PSE2VarData);                                        begin  end;
procedure not_pointer_utf8string(p1, p2: PSE2VarData);                                    begin  end;
procedure not_pointer_widestring(p1, p2: PSE2VarData);                                    begin  end;
procedure not_pointer_pchar(p1, p2: PSE2VarData);                                         begin  end;
procedure not_pointer_pointer(p1, p2: PSE2VarData);                                       begin  end;
procedure not_pointer_object(p1, p2: PSE2VarData);                                        begin  end;
procedure not_object_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure not_object_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure not_object_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure not_object_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure not_object_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure not_object_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure not_object_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure not_object_single(p1, p2: PSE2VarData);                                         begin  end;
procedure not_object_double(p1, p2: PSE2VarData);                                         begin  end;
procedure not_object_string(p1, p2: PSE2VarData);                                         begin  end;
procedure not_object_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure not_object_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure not_object_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure not_object_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure not_object_object(p1, p2: PSE2VarData);                                         begin  end;


procedure bnot_u8_u8(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ not p2^.tu8^; end;
procedure bnot_u8_s8(p1, p2: PSE2VarData);                                                begin p1^.tu8^ := p1^.tu8^ not p2^.ts8^; end;
procedure bnot_u8_u16(p1, p2: PSE2VarData);                                               begin p1^.tu8^ := p1^.tu8^ not p2^.tu16^; end;
procedure bnot_u8_s16(p1, p2: PSE2VarData);                                               begin p1^.tu8^ := p1^.tu8^ not p2^.ts16^; end;
procedure bnot_u8_u32(p1, p2: PSE2VarData);                                               begin p1^.tu8^ := p1^.tu8^ not p2^.tu32^; end;
procedure bnot_u8_s32(p1, p2: PSE2VarData);                                               begin p1^.tu8^ := p1^.tu8^ not p2^.ts32^; end;
procedure bnot_u8_s64(p1, p2: PSE2VarData);                                               begin p1^.tu8^ := p1^.tu8^ not p2^.ts64^; end;
procedure bnot_u8_single(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_u8_double(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_u8_string(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_u8_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_u8_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_u8_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure bnot_u8_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_u8_object(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_s8_u8(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ not p2^.tu8^; end;
procedure bnot_s8_s8(p1, p2: PSE2VarData);                                                begin p1^.ts8^ := p1^.ts8^ not p2^.ts8^; end;
procedure bnot_s8_u16(p1, p2: PSE2VarData);                                               begin p1^.ts8^ := p1^.ts8^ not p2^.tu16^; end;
procedure bnot_s8_s16(p1, p2: PSE2VarData);                                               begin p1^.ts8^ := p1^.ts8^ not p2^.ts16^; end;
procedure bnot_s8_u32(p1, p2: PSE2VarData);                                               begin p1^.ts8^ := p1^.ts8^ not p2^.tu32^; end;
procedure bnot_s8_s32(p1, p2: PSE2VarData);                                               begin p1^.ts8^ := p1^.ts8^ not p2^.ts32^; end;
procedure bnot_s8_s64(p1, p2: PSE2VarData);                                               begin p1^.ts8^ := p1^.ts8^ not p2^.ts64^; end;
procedure bnot_s8_single(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_s8_double(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_s8_string(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_s8_utf8string(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_s8_widestring(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_s8_pchar(p1, p2: PSE2VarData);                                             begin  end;
procedure bnot_s8_pointer(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_s8_object(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_u16_u8(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ not p2^.tu8^; end;
procedure bnot_u16_s8(p1, p2: PSE2VarData);                                               begin p1^.tu16^ := p1^.tu16^ not p2^.ts8^; end;
procedure bnot_u16_u16(p1, p2: PSE2VarData);                                              begin p1^.tu16^ := p1^.tu16^ not p2^.tu16^; end;
procedure bnot_u16_s16(p1, p2: PSE2VarData);                                              begin p1^.tu16^ := p1^.tu16^ not p2^.ts16^; end;
procedure bnot_u16_u32(p1, p2: PSE2VarData);                                              begin p1^.tu16^ := p1^.tu16^ not p2^.tu32^; end;
procedure bnot_u16_s32(p1, p2: PSE2VarData);                                              begin p1^.tu16^ := p1^.tu16^ not p2^.ts32^; end;
procedure bnot_u16_s64(p1, p2: PSE2VarData);                                              begin p1^.tu16^ := p1^.tu16^ not p2^.ts64^; end;
procedure bnot_u16_single(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_u16_double(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_u16_string(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_u16_utf8string(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_u16_widestring(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_u16_pchar(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_u16_pointer(p1, p2: PSE2VarData);                                          begin  end;
procedure bnot_u16_object(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_s16_u8(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ not p2^.tu8^; end;
procedure bnot_s16_s8(p1, p2: PSE2VarData);                                               begin p1^.ts16^ := p1^.ts16^ not p2^.ts8^; end;
procedure bnot_s16_u16(p1, p2: PSE2VarData);                                              begin p1^.ts16^ := p1^.ts16^ not p2^.tu16^; end;
procedure bnot_s16_s16(p1, p2: PSE2VarData);                                              begin p1^.ts16^ := p1^.ts16^ not p2^.ts16^; end;
procedure bnot_s16_u32(p1, p2: PSE2VarData);                                              begin p1^.ts16^ := p1^.ts16^ not p2^.tu32^; end;
procedure bnot_s16_s32(p1, p2: PSE2VarData);                                              begin p1^.ts16^ := p1^.ts16^ not p2^.ts32^; end;
procedure bnot_s16_s64(p1, p2: PSE2VarData);                                              begin p1^.ts16^ := p1^.ts16^ not p2^.ts64^; end;
procedure bnot_s16_single(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_s16_double(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_s16_string(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_s16_utf8string(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_s16_widestring(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_s16_pchar(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_s16_pointer(p1, p2: PSE2VarData);                                          begin  end;
procedure bnot_s16_object(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_u32_u8(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ not p2^.tu8^; end;
procedure bnot_u32_s8(p1, p2: PSE2VarData);                                               begin p1^.tu32^ := p1^.tu32^ not p2^.ts8^; end;
procedure bnot_u32_u16(p1, p2: PSE2VarData);                                              begin p1^.tu32^ := p1^.tu32^ not p2^.tu16^; end;
procedure bnot_u32_s16(p1, p2: PSE2VarData);                                              begin p1^.tu32^ := p1^.tu32^ not p2^.ts16^; end;
procedure bnot_u32_u32(p1, p2: PSE2VarData);                                              begin p1^.tu32^ := p1^.tu32^ not p2^.tu32^; end;
procedure bnot_u32_s32(p1, p2: PSE2VarData);                                              begin p1^.tu32^ := p1^.tu32^ not p2^.ts32^; end;
procedure bnot_u32_s64(p1, p2: PSE2VarData);                                              begin p1^.tu32^ := p1^.tu32^ not p2^.ts64^; end;
procedure bnot_u32_single(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_u32_double(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_u32_string(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_u32_utf8string(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_u32_widestring(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_u32_pchar(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_u32_pointer(p1, p2: PSE2VarData);                                          begin  end;
procedure bnot_u32_object(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_s32_u8(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ not p2^.tu8^; end;
procedure bnot_s32_s8(p1, p2: PSE2VarData);                                               begin p1^.ts32^ := p1^.ts32^ not p2^.ts8^; end;
procedure bnot_s32_u16(p1, p2: PSE2VarData);                                              begin p1^.ts32^ := p1^.ts32^ not p2^.tu16^; end;
procedure bnot_s32_s16(p1, p2: PSE2VarData);                                              begin p1^.ts32^ := p1^.ts32^ not p2^.ts16^; end;
procedure bnot_s32_u32(p1, p2: PSE2VarData);                                              begin p1^.ts32^ := p1^.ts32^ not p2^.tu32^; end;
procedure bnot_s32_s32(p1, p2: PSE2VarData);                                              begin p1^.ts32^ := p1^.ts32^ not p2^.ts32^; end;
procedure bnot_s32_s64(p1, p2: PSE2VarData);                                              begin p1^.ts32^ := p1^.ts32^ not p2^.ts64^; end;
procedure bnot_s32_single(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_s32_double(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_s32_string(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_s32_utf8string(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_s32_widestring(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_s32_pchar(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_s32_pointer(p1, p2: PSE2VarData);                                          begin  end;
procedure bnot_s32_object(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_s64_u8(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ not p2^.tu8^; end;
procedure bnot_s64_s8(p1, p2: PSE2VarData);                                               begin p1^.ts64^ := p1^.ts64^ not p2^.ts8^; end;
procedure bnot_s64_u16(p1, p2: PSE2VarData);                                              begin p1^.ts64^ := p1^.ts64^ not p2^.tu16^; end;
procedure bnot_s64_s16(p1, p2: PSE2VarData);                                              begin p1^.ts64^ := p1^.ts64^ not p2^.ts16^; end;
procedure bnot_s64_u32(p1, p2: PSE2VarData);                                              begin p1^.ts64^ := p1^.ts64^ not p2^.tu32^; end;
procedure bnot_s64_s32(p1, p2: PSE2VarData);                                              begin p1^.ts64^ := p1^.ts64^ not p2^.ts32^; end;
procedure bnot_s64_s64(p1, p2: PSE2VarData);                                              begin p1^.ts64^ := p1^.ts64^ not p2^.ts64^; end;
procedure bnot_s64_single(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_s64_double(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_s64_string(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_s64_utf8string(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_s64_widestring(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_s64_pchar(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_s64_pointer(p1, p2: PSE2VarData);                                          begin  end;
procedure bnot_s64_object(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_single_u8(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_single_s8(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_single_u16(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_single_s16(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_single_u32(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_single_s32(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_single_s64(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_single_single(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_single_double(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_single_string(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_single_utf8string(p1, p2: PSE2VarData);                                    begin  end;
procedure bnot_single_widestring(p1, p2: PSE2VarData);                                    begin  end;
procedure bnot_single_pchar(p1, p2: PSE2VarData);                                         begin  end;
procedure bnot_single_pointer(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_single_object(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_double_u8(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_double_s8(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_double_u16(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_double_s16(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_double_u32(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_double_s32(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_double_s64(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_double_single(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_double_double(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_double_string(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_double_utf8string(p1, p2: PSE2VarData);                                    begin  end;
procedure bnot_double_widestring(p1, p2: PSE2VarData);                                    begin  end;
procedure bnot_double_pchar(p1, p2: PSE2VarData);                                         begin  end;
procedure bnot_double_pointer(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_double_object(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_string_u8(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_string_s8(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_string_u16(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_string_s16(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_string_u32(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_string_s32(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_string_s64(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_string_single(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_string_double(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_string_string(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_string_utf8string(p1, p2: PSE2VarData);                                    begin  end;
procedure bnot_string_widestring(p1, p2: PSE2VarData);                                    begin  end;
procedure bnot_string_pchar(p1, p2: PSE2VarData);                                         begin  end;
procedure bnot_string_pointer(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_string_object(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_utf8string_u8(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_utf8string_s8(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_utf8string_u16(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_utf8string_s16(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_utf8string_u32(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_utf8string_s32(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_utf8string_s64(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_utf8string_single(p1, p2: PSE2VarData);                                    begin  end;
procedure bnot_utf8string_double(p1, p2: PSE2VarData);                                    begin  end;
procedure bnot_utf8string_string(p1, p2: PSE2VarData);                                    begin  end;
procedure bnot_utf8string_utf8string(p1, p2: PSE2VarData);                                begin  end;
procedure bnot_utf8string_widestring(p1, p2: PSE2VarData);                                begin  end;
procedure bnot_utf8string_pchar(p1, p2: PSE2VarData);                                     begin  end;
procedure bnot_utf8string_pointer(p1, p2: PSE2VarData);                                   begin  end;
procedure bnot_utf8string_object(p1, p2: PSE2VarData);                                    begin  end;
procedure bnot_widestring_u8(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_widestring_s8(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_widestring_u16(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_widestring_s16(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_widestring_u32(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_widestring_s32(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_widestring_s64(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_widestring_single(p1, p2: PSE2VarData);                                    begin  end;
procedure bnot_widestring_double(p1, p2: PSE2VarData);                                    begin  end;
procedure bnot_widestring_string(p1, p2: PSE2VarData);                                    begin  end;
procedure bnot_widestring_utf8string(p1, p2: PSE2VarData);                                begin  end;
procedure bnot_widestring_widestring(p1, p2: PSE2VarData);                                begin  end;
procedure bnot_widestring_pchar(p1, p2: PSE2VarData);                                     begin  end;
procedure bnot_widestring_pointer(p1, p2: PSE2VarData);                                   begin  end;
procedure bnot_widestring_object(p1, p2: PSE2VarData);                                    begin  end;
procedure bnot_pchar_u8(p1, p2: PSE2VarData);                                             begin  end;
procedure bnot_pchar_s8(p1, p2: PSE2VarData);                                             begin  end;
procedure bnot_pchar_u16(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_pchar_s16(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_pchar_u32(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_pchar_s32(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_pchar_s64(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_pchar_single(p1, p2: PSE2VarData);                                         begin  end;
procedure bnot_pchar_double(p1, p2: PSE2VarData);                                         begin  end;
procedure bnot_pchar_string(p1, p2: PSE2VarData);                                         begin  end;
procedure bnot_pchar_utf8string(p1, p2: PSE2VarData);                                     begin  end;
procedure bnot_pchar_widestring(p1, p2: PSE2VarData);                                     begin  end;
procedure bnot_pchar_pchar(p1, p2: PSE2VarData);                                          begin  end;
procedure bnot_pchar_pointer(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_pchar_object(p1, p2: PSE2VarData);                                         begin  end;
procedure bnot_pointer_u8(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_pointer_s8(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_pointer_u16(p1, p2: PSE2VarData);                                          begin  end;
procedure bnot_pointer_s16(p1, p2: PSE2VarData);                                          begin  end;
procedure bnot_pointer_u32(p1, p2: PSE2VarData);                                          begin  end;
procedure bnot_pointer_s32(p1, p2: PSE2VarData);                                          begin  end;
procedure bnot_pointer_s64(p1, p2: PSE2VarData);                                          begin  end;
procedure bnot_pointer_single(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_pointer_double(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_pointer_string(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_pointer_utf8string(p1, p2: PSE2VarData);                                   begin  end;
procedure bnot_pointer_widestring(p1, p2: PSE2VarData);                                   begin  end;
procedure bnot_pointer_pchar(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_pointer_pointer(p1, p2: PSE2VarData);                                      begin  end;
procedure bnot_pointer_object(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_object_u8(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_object_s8(p1, p2: PSE2VarData);                                            begin  end;
procedure bnot_object_u16(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_object_s16(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_object_u32(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_object_s32(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_object_s64(p1, p2: PSE2VarData);                                           begin  end;
procedure bnot_object_single(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_object_double(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_object_string(p1, p2: PSE2VarData);                                        begin  end;
procedure bnot_object_utf8string(p1, p2: PSE2VarData);                                    begin  end;
procedure bnot_object_widestring(p1, p2: PSE2VarData);                                    begin  end;
procedure bnot_object_pchar(p1, p2: PSE2VarData);                                         begin  end;
procedure bnot_object_pointer(p1, p2: PSE2VarData);                                       begin  end;
procedure bnot_object_object(p1, p2: PSE2VarData);                                        begin  end;
}

function smaller_u8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu8^ < p2^.tu8^; end;
function smaller_u8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu8^ < p2^.ts8^; end;
function smaller_u8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu8^ < p2^.tu16^; end;
function smaller_u8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu8^ < p2^.ts16^; end;
function smaller_u8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu8^ < p2^.tu32^; end;
function smaller_u8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu8^ < p2^.ts32^; end;
function smaller_u8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu8^ < p2^.ts64^; end;
function smaller_u8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tu8^ < p2^.tSingle^; end;
function smaller_u8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tu8^ < p2^.tDouble^; end;
function smaller_u8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function smaller_u8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_u8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_u8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function smaller_u8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_u8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function smaller_s8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts8^ < p2^.tu8^; end;
function smaller_s8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts8^ < p2^.ts8^; end;
function smaller_s8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts8^ < p2^.tu16^; end;
function smaller_s8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts8^ < p2^.ts16^; end;
function smaller_s8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts8^ < p2^.tu32^; end;
function smaller_s8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts8^ < p2^.ts32^; end;
function smaller_s8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts8^ < p2^.ts64^; end;
function smaller_s8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.ts8^ < p2^.tSingle^; end;
function smaller_s8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.ts8^ < p2^.tDouble^; end;
function smaller_s8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function smaller_s8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_s8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_s8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function smaller_s8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_s8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function smaller_u16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu16^ < p2^.tu8^; end;
function smaller_u16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu16^ < p2^.ts8^; end;
function smaller_u16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu16^ < p2^.tu16^; end;
function smaller_u16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu16^ < p2^.ts16^; end;
function smaller_u16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu16^ < p2^.tu32^; end;
function smaller_u16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu16^ < p2^.ts32^; end;
function smaller_u16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu16^ < p2^.ts64^; end;
function smaller_u16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu16^ < p2^.tSingle^; end;
function smaller_u16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu16^ < p2^.tDouble^; end;
function smaller_u16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_u16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_u16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_u16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function smaller_u16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function smaller_u16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_s16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts16^ < p2^.tu8^; end;
function smaller_s16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts16^ < p2^.ts8^; end;
function smaller_s16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts16^ < p2^.tu16^; end;
function smaller_s16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts16^ < p2^.ts16^; end;
function smaller_s16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts16^ < p2^.tu32^; end;
function smaller_s16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts16^ < p2^.ts32^; end;
function smaller_s16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts16^ < p2^.ts64^; end;
function smaller_s16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts16^ < p2^.tSingle^; end;
function smaller_s16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts16^ < p2^.tDouble^; end;
function smaller_s16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_s16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_s16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_s16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function smaller_s16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function smaller_s16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_u32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu32^ < p2^.tu8^; end;
function smaller_u32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu32^ < p2^.ts8^; end;
function smaller_u32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu32^ < p2^.tu16^; end;
function smaller_u32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu32^ < p2^.ts16^; end;
function smaller_u32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu32^ < p2^.tu32^; end;
function smaller_u32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu32^ < p2^.ts32^; end;
function smaller_u32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu32^ < p2^.ts64^; end;
function smaller_u32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu32^ < p2^.tSingle^; end;
function smaller_u32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu32^ < p2^.tDouble^; end;
function smaller_u32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_u32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_u32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_u32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function smaller_u32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function smaller_u32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_s32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts32^ < p2^.tu8^; end;
function smaller_s32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts32^ < p2^.ts8^; end;
function smaller_s32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts32^ < p2^.tu16^; end;
function smaller_s32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts32^ < p2^.ts16^; end;
function smaller_s32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts32^ < p2^.tu32^; end;
function smaller_s32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts32^ < p2^.ts32^; end;
function smaller_s32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts32^ < p2^.ts64^; end;
function smaller_s32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts32^ < p2^.tSingle^; end;
function smaller_s32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts32^ < p2^.tDouble^; end;
function smaller_s32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_s32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_s32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_s32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function smaller_s32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function smaller_s32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_s64_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts64^ < p2^.tu8^; end;
function smaller_s64_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts64^ < p2^.ts8^; end;
function smaller_s64_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts64^ < p2^.tu16^; end;
function smaller_s64_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts64^ < p2^.ts16^; end;
function smaller_s64_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts64^ < p2^.tu32^; end;
function smaller_s64_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts64^ < p2^.ts32^; end;
function smaller_s64_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts64^ < p2^.ts64^; end;
function smaller_s64_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts64^ < p2^.tSingle^; end;
function smaller_s64_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts64^ < p2^.tDouble^; end;
function smaller_s64_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_s64_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_s64_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_s64_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function smaller_s64_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function smaller_s64_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_single_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tSingle^ < p2^.tu8^; end;
function smaller_single_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tSingle^ < p2^.ts8^; end;
function smaller_single_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tSingle^ < p2^.tu16^; end;
function smaller_single_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tSingle^ < p2^.ts16^; end;
function smaller_single_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tSingle^ < p2^.tu32^; end;
function smaller_single_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tSingle^ < p2^.ts32^; end;
function smaller_single_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tSingle^ < p2^.ts64^; end;
function smaller_single_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := p1^.tSingle^ < p2^.tSingle^; end;
function smaller_single_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := p1^.tSingle^ < p2^.tDouble^; end;
function smaller_single_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_single_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smaller_single_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smaller_single_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function smaller_single_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_single_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_double_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tDouble^ < p2^.tu8^; end;
function smaller_double_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tDouble^ < p2^.ts8^; end;
function smaller_double_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tDouble^ < p2^.tu16^; end;
function smaller_double_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tDouble^ < p2^.ts16^; end;
function smaller_double_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tDouble^ < p2^.tu32^; end;
function smaller_double_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tDouble^ < p2^.ts32^; end;
function smaller_double_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tDouble^ < p2^.ts64^; end;
function smaller_double_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := p1^.tDouble^ < p2^.tSingle^; end;
function smaller_double_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := p1^.tDouble^ < p2^.tDouble^; end;
function smaller_double_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_double_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smaller_double_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smaller_double_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function smaller_double_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_double_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function smaller_string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function smaller_string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := PbtString(p1^.tString^)^ < PbtString(p2^.tString^)^; end;
function smaller_string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtString(p1^.tString^)^ < PbtUTF8String(p2^.tString^)^; end;
function smaller_string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtString(p1^.tString^)^ < PbtWideString(p2^.tString^)^; end;
function smaller_string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := PbtString(p1^.tString^)^ < PbtPChar(p2^.tString^)^; end;
function smaller_string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_utf8string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_utf8string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_utf8string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_utf8string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_utf8string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_utf8string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_utf8string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_utf8string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smaller_utf8string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smaller_utf8string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtUTF8String(p1^.tString^)^ < PbtString(p2^.tString^)^; end;
function smaller_utf8string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtUTF8String(p1^.tString^)^ < PbtUTF8String(p2^.tString^)^; end;
function smaller_utf8string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtUTF8String(p1^.tString^)^ < PbtWideString(p2^.tString^)^; end;
function smaller_utf8string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := PbtUTF8String(p1^.tString^)^ < PbtPChar(p2^.tString^)^; end;
function smaller_utf8string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smaller_utf8string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smaller_widestring_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_widestring_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_widestring_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_widestring_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_widestring_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_widestring_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_widestring_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_widestring_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smaller_widestring_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smaller_widestring_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtWideString(p1^.tString^)^ < PbtString(p2^.tString^)^; end;
function smaller_widestring_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtWideString(p1^.tString^)^ < PbtUTF8String(p2^.tString^)^; end;
function smaller_widestring_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtWideString(p1^.tString^)^ < PbtWideString(p2^.tString^)^; end;
function smaller_widestring_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := PbtWideString(p1^.tString^)^ < PbtPChar(p2^.tString^)^; end;
function smaller_widestring_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smaller_widestring_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smaller_pchar_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function smaller_pchar_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function smaller_pchar_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function smaller_pchar_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function smaller_pchar_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function smaller_pchar_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function smaller_pchar_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function smaller_pchar_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function smaller_pchar_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function smaller_pchar_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := PbtPChar(p1^.tString^)^ < PbtString(p2^.tString^)^; end;
function smaller_pchar_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := PbtPChar(p1^.tString^)^ < PbtUTF8String(p2^.tString^)^; end;
function smaller_pchar_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := PbtPChar(p1^.tString^)^ < PbtWideString(p2^.tString^)^; end;
function smaller_pchar_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := PbtPChar(p1^.tString^)^ < PbtPChar(p2^.tString^)^; end;
function smaller_pchar_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_pchar_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function smaller_pointer_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_pointer_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_pointer_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function smaller_pointer_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function smaller_pointer_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function smaller_pointer_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function smaller_pointer_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function smaller_pointer_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_pointer_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_pointer_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_pointer_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smaller_pointer_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smaller_pointer_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_pointer_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smaller_pointer_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_object_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function smaller_object_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function smaller_object_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_object_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_object_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_object_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_object_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function smaller_object_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_object_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_object_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smaller_object_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smaller_object_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smaller_object_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function smaller_object_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smaller_object_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smallerequal_u8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu8^ <= p2^.tu8^; end;
function smallerequal_u8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu8^ <= p2^.ts8^; end;
function smallerequal_u8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu8^ <= p2^.tu16^; end;
function smallerequal_u8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu8^ <= p2^.ts16^; end;
function smallerequal_u8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu8^ <= p2^.tu32^; end;
function smallerequal_u8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu8^ <= p2^.ts32^; end;
function smallerequal_u8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu8^ <= p2^.ts64^; end;
function smallerequal_u8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tu8^ <= p2^.tSingle^; end;
function smallerequal_u8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tu8^ <= p2^.tDouble^; end;
function smallerequal_u8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smallerequal_u8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_u8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_u8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smallerequal_u8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_u8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smallerequal_s8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts8^ <= p2^.tu8^; end;
function smallerequal_s8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts8^ <= p2^.ts8^; end;
function smallerequal_s8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts8^ <= p2^.tu16^; end;
function smallerequal_s8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts8^ <= p2^.ts16^; end;
function smallerequal_s8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts8^ <= p2^.tu32^; end;
function smallerequal_s8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts8^ <= p2^.ts32^; end;
function smallerequal_s8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts8^ <= p2^.ts64^; end;
function smallerequal_s8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.ts8^ <= p2^.tSingle^; end;
function smallerequal_s8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.ts8^ <= p2^.tDouble^; end;
function smallerequal_s8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smallerequal_s8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_s8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_s8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smallerequal_s8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_s8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smallerequal_u16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu16^ <= p2^.tu8^; end;
function smallerequal_u16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu16^ <= p2^.ts8^; end;
function smallerequal_u16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.tu16^ <= p2^.tu16^; end;
function smallerequal_u16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.tu16^ <= p2^.ts16^; end;
function smallerequal_u16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.tu16^ <= p2^.tu32^; end;
function smallerequal_u16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.tu16^ <= p2^.ts32^; end;
function smallerequal_u16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.tu16^ <= p2^.ts64^; end;
function smallerequal_u16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.tu16^ <= p2^.tSingle^; end;
function smallerequal_u16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.tu16^ <= p2^.tDouble^; end;
function smallerequal_u16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_u16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_u16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_u16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smallerequal_u16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function smallerequal_u16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_s16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts16^ <= p2^.tu8^; end;
function smallerequal_s16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts16^ <= p2^.ts8^; end;
function smallerequal_s16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.ts16^ <= p2^.tu16^; end;
function smallerequal_s16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.ts16^ <= p2^.ts16^; end;
function smallerequal_s16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.ts16^ <= p2^.tu32^; end;
function smallerequal_s16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.ts16^ <= p2^.ts32^; end;
function smallerequal_s16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.ts16^ <= p2^.ts64^; end;
function smallerequal_s16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.ts16^ <= p2^.tSingle^; end;
function smallerequal_s16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.ts16^ <= p2^.tDouble^; end;
function smallerequal_s16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_s16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_s16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_s16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smallerequal_s16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function smallerequal_s16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_u32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu32^ <= p2^.tu8^; end;
function smallerequal_u32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu32^ <= p2^.ts8^; end;
function smallerequal_u32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.tu32^ <= p2^.tu16^; end;
function smallerequal_u32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.tu32^ <= p2^.ts16^; end;
function smallerequal_u32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.tu32^ <= p2^.tu32^; end;
function smallerequal_u32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.tu32^ <= p2^.ts32^; end;
function smallerequal_u32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.tu32^ <= p2^.ts64^; end;
function smallerequal_u32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.tu32^ <= p2^.tSingle^; end;
function smallerequal_u32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.tu32^ <= p2^.tDouble^; end;
function smallerequal_u32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_u32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_u32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_u32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smallerequal_u32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function smallerequal_u32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_s32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts32^ <= p2^.tu8^; end;
function smallerequal_s32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts32^ <= p2^.ts8^; end;
function smallerequal_s32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.ts32^ <= p2^.tu16^; end;
function smallerequal_s32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.ts32^ <= p2^.ts16^; end;
function smallerequal_s32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.ts32^ <= p2^.tu32^; end;
function smallerequal_s32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.ts32^ <= p2^.ts32^; end;
function smallerequal_s32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.ts32^ <= p2^.ts64^; end;
function smallerequal_s32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.ts32^ <= p2^.tSingle^; end;
function smallerequal_s32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.ts32^ <= p2^.tDouble^; end;
function smallerequal_s32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_s32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_s32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_s32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smallerequal_s32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function smallerequal_s32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_s64_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts64^ <= p2^.tu8^; end;
function smallerequal_s64_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts64^ <= p2^.ts8^; end;
function smallerequal_s64_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.ts64^ <= p2^.tu16^; end;
function smallerequal_s64_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.ts64^ <= p2^.ts16^; end;
function smallerequal_s64_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.ts64^ <= p2^.tu32^; end;
function smallerequal_s64_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.ts64^ <= p2^.ts32^; end;
function smallerequal_s64_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.ts64^ <= p2^.ts64^; end;
function smallerequal_s64_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.ts64^ <= p2^.tSingle^; end;
function smallerequal_s64_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.ts64^ <= p2^.tDouble^; end;
function smallerequal_s64_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_s64_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_s64_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_s64_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smallerequal_s64_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function smallerequal_s64_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_single_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tSingle^ <= p2^.tu8^; end;
function smallerequal_single_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tSingle^ <= p2^.ts8^; end;
function smallerequal_single_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.tSingle^ <= p2^.tu16^; end;
function smallerequal_single_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.tSingle^ <= p2^.ts16^; end;
function smallerequal_single_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.tSingle^ <= p2^.tu32^; end;
function smallerequal_single_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.tSingle^ <= p2^.ts32^; end;
function smallerequal_single_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.tSingle^ <= p2^.ts64^; end;
function smallerequal_single_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := p1^.tSingle^ <= p2^.tSingle^; end;
function smallerequal_single_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := p1^.tSingle^ <= p2^.tDouble^; end;
function smallerequal_single_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_single_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_single_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_single_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_single_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_single_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_double_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tDouble^ <= p2^.tu8^; end;
function smallerequal_double_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tDouble^ <= p2^.ts8^; end;
function smallerequal_double_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.tDouble^ <= p2^.tu16^; end;
function smallerequal_double_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.tDouble^ <= p2^.ts16^; end;
function smallerequal_double_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.tDouble^ <= p2^.tu32^; end;
function smallerequal_double_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.tDouble^ <= p2^.ts32^; end;
function smallerequal_double_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := p1^.tDouble^ <= p2^.ts64^; end;
function smallerequal_double_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := p1^.tDouble^ <= p2^.tSingle^; end;
function smallerequal_double_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := p1^.tDouble^ <= p2^.tDouble^; end;
function smallerequal_double_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_double_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_double_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_double_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_double_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_double_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smallerequal_string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smallerequal_string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtString(p1^.tString^)^ <= PbtString(p2^.tString^)^; end;
function smallerequal_string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtString(p1^.tString^)^ <= PbtUTF8String(p2^.tString^)^; end;
function smallerequal_string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtString(p1^.tString^)^ <= PbtWideString(p2^.tString^)^; end;
function smallerequal_string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtString(p1^.tString^)^ <= PbtPChar(p2^.tString^)^; end;
function smallerequal_string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_utf8string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_utf8string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_utf8string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_utf8string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_utf8string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_utf8string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_utf8string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_utf8string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_utf8string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_utf8string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtUTF8String(p1^.tString^)^ <= PbtString(p2^.tString^)^; end;
function smallerequal_utf8string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtUTF8String(p1^.tString^)^ <= PbtUTF8String(p2^.tString^)^; end;
function smallerequal_utf8string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtUTF8String(p1^.tString^)^ <= PbtWideString(p2^.tString^)^; end;
function smallerequal_utf8string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtUTF8String(p1^.tString^)^ <= PbtPChar(p2^.tString^)^; end;
function smallerequal_utf8string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_utf8string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_widestring_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_widestring_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_widestring_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_widestring_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_widestring_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_widestring_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_widestring_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_widestring_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_widestring_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_widestring_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtWideString(p1^.tString^)^ <= PbtString(p2^.tString^)^; end;
function smallerequal_widestring_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtWideString(p1^.tString^)^ <= PbtUTF8String(p2^.tString^)^; end;
function smallerequal_widestring_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtWideString(p1^.tString^)^ <= PbtWideString(p2^.tString^)^; end;
function smallerequal_widestring_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtWideString(p1^.tString^)^ <= PbtPChar(p2^.tString^)^; end;
function smallerequal_widestring_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_widestring_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_pchar_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smallerequal_pchar_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function smallerequal_pchar_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smallerequal_pchar_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smallerequal_pchar_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smallerequal_pchar_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smallerequal_pchar_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smallerequal_pchar_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_pchar_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_pchar_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtPChar(p1^.tString^)^ <= PbtString(p2^.tString^)^; end;
function smallerequal_pchar_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtPChar(p1^.tString^)^ <= PbtUTF8String(p2^.tString^)^; end;
function smallerequal_pchar_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtPChar(p1^.tString^)^ <= PbtWideString(p2^.tString^)^; end;
function smallerequal_pchar_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := PbtPChar(p1^.tString^)^ <= PbtPChar(p2^.tString^)^; end;
function smallerequal_pchar_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_pchar_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_pointer_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_pointer_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_pointer_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function smallerequal_pointer_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function smallerequal_pointer_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function smallerequal_pointer_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function smallerequal_pointer_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function smallerequal_pointer_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_pointer_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_pointer_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_pointer_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_pointer_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_pointer_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_pointer_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_pointer_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_object_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smallerequal_object_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function smallerequal_object_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_object_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_object_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_object_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_object_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function smallerequal_object_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_object_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_object_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_object_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_object_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_object_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_object_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function smallerequal_object_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function bigger_u8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.tu8^ > p2^.tu8^; end;
function bigger_u8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.tu8^ > p2^.ts8^; end;
function bigger_u8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu8^ > p2^.tu16^; end;
function bigger_u8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu8^ > p2^.ts16^; end;
function bigger_u8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu8^ > p2^.tu32^; end;
function bigger_u8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu8^ > p2^.ts32^; end;
function bigger_u8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu8^ > p2^.ts64^; end;
function bigger_u8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tu8^ > p2^.tSingle^; end;
function bigger_u8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tu8^ > p2^.tDouble^; end;
function bigger_u8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function bigger_u8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_u8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_u8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function bigger_u8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_u8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function bigger_s8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.ts8^ > p2^.tu8^; end;
function bigger_s8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.ts8^ > p2^.ts8^; end;
function bigger_s8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts8^ > p2^.tu16^; end;
function bigger_s8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts8^ > p2^.ts16^; end;
function bigger_s8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts8^ > p2^.tu32^; end;
function bigger_s8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts8^ > p2^.ts32^; end;
function bigger_s8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts8^ > p2^.ts64^; end;
function bigger_s8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.ts8^ > p2^.tSingle^; end;
function bigger_s8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.ts8^ > p2^.tDouble^; end;
function bigger_s8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function bigger_s8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_s8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_s8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function bigger_s8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_s8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function bigger_u16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu16^ > p2^.tu8^; end;
function bigger_u16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu16^ > p2^.ts8^; end;
function bigger_u16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu16^ > p2^.tu16^; end;
function bigger_u16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu16^ > p2^.ts16^; end;
function bigger_u16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu16^ > p2^.tu32^; end;
function bigger_u16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu16^ > p2^.ts32^; end;
function bigger_u16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu16^ > p2^.ts64^; end;
function bigger_u16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tu16^ > p2^.tSingle^; end;
function bigger_u16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tu16^ > p2^.tDouble^; end;
function bigger_u16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_u16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_u16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_u16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function bigger_u16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function bigger_u16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_s16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts16^ > p2^.tu8^; end;
function bigger_s16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts16^ > p2^.ts8^; end;
function bigger_s16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts16^ > p2^.tu16^; end;
function bigger_s16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts16^ > p2^.ts16^; end;
function bigger_s16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts16^ > p2^.tu32^; end;
function bigger_s16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts16^ > p2^.ts32^; end;
function bigger_s16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts16^ > p2^.ts64^; end;
function bigger_s16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.ts16^ > p2^.tSingle^; end;
function bigger_s16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.ts16^ > p2^.tDouble^; end;
function bigger_s16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_s16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_s16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_s16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function bigger_s16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function bigger_s16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_u32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu32^ > p2^.tu8^; end;
function bigger_u32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu32^ > p2^.ts8^; end;
function bigger_u32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu32^ > p2^.tu16^; end;
function bigger_u32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu32^ > p2^.ts16^; end;
function bigger_u32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu32^ > p2^.tu32^; end;
function bigger_u32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu32^ > p2^.ts32^; end;
function bigger_u32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu32^ > p2^.ts64^; end;
function bigger_u32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tu32^ > p2^.tSingle^; end;
function bigger_u32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tu32^ > p2^.tDouble^; end;
function bigger_u32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_u32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_u32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_u32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function bigger_u32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function bigger_u32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_s32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts32^ > p2^.tu8^; end;
function bigger_s32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts32^ > p2^.ts8^; end;
function bigger_s32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts32^ > p2^.tu16^; end;
function bigger_s32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts32^ > p2^.ts16^; end;
function bigger_s32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts32^ > p2^.tu32^; end;
function bigger_s32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts32^ > p2^.ts32^; end;
function bigger_s32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts32^ > p2^.ts64^; end;
function bigger_s32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.ts32^ > p2^.tSingle^; end;
function bigger_s32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.ts32^ > p2^.tDouble^; end;
function bigger_s32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_s32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_s32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_s32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function bigger_s32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function bigger_s32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_s64_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts64^ > p2^.tu8^; end;
function bigger_s64_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts64^ > p2^.ts8^; end;
function bigger_s64_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts64^ > p2^.tu16^; end;
function bigger_s64_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts64^ > p2^.ts16^; end;
function bigger_s64_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts64^ > p2^.tu32^; end;
function bigger_s64_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts64^ > p2^.ts32^; end;
function bigger_s64_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts64^ > p2^.ts64^; end;
function bigger_s64_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.ts64^ > p2^.tSingle^; end;
function bigger_s64_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.ts64^ > p2^.tDouble^; end;
function bigger_s64_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_s64_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_s64_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_s64_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function bigger_s64_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function bigger_s64_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_single_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tSingle^ > p2^.tu8^; end;
function bigger_single_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tSingle^ > p2^.ts8^; end;
function bigger_single_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tSingle^ > p2^.tu16^; end;
function bigger_single_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tSingle^ > p2^.ts16^; end;
function bigger_single_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tSingle^ > p2^.tu32^; end;
function bigger_single_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tSingle^ > p2^.ts32^; end;
function bigger_single_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tSingle^ > p2^.ts64^; end;
function bigger_single_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.tSingle^ > p2^.tSingle^; end;
function bigger_single_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.tSingle^ > p2^.tDouble^; end;
function bigger_single_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_single_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function bigger_single_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function bigger_single_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function bigger_single_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_single_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_double_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tDouble^ > p2^.tu8^; end;
function bigger_double_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tDouble^ > p2^.ts8^; end;
function bigger_double_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tDouble^ > p2^.tu16^; end;
function bigger_double_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tDouble^ > p2^.ts16^; end;
function bigger_double_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tDouble^ > p2^.tu32^; end;
function bigger_double_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tDouble^ > p2^.ts32^; end;
function bigger_double_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tDouble^ > p2^.ts64^; end;
function bigger_double_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.tDouble^ > p2^.tSingle^; end;
function bigger_double_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := p1^.tDouble^ > p2^.tDouble^; end;
function bigger_double_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_double_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function bigger_double_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function bigger_double_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function bigger_double_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_double_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function bigger_string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function bigger_string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := PbtString(p1^.tString^)^ > PbtString(p2^.tString^)^; end;
function bigger_string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := PbtString(p1^.tString^)^ > PbtUTF8String(p2^.tString^)^; end;
function bigger_string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := PbtString(p1^.tString^)^ > PbtWideString(p2^.tString^)^; end;
function bigger_string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := PbtString(p1^.tString^)^ > PbtPChar(p2^.tString^)^; end;
function bigger_string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_utf8string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_utf8string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_utf8string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_utf8string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_utf8string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_utf8string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_utf8string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_utf8string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function bigger_utf8string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function bigger_utf8string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := PbtUTF8String(p1^.tString^)^ > PbtString(p2^.tString^)^; end;
function bigger_utf8string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtUTF8String(p1^.tString^)^ > PbtUTF8String(p2^.tString^)^; end;
function bigger_utf8string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtUTF8String(p1^.tString^)^ > PbtWideString(p2^.tString^)^; end;
function bigger_utf8string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := PbtUTF8String(p1^.tString^)^ > PbtPChar(p2^.tString^)^; end;
function bigger_utf8string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function bigger_utf8string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function bigger_widestring_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_widestring_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_widestring_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_widestring_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_widestring_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_widestring_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_widestring_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_widestring_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function bigger_widestring_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function bigger_widestring_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := PbtWideString(p1^.tString^)^ > PbtString(p2^.tString^)^; end;
function bigger_widestring_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtWideString(p1^.tString^)^ > PbtUTF8String(p2^.tString^)^; end;
function bigger_widestring_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtWideString(p1^.tString^)^ > PbtWideString(p2^.tString^)^; end;
function bigger_widestring_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := PbtWideString(p1^.tString^)^ > PbtPChar(p2^.tString^)^; end;
function bigger_widestring_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function bigger_widestring_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function bigger_pchar_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function bigger_pchar_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function bigger_pchar_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function bigger_pchar_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function bigger_pchar_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function bigger_pchar_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function bigger_pchar_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function bigger_pchar_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function bigger_pchar_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function bigger_pchar_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := PbtPChar(p1^.tString^)^ > PbtString(p2^.tString^)^; end;
function bigger_pchar_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := PbtPChar(p1^.tString^)^ > PbtUTF8String(p2^.tString^)^; end;
function bigger_pchar_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := PbtPChar(p1^.tString^)^ > PbtWideString(p2^.tString^)^; end;
function bigger_pchar_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := PbtPChar(p1^.tString^)^ > PbtPChar(p2^.tString^)^; end;
function bigger_pchar_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_pchar_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function bigger_pointer_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_pointer_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_pointer_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function bigger_pointer_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function bigger_pointer_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function bigger_pointer_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function bigger_pointer_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function bigger_pointer_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_pointer_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_pointer_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_pointer_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function bigger_pointer_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function bigger_pointer_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_pointer_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function bigger_pointer_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_object_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function bigger_object_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function bigger_object_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_object_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_object_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_object_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_object_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function bigger_object_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_object_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_object_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function bigger_object_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function bigger_object_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function bigger_object_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function bigger_object_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function bigger_object_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function biggerequal_u8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tu8^ >= p2^.tu8^; end;
function biggerequal_u8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tu8^ >= p2^.ts8^; end;
function biggerequal_u8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu8^ >= p2^.tu16^; end;
function biggerequal_u8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu8^ >= p2^.ts16^; end;
function biggerequal_u8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu8^ >= p2^.tu32^; end;
function biggerequal_u8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu8^ >= p2^.ts32^; end;
function biggerequal_u8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu8^ >= p2^.ts64^; end;
function biggerequal_u8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := p1^.tu8^ >= p2^.tSingle^; end;
function biggerequal_u8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := p1^.tu8^ >= p2^.tDouble^; end;
function biggerequal_u8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function biggerequal_u8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_u8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_u8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function biggerequal_u8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_u8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function biggerequal_s8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.ts8^ >= p2^.tu8^; end;
function biggerequal_s8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.ts8^ >= p2^.ts8^; end;
function biggerequal_s8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts8^ >= p2^.tu16^; end;
function biggerequal_s8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts8^ >= p2^.ts16^; end;
function biggerequal_s8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts8^ >= p2^.tu32^; end;
function biggerequal_s8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts8^ >= p2^.ts32^; end;
function biggerequal_s8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts8^ >= p2^.ts64^; end;
function biggerequal_s8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := p1^.ts8^ >= p2^.tSingle^; end;
function biggerequal_s8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := p1^.ts8^ >= p2^.tDouble^; end;
function biggerequal_s8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function biggerequal_s8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_s8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_s8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function biggerequal_s8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_s8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function biggerequal_u16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu16^ >= p2^.tu8^; end;
function biggerequal_u16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu16^ >= p2^.ts8^; end;
function biggerequal_u16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu16^ >= p2^.tu16^; end;
function biggerequal_u16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu16^ >= p2^.ts16^; end;
function biggerequal_u16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu16^ >= p2^.tu32^; end;
function biggerequal_u16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu16^ >= p2^.ts32^; end;
function biggerequal_u16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu16^ >= p2^.ts64^; end;
function biggerequal_u16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tu16^ >= p2^.tSingle^; end;
function biggerequal_u16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tu16^ >= p2^.tDouble^; end;
function biggerequal_u16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_u16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_u16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_u16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function biggerequal_u16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function biggerequal_u16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_s16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts16^ >= p2^.tu8^; end;
function biggerequal_s16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts16^ >= p2^.ts8^; end;
function biggerequal_s16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts16^ >= p2^.tu16^; end;
function biggerequal_s16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts16^ >= p2^.ts16^; end;
function biggerequal_s16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts16^ >= p2^.tu32^; end;
function biggerequal_s16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts16^ >= p2^.ts32^; end;
function biggerequal_s16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts16^ >= p2^.ts64^; end;
function biggerequal_s16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.ts16^ >= p2^.tSingle^; end;
function biggerequal_s16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.ts16^ >= p2^.tDouble^; end;
function biggerequal_s16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_s16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_s16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_s16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function biggerequal_s16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function biggerequal_s16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_u32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu32^ >= p2^.tu8^; end;
function biggerequal_u32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu32^ >= p2^.ts8^; end;
function biggerequal_u32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu32^ >= p2^.tu16^; end;
function biggerequal_u32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu32^ >= p2^.ts16^; end;
function biggerequal_u32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu32^ >= p2^.tu32^; end;
function biggerequal_u32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu32^ >= p2^.ts32^; end;
function biggerequal_u32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tu32^ >= p2^.ts64^; end;
function biggerequal_u32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tu32^ >= p2^.tSingle^; end;
function biggerequal_u32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tu32^ >= p2^.tDouble^; end;
function biggerequal_u32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_u32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_u32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_u32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function biggerequal_u32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function biggerequal_u32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_s32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts32^ >= p2^.tu8^; end;
function biggerequal_s32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts32^ >= p2^.ts8^; end;
function biggerequal_s32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts32^ >= p2^.tu16^; end;
function biggerequal_s32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts32^ >= p2^.ts16^; end;
function biggerequal_s32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts32^ >= p2^.tu32^; end;
function biggerequal_s32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts32^ >= p2^.ts32^; end;
function biggerequal_s32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts32^ >= p2^.ts64^; end;
function biggerequal_s32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.ts32^ >= p2^.tSingle^; end;
function biggerequal_s32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.ts32^ >= p2^.tDouble^; end;
function biggerequal_s32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_s32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_s32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_s32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function biggerequal_s32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function biggerequal_s32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_s64_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts64^ >= p2^.tu8^; end;
function biggerequal_s64_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts64^ >= p2^.ts8^; end;
function biggerequal_s64_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts64^ >= p2^.tu16^; end;
function biggerequal_s64_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts64^ >= p2^.ts16^; end;
function biggerequal_s64_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts64^ >= p2^.tu32^; end;
function biggerequal_s64_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts64^ >= p2^.ts32^; end;
function biggerequal_s64_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.ts64^ >= p2^.ts64^; end;
function biggerequal_s64_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.ts64^ >= p2^.tSingle^; end;
function biggerequal_s64_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.ts64^ >= p2^.tDouble^; end;
function biggerequal_s64_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_s64_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_s64_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_s64_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function biggerequal_s64_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function biggerequal_s64_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_single_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := p1^.tSingle^ >= p2^.tu8^; end;
function biggerequal_single_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := p1^.tSingle^ >= p2^.ts8^; end;
function biggerequal_single_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tSingle^ >= p2^.tu16^; end;
function biggerequal_single_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tSingle^ >= p2^.ts16^; end;
function biggerequal_single_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tSingle^ >= p2^.tu32^; end;
function biggerequal_single_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tSingle^ >= p2^.ts32^; end;
function biggerequal_single_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tSingle^ >= p2^.ts64^; end;
function biggerequal_single_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := p1^.tSingle^ >= p2^.tSingle^; end;
function biggerequal_single_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := p1^.tSingle^ >= p2^.tDouble^; end;
function biggerequal_single_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_single_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_single_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_single_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function biggerequal_single_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_single_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_double_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := p1^.tDouble^ >= p2^.tu8^; end;
function biggerequal_double_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := p1^.tDouble^ >= p2^.ts8^; end;
function biggerequal_double_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tDouble^ >= p2^.tu16^; end;
function biggerequal_double_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tDouble^ >= p2^.ts16^; end;
function biggerequal_double_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tDouble^ >= p2^.tu32^; end;
function biggerequal_double_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tDouble^ >= p2^.ts32^; end;
function biggerequal_double_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := p1^.tDouble^ >= p2^.ts64^; end;
function biggerequal_double_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := p1^.tDouble^ >= p2^.tSingle^; end;
function biggerequal_double_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := p1^.tDouble^ >= p2^.tDouble^; end;
function biggerequal_double_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_double_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_double_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_double_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function biggerequal_double_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_double_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function biggerequal_string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function biggerequal_string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtString(p1^.tString^)^ >= PbtString(p2^.tString^)^; end;
function biggerequal_string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtString(p1^.tString^)^ >= PbtUTF8String(p2^.tString^)^; end;
function biggerequal_string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtString(p1^.tString^)^ >= PbtWideString(p2^.tString^)^; end;
function biggerequal_string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := PbtString(p1^.tString^)^ >= PbtPChar(p2^.tString^)^; end;
function biggerequal_string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_utf8string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_utf8string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_utf8string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_utf8string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_utf8string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_utf8string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_utf8string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_utf8string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_utf8string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_utf8string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtUTF8String(p1^.tString^)^ >= PbtString(p2^.tString^)^; end;
function biggerequal_utf8string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtUTF8String(p1^.tString^)^ >= PbtUTF8String(p2^.tString^)^; end;
function biggerequal_utf8string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtUTF8String(p1^.tString^)^ >= PbtWideString(p2^.tString^)^; end;
function biggerequal_utf8string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtUTF8String(p1^.tString^)^ >= PbtPChar(p2^.tString^)^; end;
function biggerequal_utf8string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_utf8string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_widestring_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_widestring_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_widestring_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_widestring_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_widestring_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_widestring_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_widestring_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_widestring_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_widestring_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_widestring_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtWideString(p1^.tString^)^ >= PbtString(p2^.tString^)^; end;
function biggerequal_widestring_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtWideString(p1^.tString^)^ >= PbtUTF8String(p2^.tString^)^; end;
function biggerequal_widestring_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtWideString(p1^.tString^)^ >= PbtWideString(p2^.tString^)^; end;
function biggerequal_widestring_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtWideString(p1^.tString^)^ >= PbtPChar(p2^.tString^)^; end;
function biggerequal_widestring_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_widestring_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_pchar_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function biggerequal_pchar_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function biggerequal_pchar_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function biggerequal_pchar_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function biggerequal_pchar_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function biggerequal_pchar_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function biggerequal_pchar_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function biggerequal_pchar_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function biggerequal_pchar_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function biggerequal_pchar_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := PbtPChar(p1^.tString^)^ >= PbtString(p2^.tString^)^; end;
function biggerequal_pchar_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtPChar(p1^.tString^)^ >= PbtUTF8String(p2^.tString^)^; end;
function biggerequal_pchar_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtPChar(p1^.tString^)^ >= PbtWideString(p2^.tString^)^; end;
function biggerequal_pchar_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := PbtPChar(p1^.tString^)^ >= PbtPChar(p2^.tString^)^; end;
function biggerequal_pchar_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_pchar_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function biggerequal_pointer_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_pointer_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_pointer_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function biggerequal_pointer_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function biggerequal_pointer_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function biggerequal_pointer_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function biggerequal_pointer_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function biggerequal_pointer_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_pointer_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_pointer_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_pointer_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_pointer_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_pointer_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_pointer_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_pointer_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_object_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function biggerequal_object_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function biggerequal_object_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_object_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_object_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_object_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_object_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function biggerequal_object_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_object_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_object_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_object_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_object_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_object_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function biggerequal_object_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function biggerequal_object_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function equal_u8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;              begin result := p1^.tu8^ = p2^.tu8^; end;
function equal_u8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;              begin result := p1^.tu8^ = p2^.ts8^; end;
function equal_u8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.tu8^ = p2^.tu16^; end;
function equal_u8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.tu8^ = p2^.ts16^; end;
function equal_u8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.tu8^ = p2^.tu32^; end;
function equal_u8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.tu8^ = p2^.ts32^; end;
function equal_u8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.tu8^ = p2^.ts64^; end;
function equal_u8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu8^ = p2^.tSingle^; end;
function equal_u8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu8^ = p2^.tDouble^; end;
function equal_u8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function equal_u8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_u8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_u8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := False end;
function equal_u8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_u8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function equal_s8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;              begin result := p1^.ts8^ = p2^.tu8^; end;
function equal_s8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;              begin result := p1^.ts8^ = p2^.ts8^; end;
function equal_s8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.ts8^ = p2^.tu16^; end;
function equal_s8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.ts8^ = p2^.ts16^; end;
function equal_s8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.ts8^ = p2^.tu32^; end;
function equal_s8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.ts8^ = p2^.ts32^; end;
function equal_s8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.ts8^ = p2^.ts64^; end;
function equal_s8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts8^ = p2^.tSingle^; end;
function equal_s8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts8^ = p2^.tDouble^; end;
function equal_s8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function equal_s8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_s8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_s8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := False end;
function equal_s8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_s8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function equal_u16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.tu16^ = p2^.tu8^; end;
function equal_u16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.tu16^ = p2^.ts8^; end;
function equal_u16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu16^ = p2^.tu16^; end;
function equal_u16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu16^ = p2^.ts16^; end;
function equal_u16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu16^ = p2^.tu32^; end;
function equal_u16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu16^ = p2^.ts32^; end;
function equal_u16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu16^ = p2^.ts64^; end;
function equal_u16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tu16^ = p2^.tSingle^; end;
function equal_u16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tu16^ = p2^.tDouble^; end;
function equal_u16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_u16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_u16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_u16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function equal_u16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function equal_u16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_s16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.ts16^ = p2^.tu8^; end;
function equal_s16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.ts16^ = p2^.ts8^; end;
function equal_s16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts16^ = p2^.tu16^; end;
function equal_s16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts16^ = p2^.ts16^; end;
function equal_s16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts16^ = p2^.tu32^; end;
function equal_s16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts16^ = p2^.ts32^; end;
function equal_s16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts16^ = p2^.ts64^; end;
function equal_s16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.ts16^ = p2^.tSingle^; end;
function equal_s16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.ts16^ = p2^.tDouble^; end;
function equal_s16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_s16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_s16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_s16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function equal_s16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function equal_s16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_u32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.tu32^ = p2^.tu8^; end;
function equal_u32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.tu32^ = p2^.ts8^; end;
function equal_u32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu32^ = p2^.tu16^; end;
function equal_u32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu32^ = p2^.ts16^; end;
function equal_u32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu32^ = p2^.tu32^; end;
function equal_u32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu32^ = p2^.ts32^; end;
function equal_u32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu32^ = p2^.ts64^; end;
function equal_u32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tu32^ = p2^.tSingle^; end;
function equal_u32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tu32^ = p2^.tDouble^; end;
function equal_u32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_u32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_u32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_u32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function equal_u32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function equal_u32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_s32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.ts32^ = p2^.tu8^; end;
function equal_s32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.ts32^ = p2^.ts8^; end;
function equal_s32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts32^ = p2^.tu16^; end;
function equal_s32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts32^ = p2^.ts16^; end;
function equal_s32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts32^ = p2^.tu32^; end;
function equal_s32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts32^ = p2^.ts32^; end;
function equal_s32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts32^ = p2^.ts64^; end;
function equal_s32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.ts32^ = p2^.tSingle^; end;
function equal_s32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.ts32^ = p2^.tDouble^; end;
function equal_s32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_s32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_s32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_s32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function equal_s32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function equal_s32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_s64_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.ts64^ = p2^.tu8^; end;
function equal_s64_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;             begin result := p1^.ts64^ = p2^.ts8^; end;
function equal_s64_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts64^ = p2^.tu16^; end;
function equal_s64_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts64^ = p2^.ts16^; end;
function equal_s64_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts64^ = p2^.tu32^; end;
function equal_s64_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts64^ = p2^.ts32^; end;
function equal_s64_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts64^ = p2^.ts64^; end;
function equal_s64_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.ts64^ = p2^.tSingle^; end;
function equal_s64_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.ts64^ = p2^.tDouble^; end;
function equal_s64_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_s64_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_s64_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_s64_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function equal_s64_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function equal_s64_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_single_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tSingle^ = p2^.tu8^; end;
function equal_single_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tSingle^ = p2^.ts8^; end;
function equal_single_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tSingle^ = p2^.tu16^; end;
function equal_single_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tSingle^ = p2^.ts16^; end;
function equal_single_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tSingle^ = p2^.tu32^; end;
function equal_single_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tSingle^ = p2^.ts32^; end;
function equal_single_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tSingle^ = p2^.ts64^; end;
function equal_single_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tSingle^ = p2^.tSingle^; end;
function equal_single_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tSingle^ = p2^.tDouble^; end;
function equal_single_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_single_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function equal_single_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function equal_single_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function equal_single_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_single_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_double_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tDouble^ = p2^.tu8^; end;
function equal_double_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tDouble^ = p2^.ts8^; end;
function equal_double_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tDouble^ = p2^.tu16^; end;
function equal_double_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tDouble^ = p2^.ts16^; end;
function equal_double_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tDouble^ = p2^.tu32^; end;
function equal_double_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tDouble^ = p2^.ts32^; end;
function equal_double_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := p1^.tDouble^ = p2^.ts64^; end;
function equal_double_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tDouble^ = p2^.tSingle^; end;
function equal_double_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := p1^.tDouble^ = p2^.tDouble^; end;
function equal_double_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_double_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function equal_double_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function equal_double_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function equal_double_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_double_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function equal_string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function equal_string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := PbtString(p1^.tString^)^ = PbtString(p2^.tString^)^; end;
function equal_string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := PbtString(p1^.tString^)^ = PbtUTF8String(p2^.tString^)^; end;
function equal_string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := PbtString(p1^.tString^)^ = PbtWideString(p2^.tString^)^; end;
function equal_string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := PbtString(p1^.tString^)^ = PbtPChar(p2^.tString^)^; end;
function equal_string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_utf8string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_utf8string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_utf8string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_utf8string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_utf8string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_utf8string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_utf8string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_utf8string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function equal_utf8string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function equal_utf8string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := PbtUTF8String(p1^.tString^)^ = PbtString(p2^.tString^)^; end;
function equal_utf8string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtUTF8String(p1^.tString^)^ = PbtUTF8String(p2^.tString^)^; end;
function equal_utf8string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtUTF8String(p1^.tString^)^ = PbtWideString(p2^.tString^)^; end;
function equal_utf8string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := PbtUTF8String(p1^.tString^)^ = PbtPChar(p2^.tString^)^; end;
function equal_utf8string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function equal_utf8string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function equal_widestring_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_widestring_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_widestring_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_widestring_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_widestring_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_widestring_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_widestring_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_widestring_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function equal_widestring_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function equal_widestring_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := PbtWideString(p1^.tString^)^ = PbtString(p2^.tString^)^; end;
function equal_widestring_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtWideString(p1^.tString^)^ = PbtUTF8String(p2^.tString^)^; end;
function equal_widestring_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtWideString(p1^.tString^)^ = PbtWideString(p2^.tString^)^; end;
function equal_widestring_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := PbtWideString(p1^.tString^)^ = PbtPChar(p2^.tString^)^; end;
function equal_widestring_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function equal_widestring_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function equal_pchar_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := False end;
function equal_pchar_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := False end;
function equal_pchar_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function equal_pchar_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function equal_pchar_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function equal_pchar_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function equal_pchar_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function equal_pchar_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function equal_pchar_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function equal_pchar_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := PbtPChar(p1^.tString^)^ = PbtString(p2^.tString^)^; end;
function equal_pchar_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := PbtPChar(p1^.tString^)^ = PbtUTF8String(p2^.tString^)^; end;
function equal_pchar_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := PbtPChar(p1^.tString^)^ = PbtWideString(p2^.tString^)^; end;
function equal_pchar_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := PbtPChar(p1^.tString^)^ = PbtPChar(p2^.tString^)^; end;
function equal_pchar_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_pchar_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function equal_pointer_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_pointer_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_pointer_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function equal_pointer_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function equal_pointer_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function equal_pointer_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function equal_pointer_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function equal_pointer_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_pointer_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_pointer_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function equal_pointer_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function equal_pointer_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := False end;
function equal_pointer_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_pointer_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := PPointer(p1^.tPointer)^ = PPointer(p2^.tPointer)^; end;
function equal_pointer_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := PPointer(p1^.tPointer)^ = PPointer(p2^.tPointer)^; end;
function equal_object_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function equal_object_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := False end;
function equal_object_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_object_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_object_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_object_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_object_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function equal_object_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_object_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_object_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function equal_object_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function equal_object_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := False end;
function equal_object_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function equal_object_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := PPointer(p1^.tPointer)^ = PPointer(p2^.tPointer)^; end;
function equal_object_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := PPointer(p1^.tPointer)^ = PPointer(p2^.tPointer)^; end;
function unequal_u8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu8^ <> p2^.tu8^; end;
function unequal_u8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.tu8^ <> p2^.ts8^; end;
function unequal_u8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu8^ <> p2^.tu16^; end;
function unequal_u8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu8^ <> p2^.ts16^; end;
function unequal_u8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu8^ <> p2^.tu32^; end;
function unequal_u8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu8^ <> p2^.ts32^; end;
function unequal_u8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu8^ <> p2^.ts64^; end;
function unequal_u8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tu8^ <> p2^.tSingle^; end;
function unequal_u8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tu8^ <> p2^.tDouble^; end;
function unequal_u8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function unequal_u8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_u8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_u8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function unequal_u8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_u8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function unequal_s8_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts8^ <> p2^.tu8^; end;
function unequal_s8_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;            begin result := p1^.ts8^ <> p2^.ts8^; end;
function unequal_s8_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts8^ <> p2^.tu16^; end;
function unequal_s8_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts8^ <> p2^.ts16^; end;
function unequal_s8_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts8^ <> p2^.tu32^; end;
function unequal_s8_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts8^ <> p2^.ts32^; end;
function unequal_s8_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts8^ <> p2^.ts64^; end;
function unequal_s8_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.ts8^ <> p2^.tSingle^; end;
function unequal_s8_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.ts8^ <> p2^.tDouble^; end;
function unequal_s8_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function unequal_s8_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_s8_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_s8_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function unequal_s8_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_s8_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function unequal_u16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu16^ <> p2^.tu8^; end;
function unequal_u16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu16^ <> p2^.ts8^; end;
function unequal_u16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu16^ <> p2^.tu16^; end;
function unequal_u16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu16^ <> p2^.ts16^; end;
function unequal_u16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu16^ <> p2^.tu32^; end;
function unequal_u16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu16^ <> p2^.ts32^; end;
function unequal_u16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu16^ <> p2^.ts64^; end;
function unequal_u16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu16^ <> p2^.tSingle^; end;
function unequal_u16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu16^ <> p2^.tDouble^; end;
function unequal_u16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_u16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_u16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_u16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function unequal_u16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function unequal_u16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_s16_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts16^ <> p2^.tu8^; end;
function unequal_s16_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts16^ <> p2^.ts8^; end;
function unequal_s16_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts16^ <> p2^.tu16^; end;
function unequal_s16_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts16^ <> p2^.ts16^; end;
function unequal_s16_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts16^ <> p2^.tu32^; end;
function unequal_s16_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts16^ <> p2^.ts32^; end;
function unequal_s16_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts16^ <> p2^.ts64^; end;
function unequal_s16_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts16^ <> p2^.tSingle^; end;
function unequal_s16_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts16^ <> p2^.tDouble^; end;
function unequal_s16_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_s16_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_s16_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_s16_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function unequal_s16_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function unequal_s16_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_u32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu32^ <> p2^.tu8^; end;
function unequal_u32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.tu32^ <> p2^.ts8^; end;
function unequal_u32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu32^ <> p2^.tu16^; end;
function unequal_u32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu32^ <> p2^.ts16^; end;
function unequal_u32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu32^ <> p2^.tu32^; end;
function unequal_u32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu32^ <> p2^.ts32^; end;
function unequal_u32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.tu32^ <> p2^.ts64^; end;
function unequal_u32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu32^ <> p2^.tSingle^; end;
function unequal_u32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tu32^ <> p2^.tDouble^; end;
function unequal_u32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_u32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_u32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_u32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function unequal_u32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function unequal_u32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_s32_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts32^ <> p2^.tu8^; end;
function unequal_s32_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts32^ <> p2^.ts8^; end;
function unequal_s32_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts32^ <> p2^.tu16^; end;
function unequal_s32_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts32^ <> p2^.ts16^; end;
function unequal_s32_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts32^ <> p2^.tu32^; end;
function unequal_s32_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts32^ <> p2^.ts32^; end;
function unequal_s32_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts32^ <> p2^.ts64^; end;
function unequal_s32_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts32^ <> p2^.tSingle^; end;
function unequal_s32_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts32^ <> p2^.tDouble^; end;
function unequal_s32_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_s32_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_s32_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_s32_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function unequal_s32_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function unequal_s32_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_s64_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts64^ <> p2^.tu8^; end;
function unequal_s64_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;           begin result := p1^.ts64^ <> p2^.ts8^; end;
function unequal_s64_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts64^ <> p2^.tu16^; end;
function unequal_s64_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts64^ <> p2^.ts16^; end;
function unequal_s64_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts64^ <> p2^.tu32^; end;
function unequal_s64_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts64^ <> p2^.ts32^; end;
function unequal_s64_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;          begin result := p1^.ts64^ <> p2^.ts64^; end;
function unequal_s64_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts64^ <> p2^.tSingle^; end;
function unequal_s64_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.ts64^ <> p2^.tDouble^; end;
function unequal_s64_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_s64_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_s64_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_s64_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function unequal_s64_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function unequal_s64_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_single_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tSingle^ <> p2^.tu8^; end;
function unequal_single_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tSingle^ <> p2^.ts8^; end;
function unequal_single_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tSingle^ <> p2^.tu16^; end;
function unequal_single_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tSingle^ <> p2^.ts16^; end;
function unequal_single_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tSingle^ <> p2^.tu32^; end;
function unequal_single_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tSingle^ <> p2^.ts32^; end;
function unequal_single_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tSingle^ <> p2^.ts64^; end;
function unequal_single_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := p1^.tSingle^ <> p2^.tSingle^; end;
function unequal_single_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := p1^.tSingle^ <> p2^.tDouble^; end;
function unequal_single_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_single_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function unequal_single_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function unequal_single_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function unequal_single_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_single_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_double_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tDouble^ <> p2^.tu8^; end;
function unequal_double_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := p1^.tDouble^ <> p2^.ts8^; end;
function unequal_double_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tDouble^ <> p2^.tu16^; end;
function unequal_double_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tDouble^ <> p2^.ts16^; end;
function unequal_double_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tDouble^ <> p2^.tu32^; end;
function unequal_double_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tDouble^ <> p2^.ts32^; end;
function unequal_double_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := p1^.tDouble^ <> p2^.ts64^; end;
function unequal_double_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := p1^.tDouble^ <> p2^.tSingle^; end;
function unequal_double_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := p1^.tDouble^ <> p2^.tDouble^; end;
function unequal_double_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_double_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function unequal_double_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function unequal_double_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function unequal_double_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_double_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function unequal_string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function unequal_string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := PbtString(p1^.tString^)^ <> PbtString(p2^.tString^)^; end;
function unequal_string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtString(p1^.tString^)^ <> PbtUTF8String(p2^.tString^)^; end;
function unequal_string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtString(p1^.tString^)^ <> PbtWideString(p2^.tString^)^; end;
function unequal_string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := PbtString(p1^.tString^)^ <> PbtPChar(p2^.tString^)^; end;
function unequal_string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_utf8string_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_utf8string_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_utf8string_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_utf8string_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_utf8string_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_utf8string_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_utf8string_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_utf8string_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function unequal_utf8string_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function unequal_utf8string_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtUTF8String(p1^.tString^)^ <> PbtString(p2^.tString^)^; end;
function unequal_utf8string_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtUTF8String(p1^.tString^)^ <> PbtUTF8String(p2^.tString^)^; end;
function unequal_utf8string_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtUTF8String(p1^.tString^)^ <> PbtWideString(p2^.tString^)^; end;
function unequal_utf8string_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := PbtUTF8String(p1^.tString^)^ <> PbtPChar(p2^.tString^)^; end;
function unequal_utf8string_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function unequal_utf8string_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function unequal_widestring_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_widestring_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_widestring_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_widestring_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_widestring_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_widestring_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_widestring_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_widestring_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function unequal_widestring_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function unequal_widestring_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtWideString(p1^.tString^)^ <> PbtString(p2^.tString^)^; end;
function unequal_widestring_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtWideString(p1^.tString^)^ <> PbtUTF8String(p2^.tString^)^; end;
function unequal_widestring_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := PbtWideString(p1^.tString^)^ <> PbtWideString(p2^.tString^)^; end;
function unequal_widestring_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := PbtWideString(p1^.tString^)^ <> PbtPChar(p2^.tString^)^; end;
function unequal_widestring_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function unequal_widestring_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function unequal_pchar_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function unequal_pchar_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;         begin result := False end;
function unequal_pchar_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function unequal_pchar_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function unequal_pchar_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function unequal_pchar_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function unequal_pchar_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function unequal_pchar_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function unequal_pchar_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function unequal_pchar_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := PbtPChar(p1^.tString^)^ <> PbtString(p2^.tString^)^; end;
function unequal_pchar_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := PbtPChar(p1^.tString^)^ <> PbtUTF8String(p2^.tString^)^; end;
function unequal_pchar_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean; begin result := PbtPChar(p1^.tString^)^ <> PbtWideString(p2^.tString^)^; end;
function unequal_pchar_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := PbtPChar(p1^.tString^)^ <> PbtPChar(p2^.tString^)^; end;
function unequal_pchar_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_pchar_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function unequal_pointer_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_pointer_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_pointer_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function unequal_pointer_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function unequal_pointer_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function unequal_pointer_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function unequal_pointer_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;      begin result := False end;
function unequal_pointer_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_pointer_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_pointer_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := False end;
function unequal_pointer_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function unequal_pointer_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function unequal_pointer_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_pointer_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;  begin result := PPointer(p1^.tPointer)^ <> PPointer(p2^.tPointer)^; end;
function unequal_pointer_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := PPointer(p1^.tPointer)^ <> PPointer(p2^.tPointer)^; end;
function unequal_object_u8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function unequal_object_s8(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;        begin result := False end;
function unequal_object_u16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_object_s16(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_object_u32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_object_s32(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_object_s64(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;       begin result := False end;
function unequal_object_single(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_object_double(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_object_string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := False end;
function unequal_object_utf8string(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function unequal_object_widestring(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;begin result := False end;
function unequal_object_pchar(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;     begin result := False end;
function unequal_object_pointer(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;   begin result := PPointer(p1^.tPointer)^ <> PPointer(p2^.tPointer)^; end;
function unequal_object_object(p1, p2: PSE2VarData; FVarHelp: TSE2VarHelper): boolean;    begin result := PPointer(p1^.tPointer)^ <> PPointer(p2^.tPointer)^; end;


procedure InitTable_add;
begin
  mTable_add[1, 1] := @add_u8_u8;
  mTable_add[1, 2] := @add_u8_s8;
  mTable_add[1, 3] := @add_u8_u16;
  mTable_add[1, 4] := @add_u8_s16;
  mTable_add[1, 5] := @add_u8_u32;
  mTable_add[1, 6] := @add_u8_s32;
  mTable_add[1, 7] := @add_u8_s64;
  mTable_add[1, 8] := @add_u8_single;
  mTable_add[1, 9] := @add_u8_double;
  mTable_add[1, 10] := @add_u8_string;
  mTable_add[1, 11] := @add_u8_utf8string;
  mTable_add[1, 12] := @add_u8_widestring;
  mTable_add[1, 13] := @add_u8_pchar;
  mTable_add[1, 14] := @add_u8_pointer;
  mTable_add[1, 15] := @add_u8_object;
  mTable_add[2, 1] := @add_s8_u8;
  mTable_add[2, 2] := @add_s8_s8;
  mTable_add[2, 3] := @add_s8_u16;
  mTable_add[2, 4] := @add_s8_s16;
  mTable_add[2, 5] := @add_s8_u32;
  mTable_add[2, 6] := @add_s8_s32;
  mTable_add[2, 7] := @add_s8_s64;
  mTable_add[2, 8] := @add_s8_single;
  mTable_add[2, 9] := @add_s8_double;
  mTable_add[2, 10] := @add_s8_string;
  mTable_add[2, 11] := @add_s8_utf8string;
  mTable_add[2, 12] := @add_s8_widestring;
  mTable_add[2, 13] := @add_s8_pchar;
  mTable_add[2, 14] := @add_s8_pointer;
  mTable_add[2, 15] := @add_s8_object;
  mTable_add[3, 1] := @add_u16_u8;
  mTable_add[3, 2] := @add_u16_s8;
  mTable_add[3, 3] := @add_u16_u16;
  mTable_add[3, 4] := @add_u16_s16;
  mTable_add[3, 5] := @add_u16_u32;
  mTable_add[3, 6] := @add_u16_s32;
  mTable_add[3, 7] := @add_u16_s64;
  mTable_add[3, 8] := @add_u16_single;
  mTable_add[3, 9] := @add_u16_double;
  mTable_add[3, 10] := @add_u16_string;
  mTable_add[3, 11] := @add_u16_utf8string;
  mTable_add[3, 12] := @add_u16_widestring;
  mTable_add[3, 13] := @add_u16_pchar;
  mTable_add[3, 14] := @add_u16_pointer;
  mTable_add[3, 15] := @add_u16_object;
  mTable_add[4, 1] := @add_s16_u8;
  mTable_add[4, 2] := @add_s16_s8;
  mTable_add[4, 3] := @add_s16_u16;
  mTable_add[4, 4] := @add_s16_s16;
  mTable_add[4, 5] := @add_s16_u32;
  mTable_add[4, 6] := @add_s16_s32;
  mTable_add[4, 7] := @add_s16_s64;
  mTable_add[4, 8] := @add_s16_single;
  mTable_add[4, 9] := @add_s16_double;
  mTable_add[4, 10] := @add_s16_string;
  mTable_add[4, 11] := @add_s16_utf8string;
  mTable_add[4, 12] := @add_s16_widestring;
  mTable_add[4, 13] := @add_s16_pchar;
  mTable_add[4, 14] := @add_s16_pointer;
  mTable_add[4, 15] := @add_s16_object;
  mTable_add[5, 1] := @add_u32_u8;
  mTable_add[5, 2] := @add_u32_s8;
  mTable_add[5, 3] := @add_u32_u16;
  mTable_add[5, 4] := @add_u32_s16;
  mTable_add[5, 5] := @add_u32_u32;
  mTable_add[5, 6] := @add_u32_s32;
  mTable_add[5, 7] := @add_u32_s64;
  mTable_add[5, 8] := @add_u32_single;
  mTable_add[5, 9] := @add_u32_double;
  mTable_add[5, 10] := @add_u32_string;
  mTable_add[5, 11] := @add_u32_utf8string;
  mTable_add[5, 12] := @add_u32_widestring;
  mTable_add[5, 13] := @add_u32_pchar;
  mTable_add[5, 14] := @add_u32_pointer;
  mTable_add[5, 15] := @add_u32_object;
  mTable_add[6, 1] := @add_s32_u8;
  mTable_add[6, 2] := @add_s32_s8;
  mTable_add[6, 3] := @add_s32_u16;
  mTable_add[6, 4] := @add_s32_s16;
  mTable_add[6, 5] := @add_s32_u32;
  mTable_add[6, 6] := @add_s32_s32;
  mTable_add[6, 7] := @add_s32_s64;
  mTable_add[6, 8] := @add_s32_single;
  mTable_add[6, 9] := @add_s32_double;
  mTable_add[6, 10] := @add_s32_string;
  mTable_add[6, 11] := @add_s32_utf8string;
  mTable_add[6, 12] := @add_s32_widestring;
  mTable_add[6, 13] := @add_s32_pchar;
  mTable_add[6, 14] := @add_s32_pointer;
  mTable_add[6, 15] := @add_s32_object;
  mTable_add[7, 1] := @add_s64_u8;
  mTable_add[7, 2] := @add_s64_s8;
  mTable_add[7, 3] := @add_s64_u16;
  mTable_add[7, 4] := @add_s64_s16;
  mTable_add[7, 5] := @add_s64_u32;
  mTable_add[7, 6] := @add_s64_s32;
  mTable_add[7, 7] := @add_s64_s64;
  mTable_add[7, 8] := @add_s64_single;
  mTable_add[7, 9] := @add_s64_double;
  mTable_add[7, 10] := @add_s64_string;
  mTable_add[7, 11] := @add_s64_utf8string;
  mTable_add[7, 12] := @add_s64_widestring;
  mTable_add[7, 13] := @add_s64_pchar;
  mTable_add[7, 14] := @add_s64_pointer;
  mTable_add[7, 15] := @add_s64_object;
  mTable_add[8, 1] := @add_single_u8;
  mTable_add[8, 2] := @add_single_s8;
  mTable_add[8, 3] := @add_single_u16;
  mTable_add[8, 4] := @add_single_s16;
  mTable_add[8, 5] := @add_single_u32;
  mTable_add[8, 6] := @add_single_s32;
  mTable_add[8, 7] := @add_single_s64;
  mTable_add[8, 8] := @add_single_single;
  mTable_add[8, 9] := @add_single_double;
  mTable_add[8, 10] := @add_single_string;
  mTable_add[8, 11] := @add_single_utf8string;
  mTable_add[8, 12] := @add_single_widestring;
  mTable_add[8, 13] := @add_single_pchar;
  mTable_add[8, 14] := @add_single_pointer;
  mTable_add[8, 15] := @add_single_object;
  mTable_add[9, 1] := @add_double_u8;
  mTable_add[9, 2] := @add_double_s8;
  mTable_add[9, 3] := @add_double_u16;
  mTable_add[9, 4] := @add_double_s16;
  mTable_add[9, 5] := @add_double_u32;
  mTable_add[9, 6] := @add_double_s32;
  mTable_add[9, 7] := @add_double_s64;
  mTable_add[9, 8] := @add_double_single;
  mTable_add[9, 9] := @add_double_double;
  mTable_add[9, 10] := @add_double_string;
  mTable_add[9, 11] := @add_double_utf8string;
  mTable_add[9, 12] := @add_double_widestring;
  mTable_add[9, 13] := @add_double_pchar;
  mTable_add[9, 14] := @add_double_pointer;
  mTable_add[9, 15] := @add_double_object;
  mTable_add[10, 1] := @add_string_u8;
  mTable_add[10, 2] := @add_string_s8;
  mTable_add[10, 3] := @add_string_u16;
  mTable_add[10, 4] := @add_string_s16;
  mTable_add[10, 5] := @add_string_u32;
  mTable_add[10, 6] := @add_string_s32;
  mTable_add[10, 7] := @add_string_s64;
  mTable_add[10, 8] := @add_string_single;
  mTable_add[10, 9] := @add_string_double;
  mTable_add[10, 10] := @add_string_string;
  mTable_add[10, 11] := @add_string_utf8string;
  mTable_add[10, 12] := @add_string_widestring;
  mTable_add[10, 13] := @add_string_pchar;
  mTable_add[10, 14] := @add_string_pointer;
  mTable_add[10, 15] := @add_string_object;
  mTable_add[11, 1] := @add_utf8string_u8;
  mTable_add[11, 2] := @add_utf8string_s8;
  mTable_add[11, 3] := @add_utf8string_u16;
  mTable_add[11, 4] := @add_utf8string_s16;
  mTable_add[11, 5] := @add_utf8string_u32;
  mTable_add[11, 6] := @add_utf8string_s32;
  mTable_add[11, 7] := @add_utf8string_s64;
  mTable_add[11, 8] := @add_utf8string_single;
  mTable_add[11, 9] := @add_utf8string_double;
  mTable_add[11, 10] := @add_utf8string_string;
  mTable_add[11, 11] := @add_utf8string_utf8string;
  mTable_add[11, 12] := @add_utf8string_widestring;
  mTable_add[11, 13] := @add_utf8string_pchar;
  mTable_add[11, 14] := @add_utf8string_pointer;
  mTable_add[11, 15] := @add_utf8string_object;
  mTable_add[12, 1] := @add_widestring_u8;
  mTable_add[12, 2] := @add_widestring_s8;
  mTable_add[12, 3] := @add_widestring_u16;
  mTable_add[12, 4] := @add_widestring_s16;
  mTable_add[12, 5] := @add_widestring_u32;
  mTable_add[12, 6] := @add_widestring_s32;
  mTable_add[12, 7] := @add_widestring_s64;
  mTable_add[12, 8] := @add_widestring_single;
  mTable_add[12, 9] := @add_widestring_double;
  mTable_add[12, 10] := @add_widestring_string;
  mTable_add[12, 11] := @add_widestring_utf8string;
  mTable_add[12, 12] := @add_widestring_widestring;
  mTable_add[12, 13] := @add_widestring_pchar;
  mTable_add[12, 14] := @add_widestring_pointer;
  mTable_add[12, 15] := @add_widestring_object;
  mTable_add[13, 1] := @add_pchar_u8;
  mTable_add[13, 2] := @add_pchar_s8;
  mTable_add[13, 3] := @add_pchar_u16;
  mTable_add[13, 4] := @add_pchar_s16;
  mTable_add[13, 5] := @add_pchar_u32;
  mTable_add[13, 6] := @add_pchar_s32;
  mTable_add[13, 7] := @add_pchar_s64;
  mTable_add[13, 8] := @add_pchar_single;
  mTable_add[13, 9] := @add_pchar_double;
  mTable_add[13, 10] := @add_pchar_string;
  mTable_add[13, 11] := @add_pchar_utf8string;
  mTable_add[13, 12] := @add_pchar_widestring;
  mTable_add[13, 13] := @add_pchar_pchar;
  mTable_add[13, 14] := @add_pchar_pointer;
  mTable_add[13, 15] := @add_pchar_object;
  mTable_add[14, 1] := @add_pointer_u8;
  mTable_add[14, 2] := @add_pointer_s8;
  mTable_add[14, 3] := @add_pointer_u16;
  mTable_add[14, 4] := @add_pointer_s16;
  mTable_add[14, 5] := @add_pointer_u32;
  mTable_add[14, 6] := @add_pointer_s32;
  mTable_add[14, 7] := @add_pointer_s64;
  mTable_add[14, 8] := @add_pointer_single;
  mTable_add[14, 9] := @add_pointer_double;
  mTable_add[14, 10] := @add_pointer_string;
  mTable_add[14, 11] := @add_pointer_utf8string;
  mTable_add[14, 12] := @add_pointer_widestring;
  mTable_add[14, 13] := @add_pointer_pchar;
  mTable_add[14, 14] := @add_pointer_pointer;
  mTable_add[14, 15] := @add_pointer_object;
  mTable_add[15, 1] := @add_object_u8;
  mTable_add[15, 2] := @add_object_s8;
  mTable_add[15, 3] := @add_object_u16;
  mTable_add[15, 4] := @add_object_s16;
  mTable_add[15, 5] := @add_object_u32;
  mTable_add[15, 6] := @add_object_s32;
  mTable_add[15, 7] := @add_object_s64;
  mTable_add[15, 8] := @add_object_single;
  mTable_add[15, 9] := @add_object_double;
  mTable_add[15, 10] := @add_object_string;
  mTable_add[15, 11] := @add_object_utf8string;
  mTable_add[15, 12] := @add_object_widestring;
  mTable_add[15, 13] := @add_object_pchar;
  mTable_add[15, 14] := @add_object_pointer;
  mTable_add[15, 15] := @add_object_object;
end;

procedure InitTable_sub;
begin
  mTable_sub[1, 1] := @sub_u8_u8;
  mTable_sub[1, 2] := @sub_u8_s8;
  mTable_sub[1, 3] := @sub_u8_u16;
  mTable_sub[1, 4] := @sub_u8_s16;
  mTable_sub[1, 5] := @sub_u8_u32;
  mTable_sub[1, 6] := @sub_u8_s32;
  mTable_sub[1, 7] := @sub_u8_s64;
  mTable_sub[1, 8] := @sub_u8_single;
  mTable_sub[1, 9] := @sub_u8_double;
  mTable_sub[1, 10] := @sub_u8_string;
  mTable_sub[1, 11] := @sub_u8_utf8string;
  mTable_sub[1, 12] := @sub_u8_widestring;
  mTable_sub[1, 13] := @sub_u8_pchar;
  mTable_sub[1, 14] := @sub_u8_pointer;
  mTable_sub[1, 15] := @sub_u8_object;
  mTable_sub[2, 1] := @sub_s8_u8;
  mTable_sub[2, 2] := @sub_s8_s8;
  mTable_sub[2, 3] := @sub_s8_u16;
  mTable_sub[2, 4] := @sub_s8_s16;
  mTable_sub[2, 5] := @sub_s8_u32;
  mTable_sub[2, 6] := @sub_s8_s32;
  mTable_sub[2, 7] := @sub_s8_s64;
  mTable_sub[2, 8] := @sub_s8_single;
  mTable_sub[2, 9] := @sub_s8_double;
  mTable_sub[2, 10] := @sub_s8_string;
  mTable_sub[2, 11] := @sub_s8_utf8string;
  mTable_sub[2, 12] := @sub_s8_widestring;
  mTable_sub[2, 13] := @sub_s8_pchar;
  mTable_sub[2, 14] := @sub_s8_pointer;
  mTable_sub[2, 15] := @sub_s8_object;
  mTable_sub[3, 1] := @sub_u16_u8;
  mTable_sub[3, 2] := @sub_u16_s8;
  mTable_sub[3, 3] := @sub_u16_u16;
  mTable_sub[3, 4] := @sub_u16_s16;
  mTable_sub[3, 5] := @sub_u16_u32;
  mTable_sub[3, 6] := @sub_u16_s32;
  mTable_sub[3, 7] := @sub_u16_s64;
  mTable_sub[3, 8] := @sub_u16_single;
  mTable_sub[3, 9] := @sub_u16_double;
  mTable_sub[3, 10] := @sub_u16_string;
  mTable_sub[3, 11] := @sub_u16_utf8string;
  mTable_sub[3, 12] := @sub_u16_widestring;
  mTable_sub[3, 13] := @sub_u16_pchar;
  mTable_sub[3, 14] := @sub_u16_pointer;
  mTable_sub[3, 15] := @sub_u16_object;
  mTable_sub[4, 1] := @sub_s16_u8;
  mTable_sub[4, 2] := @sub_s16_s8;
  mTable_sub[4, 3] := @sub_s16_u16;
  mTable_sub[4, 4] := @sub_s16_s16;
  mTable_sub[4, 5] := @sub_s16_u32;
  mTable_sub[4, 6] := @sub_s16_s32;
  mTable_sub[4, 7] := @sub_s16_s64;
  mTable_sub[4, 8] := @sub_s16_single;
  mTable_sub[4, 9] := @sub_s16_double;
  mTable_sub[4, 10] := @sub_s16_string;
  mTable_sub[4, 11] := @sub_s16_utf8string;
  mTable_sub[4, 12] := @sub_s16_widestring;
  mTable_sub[4, 13] := @sub_s16_pchar;
  mTable_sub[4, 14] := @sub_s16_pointer;
  mTable_sub[4, 15] := @sub_s16_object;
  mTable_sub[5, 1] := @sub_u32_u8;
  mTable_sub[5, 2] := @sub_u32_s8;
  mTable_sub[5, 3] := @sub_u32_u16;
  mTable_sub[5, 4] := @sub_u32_s16;
  mTable_sub[5, 5] := @sub_u32_u32;
  mTable_sub[5, 6] := @sub_u32_s32;
  mTable_sub[5, 7] := @sub_u32_s64;
  mTable_sub[5, 8] := @sub_u32_single;
  mTable_sub[5, 9] := @sub_u32_double;
  mTable_sub[5, 10] := @sub_u32_string;
  mTable_sub[5, 11] := @sub_u32_utf8string;
  mTable_sub[5, 12] := @sub_u32_widestring;
  mTable_sub[5, 13] := @sub_u32_pchar;
  mTable_sub[5, 14] := @sub_u32_pointer;
  mTable_sub[5, 15] := @sub_u32_object;
  mTable_sub[6, 1] := @sub_s32_u8;
  mTable_sub[6, 2] := @sub_s32_s8;
  mTable_sub[6, 3] := @sub_s32_u16;
  mTable_sub[6, 4] := @sub_s32_s16;
  mTable_sub[6, 5] := @sub_s32_u32;
  mTable_sub[6, 6] := @sub_s32_s32;
  mTable_sub[6, 7] := @sub_s32_s64;
  mTable_sub[6, 8] := @sub_s32_single;
  mTable_sub[6, 9] := @sub_s32_double;
  mTable_sub[6, 10] := @sub_s32_string;
  mTable_sub[6, 11] := @sub_s32_utf8string;
  mTable_sub[6, 12] := @sub_s32_widestring;
  mTable_sub[6, 13] := @sub_s32_pchar;
  mTable_sub[6, 14] := @sub_s32_pointer;
  mTable_sub[6, 15] := @sub_s32_object;
  mTable_sub[7, 1] := @sub_s64_u8;
  mTable_sub[7, 2] := @sub_s64_s8;
  mTable_sub[7, 3] := @sub_s64_u16;
  mTable_sub[7, 4] := @sub_s64_s16;
  mTable_sub[7, 5] := @sub_s64_u32;
  mTable_sub[7, 6] := @sub_s64_s32;
  mTable_sub[7, 7] := @sub_s64_s64;
  mTable_sub[7, 8] := @sub_s64_single;
  mTable_sub[7, 9] := @sub_s64_double;
  mTable_sub[7, 10] := @sub_s64_string;
  mTable_sub[7, 11] := @sub_s64_utf8string;
  mTable_sub[7, 12] := @sub_s64_widestring;
  mTable_sub[7, 13] := @sub_s64_pchar;
  mTable_sub[7, 14] := @sub_s64_pointer;
  mTable_sub[7, 15] := @sub_s64_object;
  mTable_sub[8, 1] := @sub_single_u8;
  mTable_sub[8, 2] := @sub_single_s8;
  mTable_sub[8, 3] := @sub_single_u16;
  mTable_sub[8, 4] := @sub_single_s16;
  mTable_sub[8, 5] := @sub_single_u32;
  mTable_sub[8, 6] := @sub_single_s32;
  mTable_sub[8, 7] := @sub_single_s64;
  mTable_sub[8, 8] := @sub_single_single;
  mTable_sub[8, 9] := @sub_single_double;
  mTable_sub[8, 10] := @sub_single_string;
  mTable_sub[8, 11] := @sub_single_utf8string;
  mTable_sub[8, 12] := @sub_single_widestring;
  mTable_sub[8, 13] := @sub_single_pchar;
  mTable_sub[8, 14] := @sub_single_pointer;
  mTable_sub[8, 15] := @sub_single_object;
  mTable_sub[9, 1] := @sub_double_u8;
  mTable_sub[9, 2] := @sub_double_s8;
  mTable_sub[9, 3] := @sub_double_u16;
  mTable_sub[9, 4] := @sub_double_s16;
  mTable_sub[9, 5] := @sub_double_u32;
  mTable_sub[9, 6] := @sub_double_s32;
  mTable_sub[9, 7] := @sub_double_s64;
  mTable_sub[9, 8] := @sub_double_single;
  mTable_sub[9, 9] := @sub_double_double;
  mTable_sub[9, 10] := @sub_double_string;
  mTable_sub[9, 11] := @sub_double_utf8string;
  mTable_sub[9, 12] := @sub_double_widestring;
  mTable_sub[9, 13] := @sub_double_pchar;
  mTable_sub[9, 14] := @sub_double_pointer;
  mTable_sub[9, 15] := @sub_double_object;
  mTable_sub[10, 1] := @sub_string_u8;
  mTable_sub[10, 2] := @sub_string_s8;
  mTable_sub[10, 3] := @sub_string_u16;
  mTable_sub[10, 4] := @sub_string_s16;
  mTable_sub[10, 5] := @sub_string_u32;
  mTable_sub[10, 6] := @sub_string_s32;
  mTable_sub[10, 7] := @sub_string_s64;
  mTable_sub[10, 8] := @sub_string_single;
  mTable_sub[10, 9] := @sub_string_double;
  mTable_sub[10, 10] := @sub_string_string;
  mTable_sub[10, 11] := @sub_string_utf8string;
  mTable_sub[10, 12] := @sub_string_widestring;
  mTable_sub[10, 13] := @sub_string_pchar;
  mTable_sub[10, 14] := @sub_string_pointer;
  mTable_sub[10, 15] := @sub_string_object;
  mTable_sub[11, 1] := @sub_utf8string_u8;
  mTable_sub[11, 2] := @sub_utf8string_s8;
  mTable_sub[11, 3] := @sub_utf8string_u16;
  mTable_sub[11, 4] := @sub_utf8string_s16;
  mTable_sub[11, 5] := @sub_utf8string_u32;
  mTable_sub[11, 6] := @sub_utf8string_s32;
  mTable_sub[11, 7] := @sub_utf8string_s64;
  mTable_sub[11, 8] := @sub_utf8string_single;
  mTable_sub[11, 9] := @sub_utf8string_double;
  mTable_sub[11, 10] := @sub_utf8string_string;
  mTable_sub[11, 11] := @sub_utf8string_utf8string;
  mTable_sub[11, 12] := @sub_utf8string_widestring;
  mTable_sub[11, 13] := @sub_utf8string_pchar;
  mTable_sub[11, 14] := @sub_utf8string_pointer;
  mTable_sub[11, 15] := @sub_utf8string_object;
  mTable_sub[12, 1] := @sub_widestring_u8;
  mTable_sub[12, 2] := @sub_widestring_s8;
  mTable_sub[12, 3] := @sub_widestring_u16;
  mTable_sub[12, 4] := @sub_widestring_s16;
  mTable_sub[12, 5] := @sub_widestring_u32;
  mTable_sub[12, 6] := @sub_widestring_s32;
  mTable_sub[12, 7] := @sub_widestring_s64;
  mTable_sub[12, 8] := @sub_widestring_single;
  mTable_sub[12, 9] := @sub_widestring_double;
  mTable_sub[12, 10] := @sub_widestring_string;
  mTable_sub[12, 11] := @sub_widestring_utf8string;
  mTable_sub[12, 12] := @sub_widestring_widestring;
  mTable_sub[12, 13] := @sub_widestring_pchar;
  mTable_sub[12, 14] := @sub_widestring_pointer;
  mTable_sub[12, 15] := @sub_widestring_object;
  mTable_sub[13, 1] := @sub_pchar_u8;
  mTable_sub[13, 2] := @sub_pchar_s8;
  mTable_sub[13, 3] := @sub_pchar_u16;
  mTable_sub[13, 4] := @sub_pchar_s16;
  mTable_sub[13, 5] := @sub_pchar_u32;
  mTable_sub[13, 6] := @sub_pchar_s32;
  mTable_sub[13, 7] := @sub_pchar_s64;
  mTable_sub[13, 8] := @sub_pchar_single;
  mTable_sub[13, 9] := @sub_pchar_double;
  mTable_sub[13, 10] := @sub_pchar_string;
  mTable_sub[13, 11] := @sub_pchar_utf8string;
  mTable_sub[13, 12] := @sub_pchar_widestring;
  mTable_sub[13, 13] := @sub_pchar_pchar;
  mTable_sub[13, 14] := @sub_pchar_pointer;
  mTable_sub[13, 15] := @sub_pchar_object;
  mTable_sub[14, 1] := @sub_pointer_u8;
  mTable_sub[14, 2] := @sub_pointer_s8;
  mTable_sub[14, 3] := @sub_pointer_u16;
  mTable_sub[14, 4] := @sub_pointer_s16;
  mTable_sub[14, 5] := @sub_pointer_u32;
  mTable_sub[14, 6] := @sub_pointer_s32;
  mTable_sub[14, 7] := @sub_pointer_s64;
  mTable_sub[14, 8] := @sub_pointer_single;
  mTable_sub[14, 9] := @sub_pointer_double;
  mTable_sub[14, 10] := @sub_pointer_string;
  mTable_sub[14, 11] := @sub_pointer_utf8string;
  mTable_sub[14, 12] := @sub_pointer_widestring;
  mTable_sub[14, 13] := @sub_pointer_pchar;
  mTable_sub[14, 14] := @sub_pointer_pointer;
  mTable_sub[14, 15] := @sub_pointer_object;
  mTable_sub[15, 1] := @sub_object_u8;
  mTable_sub[15, 2] := @sub_object_s8;
  mTable_sub[15, 3] := @sub_object_u16;
  mTable_sub[15, 4] := @sub_object_s16;
  mTable_sub[15, 5] := @sub_object_u32;
  mTable_sub[15, 6] := @sub_object_s32;
  mTable_sub[15, 7] := @sub_object_s64;
  mTable_sub[15, 8] := @sub_object_single;
  mTable_sub[15, 9] := @sub_object_double;
  mTable_sub[15, 10] := @sub_object_string;
  mTable_sub[15, 11] := @sub_object_utf8string;
  mTable_sub[15, 12] := @sub_object_widestring;
  mTable_sub[15, 13] := @sub_object_pchar;
  mTable_sub[15, 14] := @sub_object_pointer;
  mTable_sub[15, 15] := @sub_object_object;
end;

procedure InitTable_mul;
begin
  mTable_mul[1, 1] := @mul_u8_u8;
  mTable_mul[1, 2] := @mul_u8_s8;
  mTable_mul[1, 3] := @mul_u8_u16;
  mTable_mul[1, 4] := @mul_u8_s16;
  mTable_mul[1, 5] := @mul_u8_u32;
  mTable_mul[1, 6] := @mul_u8_s32;
  mTable_mul[1, 7] := @mul_u8_s64;
  mTable_mul[1, 8] := @mul_u8_single;
  mTable_mul[1, 9] := @mul_u8_double;
  mTable_mul[1, 10] := @mul_u8_string;
  mTable_mul[1, 11] := @mul_u8_utf8string;
  mTable_mul[1, 12] := @mul_u8_widestring;
  mTable_mul[1, 13] := @mul_u8_pchar;
  mTable_mul[1, 14] := @mul_u8_pointer;
  mTable_mul[1, 15] := @mul_u8_object;
  mTable_mul[2, 1] := @mul_s8_u8;
  mTable_mul[2, 2] := @mul_s8_s8;
  mTable_mul[2, 3] := @mul_s8_u16;
  mTable_mul[2, 4] := @mul_s8_s16;
  mTable_mul[2, 5] := @mul_s8_u32;
  mTable_mul[2, 6] := @mul_s8_s32;
  mTable_mul[2, 7] := @mul_s8_s64;
  mTable_mul[2, 8] := @mul_s8_single;
  mTable_mul[2, 9] := @mul_s8_double;
  mTable_mul[2, 10] := @mul_s8_string;
  mTable_mul[2, 11] := @mul_s8_utf8string;
  mTable_mul[2, 12] := @mul_s8_widestring;
  mTable_mul[2, 13] := @mul_s8_pchar;
  mTable_mul[2, 14] := @mul_s8_pointer;
  mTable_mul[2, 15] := @mul_s8_object;
  mTable_mul[3, 1] := @mul_u16_u8;
  mTable_mul[3, 2] := @mul_u16_s8;
  mTable_mul[3, 3] := @mul_u16_u16;
  mTable_mul[3, 4] := @mul_u16_s16;
  mTable_mul[3, 5] := @mul_u16_u32;
  mTable_mul[3, 6] := @mul_u16_s32;
  mTable_mul[3, 7] := @mul_u16_s64;
  mTable_mul[3, 8] := @mul_u16_single;
  mTable_mul[3, 9] := @mul_u16_double;
  mTable_mul[3, 10] := @mul_u16_string;
  mTable_mul[3, 11] := @mul_u16_utf8string;
  mTable_mul[3, 12] := @mul_u16_widestring;
  mTable_mul[3, 13] := @mul_u16_pchar;
  mTable_mul[3, 14] := @mul_u16_pointer;
  mTable_mul[3, 15] := @mul_u16_object;
  mTable_mul[4, 1] := @mul_s16_u8;
  mTable_mul[4, 2] := @mul_s16_s8;
  mTable_mul[4, 3] := @mul_s16_u16;
  mTable_mul[4, 4] := @mul_s16_s16;
  mTable_mul[4, 5] := @mul_s16_u32;
  mTable_mul[4, 6] := @mul_s16_s32;
  mTable_mul[4, 7] := @mul_s16_s64;
  mTable_mul[4, 8] := @mul_s16_single;
  mTable_mul[4, 9] := @mul_s16_double;
  mTable_mul[4, 10] := @mul_s16_string;
  mTable_mul[4, 11] := @mul_s16_utf8string;
  mTable_mul[4, 12] := @mul_s16_widestring;
  mTable_mul[4, 13] := @mul_s16_pchar;
  mTable_mul[4, 14] := @mul_s16_pointer;
  mTable_mul[4, 15] := @mul_s16_object;
  mTable_mul[5, 1] := @mul_u32_u8;
  mTable_mul[5, 2] := @mul_u32_s8;
  mTable_mul[5, 3] := @mul_u32_u16;
  mTable_mul[5, 4] := @mul_u32_s16;
  mTable_mul[5, 5] := @mul_u32_u32;
  mTable_mul[5, 6] := @mul_u32_s32;
  mTable_mul[5, 7] := @mul_u32_s64;
  mTable_mul[5, 8] := @mul_u32_single;
  mTable_mul[5, 9] := @mul_u32_double;
  mTable_mul[5, 10] := @mul_u32_string;
  mTable_mul[5, 11] := @mul_u32_utf8string;
  mTable_mul[5, 12] := @mul_u32_widestring;
  mTable_mul[5, 13] := @mul_u32_pchar;
  mTable_mul[5, 14] := @mul_u32_pointer;
  mTable_mul[5, 15] := @mul_u32_object;
  mTable_mul[6, 1] := @mul_s32_u8;
  mTable_mul[6, 2] := @mul_s32_s8;
  mTable_mul[6, 3] := @mul_s32_u16;
  mTable_mul[6, 4] := @mul_s32_s16;
  mTable_mul[6, 5] := @mul_s32_u32;
  mTable_mul[6, 6] := @mul_s32_s32;
  mTable_mul[6, 7] := @mul_s32_s64;
  mTable_mul[6, 8] := @mul_s32_single;
  mTable_mul[6, 9] := @mul_s32_double;
  mTable_mul[6, 10] := @mul_s32_string;
  mTable_mul[6, 11] := @mul_s32_utf8string;
  mTable_mul[6, 12] := @mul_s32_widestring;
  mTable_mul[6, 13] := @mul_s32_pchar;
  mTable_mul[6, 14] := @mul_s32_pointer;
  mTable_mul[6, 15] := @mul_s32_object;
  mTable_mul[7, 1] := @mul_s64_u8;
  mTable_mul[7, 2] := @mul_s64_s8;
  mTable_mul[7, 3] := @mul_s64_u16;
  mTable_mul[7, 4] := @mul_s64_s16;
  mTable_mul[7, 5] := @mul_s64_u32;
  mTable_mul[7, 6] := @mul_s64_s32;
  mTable_mul[7, 7] := @mul_s64_s64;
  mTable_mul[7, 8] := @mul_s64_single;
  mTable_mul[7, 9] := @mul_s64_double;
  mTable_mul[7, 10] := @mul_s64_string;
  mTable_mul[7, 11] := @mul_s64_utf8string;
  mTable_mul[7, 12] := @mul_s64_widestring;
  mTable_mul[7, 13] := @mul_s64_pchar;
  mTable_mul[7, 14] := @mul_s64_pointer;
  mTable_mul[7, 15] := @mul_s64_object;
  mTable_mul[8, 1] := @mul_single_u8;
  mTable_mul[8, 2] := @mul_single_s8;
  mTable_mul[8, 3] := @mul_single_u16;
  mTable_mul[8, 4] := @mul_single_s16;
  mTable_mul[8, 5] := @mul_single_u32;
  mTable_mul[8, 6] := @mul_single_s32;
  mTable_mul[8, 7] := @mul_single_s64;
  mTable_mul[8, 8] := @mul_single_single;
  mTable_mul[8, 9] := @mul_single_double;
  mTable_mul[8, 10] := @mul_single_string;
  mTable_mul[8, 11] := @mul_single_utf8string;
  mTable_mul[8, 12] := @mul_single_widestring;
  mTable_mul[8, 13] := @mul_single_pchar;
  mTable_mul[8, 14] := @mul_single_pointer;
  mTable_mul[8, 15] := @mul_single_object;
  mTable_mul[9, 1] := @mul_double_u8;
  mTable_mul[9, 2] := @mul_double_s8;
  mTable_mul[9, 3] := @mul_double_u16;
  mTable_mul[9, 4] := @mul_double_s16;
  mTable_mul[9, 5] := @mul_double_u32;
  mTable_mul[9, 6] := @mul_double_s32;
  mTable_mul[9, 7] := @mul_double_s64;
  mTable_mul[9, 8] := @mul_double_single;
  mTable_mul[9, 9] := @mul_double_double;
  mTable_mul[9, 10] := @mul_double_string;
  mTable_mul[9, 11] := @mul_double_utf8string;
  mTable_mul[9, 12] := @mul_double_widestring;
  mTable_mul[9, 13] := @mul_double_pchar;
  mTable_mul[9, 14] := @mul_double_pointer;
  mTable_mul[9, 15] := @mul_double_object;
  mTable_mul[10, 1] := @mul_string_u8;
  mTable_mul[10, 2] := @mul_string_s8;
  mTable_mul[10, 3] := @mul_string_u16;
  mTable_mul[10, 4] := @mul_string_s16;
  mTable_mul[10, 5] := @mul_string_u32;
  mTable_mul[10, 6] := @mul_string_s32;
  mTable_mul[10, 7] := @mul_string_s64;
  mTable_mul[10, 8] := @mul_string_single;
  mTable_mul[10, 9] := @mul_string_double;
  mTable_mul[10, 10] := @mul_string_string;
  mTable_mul[10, 11] := @mul_string_utf8string;
  mTable_mul[10, 12] := @mul_string_widestring;
  mTable_mul[10, 13] := @mul_string_pchar;
  mTable_mul[10, 14] := @mul_string_pointer;
  mTable_mul[10, 15] := @mul_string_object;
  mTable_mul[11, 1] := @mul_utf8string_u8;
  mTable_mul[11, 2] := @mul_utf8string_s8;
  mTable_mul[11, 3] := @mul_utf8string_u16;
  mTable_mul[11, 4] := @mul_utf8string_s16;
  mTable_mul[11, 5] := @mul_utf8string_u32;
  mTable_mul[11, 6] := @mul_utf8string_s32;
  mTable_mul[11, 7] := @mul_utf8string_s64;
  mTable_mul[11, 8] := @mul_utf8string_single;
  mTable_mul[11, 9] := @mul_utf8string_double;
  mTable_mul[11, 10] := @mul_utf8string_string;
  mTable_mul[11, 11] := @mul_utf8string_utf8string;
  mTable_mul[11, 12] := @mul_utf8string_widestring;
  mTable_mul[11, 13] := @mul_utf8string_pchar;
  mTable_mul[11, 14] := @mul_utf8string_pointer;
  mTable_mul[11, 15] := @mul_utf8string_object;
  mTable_mul[12, 1] := @mul_widestring_u8;
  mTable_mul[12, 2] := @mul_widestring_s8;
  mTable_mul[12, 3] := @mul_widestring_u16;
  mTable_mul[12, 4] := @mul_widestring_s16;
  mTable_mul[12, 5] := @mul_widestring_u32;
  mTable_mul[12, 6] := @mul_widestring_s32;
  mTable_mul[12, 7] := @mul_widestring_s64;
  mTable_mul[12, 8] := @mul_widestring_single;
  mTable_mul[12, 9] := @mul_widestring_double;
  mTable_mul[12, 10] := @mul_widestring_string;
  mTable_mul[12, 11] := @mul_widestring_utf8string;
  mTable_mul[12, 12] := @mul_widestring_widestring;
  mTable_mul[12, 13] := @mul_widestring_pchar;
  mTable_mul[12, 14] := @mul_widestring_pointer;
  mTable_mul[12, 15] := @mul_widestring_object;
  mTable_mul[13, 1] := @mul_pchar_u8;
  mTable_mul[13, 2] := @mul_pchar_s8;
  mTable_mul[13, 3] := @mul_pchar_u16;
  mTable_mul[13, 4] := @mul_pchar_s16;
  mTable_mul[13, 5] := @mul_pchar_u32;
  mTable_mul[13, 6] := @mul_pchar_s32;
  mTable_mul[13, 7] := @mul_pchar_s64;
  mTable_mul[13, 8] := @mul_pchar_single;
  mTable_mul[13, 9] := @mul_pchar_double;
  mTable_mul[13, 10] := @mul_pchar_string;
  mTable_mul[13, 11] := @mul_pchar_utf8string;
  mTable_mul[13, 12] := @mul_pchar_widestring;
  mTable_mul[13, 13] := @mul_pchar_pchar;
  mTable_mul[13, 14] := @mul_pchar_pointer;
  mTable_mul[13, 15] := @mul_pchar_object;
  mTable_mul[14, 1] := @mul_pointer_u8;
  mTable_mul[14, 2] := @mul_pointer_s8;
  mTable_mul[14, 3] := @mul_pointer_u16;
  mTable_mul[14, 4] := @mul_pointer_s16;
  mTable_mul[14, 5] := @mul_pointer_u32;
  mTable_mul[14, 6] := @mul_pointer_s32;
  mTable_mul[14, 7] := @mul_pointer_s64;
  mTable_mul[14, 8] := @mul_pointer_single;
  mTable_mul[14, 9] := @mul_pointer_double;
  mTable_mul[14, 10] := @mul_pointer_string;
  mTable_mul[14, 11] := @mul_pointer_utf8string;
  mTable_mul[14, 12] := @mul_pointer_widestring;
  mTable_mul[14, 13] := @mul_pointer_pchar;
  mTable_mul[14, 14] := @mul_pointer_pointer;
  mTable_mul[14, 15] := @mul_pointer_object;
  mTable_mul[15, 1] := @mul_object_u8;
  mTable_mul[15, 2] := @mul_object_s8;
  mTable_mul[15, 3] := @mul_object_u16;
  mTable_mul[15, 4] := @mul_object_s16;
  mTable_mul[15, 5] := @mul_object_u32;
  mTable_mul[15, 6] := @mul_object_s32;
  mTable_mul[15, 7] := @mul_object_s64;
  mTable_mul[15, 8] := @mul_object_single;
  mTable_mul[15, 9] := @mul_object_double;
  mTable_mul[15, 10] := @mul_object_string;
  mTable_mul[15, 11] := @mul_object_utf8string;
  mTable_mul[15, 12] := @mul_object_widestring;
  mTable_mul[15, 13] := @mul_object_pchar;
  mTable_mul[15, 14] := @mul_object_pointer;
  mTable_mul[15, 15] := @mul_object_object;
end;

procedure InitTable_div;
begin
  mTable_div[1, 1] := @div_u8_u8;
  mTable_div[1, 2] := @div_u8_s8;
  mTable_div[1, 3] := @div_u8_u16;
  mTable_div[1, 4] := @div_u8_s16;
  mTable_div[1, 5] := @div_u8_u32;
  mTable_div[1, 6] := @div_u8_s32;
  mTable_div[1, 7] := @div_u8_s64;
  mTable_div[1, 8] := @div_u8_single;
  mTable_div[1, 9] := @div_u8_double;
  mTable_div[1, 10] := @div_u8_string;
  mTable_div[1, 11] := @div_u8_utf8string;
  mTable_div[1, 12] := @div_u8_widestring;
  mTable_div[1, 13] := @div_u8_pchar;
  mTable_div[1, 14] := @div_u8_pointer;
  mTable_div[1, 15] := @div_u8_object;
  mTable_div[2, 1] := @div_s8_u8;
  mTable_div[2, 2] := @div_s8_s8;
  mTable_div[2, 3] := @div_s8_u16;
  mTable_div[2, 4] := @div_s8_s16;
  mTable_div[2, 5] := @div_s8_u32;
  mTable_div[2, 6] := @div_s8_s32;
  mTable_div[2, 7] := @div_s8_s64;
  mTable_div[2, 8] := @div_s8_single;
  mTable_div[2, 9] := @div_s8_double;
  mTable_div[2, 10] := @div_s8_string;
  mTable_div[2, 11] := @div_s8_utf8string;
  mTable_div[2, 12] := @div_s8_widestring;
  mTable_div[2, 13] := @div_s8_pchar;
  mTable_div[2, 14] := @div_s8_pointer;
  mTable_div[2, 15] := @div_s8_object;
  mTable_div[3, 1] := @div_u16_u8;
  mTable_div[3, 2] := @div_u16_s8;
  mTable_div[3, 3] := @div_u16_u16;
  mTable_div[3, 4] := @div_u16_s16;
  mTable_div[3, 5] := @div_u16_u32;
  mTable_div[3, 6] := @div_u16_s32;
  mTable_div[3, 7] := @div_u16_s64;
  mTable_div[3, 8] := @div_u16_single;
  mTable_div[3, 9] := @div_u16_double;
  mTable_div[3, 10] := @div_u16_string;
  mTable_div[3, 11] := @div_u16_utf8string;
  mTable_div[3, 12] := @div_u16_widestring;
  mTable_div[3, 13] := @div_u16_pchar;
  mTable_div[3, 14] := @div_u16_pointer;
  mTable_div[3, 15] := @div_u16_object;
  mTable_div[4, 1] := @div_s16_u8;
  mTable_div[4, 2] := @div_s16_s8;
  mTable_div[4, 3] := @div_s16_u16;
  mTable_div[4, 4] := @div_s16_s16;
  mTable_div[4, 5] := @div_s16_u32;
  mTable_div[4, 6] := @div_s16_s32;
  mTable_div[4, 7] := @div_s16_s64;
  mTable_div[4, 8] := @div_s16_single;
  mTable_div[4, 9] := @div_s16_double;
  mTable_div[4, 10] := @div_s16_string;
  mTable_div[4, 11] := @div_s16_utf8string;
  mTable_div[4, 12] := @div_s16_widestring;
  mTable_div[4, 13] := @div_s16_pchar;
  mTable_div[4, 14] := @div_s16_pointer;
  mTable_div[4, 15] := @div_s16_object;
  mTable_div[5, 1] := @div_u32_u8;
  mTable_div[5, 2] := @div_u32_s8;
  mTable_div[5, 3] := @div_u32_u16;
  mTable_div[5, 4] := @div_u32_s16;
  mTable_div[5, 5] := @div_u32_u32;
  mTable_div[5, 6] := @div_u32_s32;
  mTable_div[5, 7] := @div_u32_s64;
  mTable_div[5, 8] := @div_u32_single;
  mTable_div[5, 9] := @div_u32_double;
  mTable_div[5, 10] := @div_u32_string;
  mTable_div[5, 11] := @div_u32_utf8string;
  mTable_div[5, 12] := @div_u32_widestring;
  mTable_div[5, 13] := @div_u32_pchar;
  mTable_div[5, 14] := @div_u32_pointer;
  mTable_div[5, 15] := @div_u32_object;
  mTable_div[6, 1] := @div_s32_u8;
  mTable_div[6, 2] := @div_s32_s8;
  mTable_div[6, 3] := @div_s32_u16;
  mTable_div[6, 4] := @div_s32_s16;
  mTable_div[6, 5] := @div_s32_u32;
  mTable_div[6, 6] := @div_s32_s32;
  mTable_div[6, 7] := @div_s32_s64;
  mTable_div[6, 8] := @div_s32_single;
  mTable_div[6, 9] := @div_s32_double;
  mTable_div[6, 10] := @div_s32_string;
  mTable_div[6, 11] := @div_s32_utf8string;
  mTable_div[6, 12] := @div_s32_widestring;
  mTable_div[6, 13] := @div_s32_pchar;
  mTable_div[6, 14] := @div_s32_pointer;
  mTable_div[6, 15] := @div_s32_object;
  mTable_div[7, 1] := @div_s64_u8;
  mTable_div[7, 2] := @div_s64_s8;
  mTable_div[7, 3] := @div_s64_u16;
  mTable_div[7, 4] := @div_s64_s16;
  mTable_div[7, 5] := @div_s64_u32;
  mTable_div[7, 6] := @div_s64_s32;
  mTable_div[7, 7] := @div_s64_s64;
  mTable_div[7, 8] := @div_s64_single;
  mTable_div[7, 9] := @div_s64_double;
  mTable_div[7, 10] := @div_s64_string;
  mTable_div[7, 11] := @div_s64_utf8string;
  mTable_div[7, 12] := @div_s64_widestring;
  mTable_div[7, 13] := @div_s64_pchar;
  mTable_div[7, 14] := @div_s64_pointer;
  mTable_div[7, 15] := @div_s64_object;
  mTable_div[8, 1] := @div_single_u8;
  mTable_div[8, 2] := @div_single_s8;
  mTable_div[8, 3] := @div_single_u16;
  mTable_div[8, 4] := @div_single_s16;
  mTable_div[8, 5] := @div_single_u32;
  mTable_div[8, 6] := @div_single_s32;
  mTable_div[8, 7] := @div_single_s64;
  mTable_div[8, 8] := @div_single_single;
  mTable_div[8, 9] := @div_single_double;
  mTable_div[8, 10] := @div_single_string;
  mTable_div[8, 11] := @div_single_utf8string;
  mTable_div[8, 12] := @div_single_widestring;
  mTable_div[8, 13] := @div_single_pchar;
  mTable_div[8, 14] := @div_single_pointer;
  mTable_div[8, 15] := @div_single_object;
  mTable_div[9, 1] := @div_double_u8;
  mTable_div[9, 2] := @div_double_s8;
  mTable_div[9, 3] := @div_double_u16;
  mTable_div[9, 4] := @div_double_s16;
  mTable_div[9, 5] := @div_double_u32;
  mTable_div[9, 6] := @div_double_s32;
  mTable_div[9, 7] := @div_double_s64;
  mTable_div[9, 8] := @div_double_single;
  mTable_div[9, 9] := @div_double_double;
  mTable_div[9, 10] := @div_double_string;
  mTable_div[9, 11] := @div_double_utf8string;
  mTable_div[9, 12] := @div_double_widestring;
  mTable_div[9, 13] := @div_double_pchar;
  mTable_div[9, 14] := @div_double_pointer;
  mTable_div[9, 15] := @div_double_object;
  mTable_div[10, 1] := @div_string_u8;
  mTable_div[10, 2] := @div_string_s8;
  mTable_div[10, 3] := @div_string_u16;
  mTable_div[10, 4] := @div_string_s16;
  mTable_div[10, 5] := @div_string_u32;
  mTable_div[10, 6] := @div_string_s32;
  mTable_div[10, 7] := @div_string_s64;
  mTable_div[10, 8] := @div_string_single;
  mTable_div[10, 9] := @div_string_double;
  mTable_div[10, 10] := @div_string_string;
  mTable_div[10, 11] := @div_string_utf8string;
  mTable_div[10, 12] := @div_string_widestring;
  mTable_div[10, 13] := @div_string_pchar;
  mTable_div[10, 14] := @div_string_pointer;
  mTable_div[10, 15] := @div_string_object;
  mTable_div[11, 1] := @div_utf8string_u8;
  mTable_div[11, 2] := @div_utf8string_s8;
  mTable_div[11, 3] := @div_utf8string_u16;
  mTable_div[11, 4] := @div_utf8string_s16;
  mTable_div[11, 5] := @div_utf8string_u32;
  mTable_div[11, 6] := @div_utf8string_s32;
  mTable_div[11, 7] := @div_utf8string_s64;
  mTable_div[11, 8] := @div_utf8string_single;
  mTable_div[11, 9] := @div_utf8string_double;
  mTable_div[11, 10] := @div_utf8string_string;
  mTable_div[11, 11] := @div_utf8string_utf8string;
  mTable_div[11, 12] := @div_utf8string_widestring;
  mTable_div[11, 13] := @div_utf8string_pchar;
  mTable_div[11, 14] := @div_utf8string_pointer;
  mTable_div[11, 15] := @div_utf8string_object;
  mTable_div[12, 1] := @div_widestring_u8;
  mTable_div[12, 2] := @div_widestring_s8;
  mTable_div[12, 3] := @div_widestring_u16;
  mTable_div[12, 4] := @div_widestring_s16;
  mTable_div[12, 5] := @div_widestring_u32;
  mTable_div[12, 6] := @div_widestring_s32;
  mTable_div[12, 7] := @div_widestring_s64;
  mTable_div[12, 8] := @div_widestring_single;
  mTable_div[12, 9] := @div_widestring_double;
  mTable_div[12, 10] := @div_widestring_string;
  mTable_div[12, 11] := @div_widestring_utf8string;
  mTable_div[12, 12] := @div_widestring_widestring;
  mTable_div[12, 13] := @div_widestring_pchar;
  mTable_div[12, 14] := @div_widestring_pointer;
  mTable_div[12, 15] := @div_widestring_object;
  mTable_div[13, 1] := @div_pchar_u8;
  mTable_div[13, 2] := @div_pchar_s8;
  mTable_div[13, 3] := @div_pchar_u16;
  mTable_div[13, 4] := @div_pchar_s16;
  mTable_div[13, 5] := @div_pchar_u32;
  mTable_div[13, 6] := @div_pchar_s32;
  mTable_div[13, 7] := @div_pchar_s64;
  mTable_div[13, 8] := @div_pchar_single;
  mTable_div[13, 9] := @div_pchar_double;
  mTable_div[13, 10] := @div_pchar_string;
  mTable_div[13, 11] := @div_pchar_utf8string;
  mTable_div[13, 12] := @div_pchar_widestring;
  mTable_div[13, 13] := @div_pchar_pchar;
  mTable_div[13, 14] := @div_pchar_pointer;
  mTable_div[13, 15] := @div_pchar_object;
  mTable_div[14, 1] := @div_pointer_u8;
  mTable_div[14, 2] := @div_pointer_s8;
  mTable_div[14, 3] := @div_pointer_u16;
  mTable_div[14, 4] := @div_pointer_s16;
  mTable_div[14, 5] := @div_pointer_u32;
  mTable_div[14, 6] := @div_pointer_s32;
  mTable_div[14, 7] := @div_pointer_s64;
  mTable_div[14, 8] := @div_pointer_single;
  mTable_div[14, 9] := @div_pointer_double;
  mTable_div[14, 10] := @div_pointer_string;
  mTable_div[14, 11] := @div_pointer_utf8string;
  mTable_div[14, 12] := @div_pointer_widestring;
  mTable_div[14, 13] := @div_pointer_pchar;
  mTable_div[14, 14] := @div_pointer_pointer;
  mTable_div[14, 15] := @div_pointer_object;
  mTable_div[15, 1] := @div_object_u8;
  mTable_div[15, 2] := @div_object_s8;
  mTable_div[15, 3] := @div_object_u16;
  mTable_div[15, 4] := @div_object_s16;
  mTable_div[15, 5] := @div_object_u32;
  mTable_div[15, 6] := @div_object_s32;
  mTable_div[15, 7] := @div_object_s64;
  mTable_div[15, 8] := @div_object_single;
  mTable_div[15, 9] := @div_object_double;
  mTable_div[15, 10] := @div_object_string;
  mTable_div[15, 11] := @div_object_utf8string;
  mTable_div[15, 12] := @div_object_widestring;
  mTable_div[15, 13] := @div_object_pchar;
  mTable_div[15, 14] := @div_object_pointer;
  mTable_div[15, 15] := @div_object_object;
end;

procedure InitTable_and;
begin
  mTable_and[1, 1] := @and_u8_u8;
  mTable_and[1, 2] := @and_u8_s8;
  mTable_and[1, 3] := @and_u8_u16;
  mTable_and[1, 4] := @and_u8_s16;
  mTable_and[1, 5] := @and_u8_u32;
  mTable_and[1, 6] := @and_u8_s32;
  mTable_and[1, 7] := @and_u8_s64;
  mTable_and[1, 8] := @and_u8_single;
  mTable_and[1, 9] := @and_u8_double;
  mTable_and[1, 10] := @and_u8_string;
  mTable_and[1, 11] := @and_u8_utf8string;
  mTable_and[1, 12] := @and_u8_widestring;
  mTable_and[1, 13] := @and_u8_pchar;
  mTable_and[1, 14] := @and_u8_pointer;
  mTable_and[1, 15] := @and_u8_object;
  mTable_and[2, 1] := @and_s8_u8;
  mTable_and[2, 2] := @and_s8_s8;
  mTable_and[2, 3] := @and_s8_u16;
  mTable_and[2, 4] := @and_s8_s16;
  mTable_and[2, 5] := @and_s8_u32;
  mTable_and[2, 6] := @and_s8_s32;
  mTable_and[2, 7] := @and_s8_s64;
  mTable_and[2, 8] := @and_s8_single;
  mTable_and[2, 9] := @and_s8_double;
  mTable_and[2, 10] := @and_s8_string;
  mTable_and[2, 11] := @and_s8_utf8string;
  mTable_and[2, 12] := @and_s8_widestring;
  mTable_and[2, 13] := @and_s8_pchar;
  mTable_and[2, 14] := @and_s8_pointer;
  mTable_and[2, 15] := @and_s8_object;
  mTable_and[3, 1] := @and_u16_u8;
  mTable_and[3, 2] := @and_u16_s8;
  mTable_and[3, 3] := @and_u16_u16;
  mTable_and[3, 4] := @and_u16_s16;
  mTable_and[3, 5] := @and_u16_u32;
  mTable_and[3, 6] := @and_u16_s32;
  mTable_and[3, 7] := @and_u16_s64;
  mTable_and[3, 8] := @and_u16_single;
  mTable_and[3, 9] := @and_u16_double;
  mTable_and[3, 10] := @and_u16_string;
  mTable_and[3, 11] := @and_u16_utf8string;
  mTable_and[3, 12] := @and_u16_widestring;
  mTable_and[3, 13] := @and_u16_pchar;
  mTable_and[3, 14] := @and_u16_pointer;
  mTable_and[3, 15] := @and_u16_object;
  mTable_and[4, 1] := @and_s16_u8;
  mTable_and[4, 2] := @and_s16_s8;
  mTable_and[4, 3] := @and_s16_u16;
  mTable_and[4, 4] := @and_s16_s16;
  mTable_and[4, 5] := @and_s16_u32;
  mTable_and[4, 6] := @and_s16_s32;
  mTable_and[4, 7] := @and_s16_s64;
  mTable_and[4, 8] := @and_s16_single;
  mTable_and[4, 9] := @and_s16_double;
  mTable_and[4, 10] := @and_s16_string;
  mTable_and[4, 11] := @and_s16_utf8string;
  mTable_and[4, 12] := @and_s16_widestring;
  mTable_and[4, 13] := @and_s16_pchar;
  mTable_and[4, 14] := @and_s16_pointer;
  mTable_and[4, 15] := @and_s16_object;
  mTable_and[5, 1] := @and_u32_u8;
  mTable_and[5, 2] := @and_u32_s8;
  mTable_and[5, 3] := @and_u32_u16;
  mTable_and[5, 4] := @and_u32_s16;
  mTable_and[5, 5] := @and_u32_u32;
  mTable_and[5, 6] := @and_u32_s32;
  mTable_and[5, 7] := @and_u32_s64;
  mTable_and[5, 8] := @and_u32_single;
  mTable_and[5, 9] := @and_u32_double;
  mTable_and[5, 10] := @and_u32_string;
  mTable_and[5, 11] := @and_u32_utf8string;
  mTable_and[5, 12] := @and_u32_widestring;
  mTable_and[5, 13] := @and_u32_pchar;
  mTable_and[5, 14] := @and_u32_pointer;
  mTable_and[5, 15] := @and_u32_object;
  mTable_and[6, 1] := @and_s32_u8;
  mTable_and[6, 2] := @and_s32_s8;
  mTable_and[6, 3] := @and_s32_u16;
  mTable_and[6, 4] := @and_s32_s16;
  mTable_and[6, 5] := @and_s32_u32;
  mTable_and[6, 6] := @and_s32_s32;
  mTable_and[6, 7] := @and_s32_s64;
  mTable_and[6, 8] := @and_s32_single;
  mTable_and[6, 9] := @and_s32_double;
  mTable_and[6, 10] := @and_s32_string;
  mTable_and[6, 11] := @and_s32_utf8string;
  mTable_and[6, 12] := @and_s32_widestring;
  mTable_and[6, 13] := @and_s32_pchar;
  mTable_and[6, 14] := @and_s32_pointer;
  mTable_and[6, 15] := @and_s32_object;
  mTable_and[7, 1] := @and_s64_u8;
  mTable_and[7, 2] := @and_s64_s8;
  mTable_and[7, 3] := @and_s64_u16;
  mTable_and[7, 4] := @and_s64_s16;
  mTable_and[7, 5] := @and_s64_u32;
  mTable_and[7, 6] := @and_s64_s32;
  mTable_and[7, 7] := @and_s64_s64;
  mTable_and[7, 8] := @and_s64_single;
  mTable_and[7, 9] := @and_s64_double;
  mTable_and[7, 10] := @and_s64_string;
  mTable_and[7, 11] := @and_s64_utf8string;
  mTable_and[7, 12] := @and_s64_widestring;
  mTable_and[7, 13] := @and_s64_pchar;
  mTable_and[7, 14] := @and_s64_pointer;
  mTable_and[7, 15] := @and_s64_object;
  mTable_and[8, 1] := @and_single_u8;
  mTable_and[8, 2] := @and_single_s8;
  mTable_and[8, 3] := @and_single_u16;
  mTable_and[8, 4] := @and_single_s16;
  mTable_and[8, 5] := @and_single_u32;
  mTable_and[8, 6] := @and_single_s32;
  mTable_and[8, 7] := @and_single_s64;
  mTable_and[8, 8] := @and_single_single;
  mTable_and[8, 9] := @and_single_double;
  mTable_and[8, 10] := @and_single_string;
  mTable_and[8, 11] := @and_single_utf8string;
  mTable_and[8, 12] := @and_single_widestring;
  mTable_and[8, 13] := @and_single_pchar;
  mTable_and[8, 14] := @and_single_pointer;
  mTable_and[8, 15] := @and_single_object;
  mTable_and[9, 1] := @and_double_u8;
  mTable_and[9, 2] := @and_double_s8;
  mTable_and[9, 3] := @and_double_u16;
  mTable_and[9, 4] := @and_double_s16;
  mTable_and[9, 5] := @and_double_u32;
  mTable_and[9, 6] := @and_double_s32;
  mTable_and[9, 7] := @and_double_s64;
  mTable_and[9, 8] := @and_double_single;
  mTable_and[9, 9] := @and_double_double;
  mTable_and[9, 10] := @and_double_string;
  mTable_and[9, 11] := @and_double_utf8string;
  mTable_and[9, 12] := @and_double_widestring;
  mTable_and[9, 13] := @and_double_pchar;
  mTable_and[9, 14] := @and_double_pointer;
  mTable_and[9, 15] := @and_double_object;
  mTable_and[10, 1] := @and_string_u8;
  mTable_and[10, 2] := @and_string_s8;
  mTable_and[10, 3] := @and_string_u16;
  mTable_and[10, 4] := @and_string_s16;
  mTable_and[10, 5] := @and_string_u32;
  mTable_and[10, 6] := @and_string_s32;
  mTable_and[10, 7] := @and_string_s64;
  mTable_and[10, 8] := @and_string_single;
  mTable_and[10, 9] := @and_string_double;
  mTable_and[10, 10] := @and_string_string;
  mTable_and[10, 11] := @and_string_utf8string;
  mTable_and[10, 12] := @and_string_widestring;
  mTable_and[10, 13] := @and_string_pchar;
  mTable_and[10, 14] := @and_string_pointer;
  mTable_and[10, 15] := @and_string_object;
  mTable_and[11, 1] := @and_utf8string_u8;
  mTable_and[11, 2] := @and_utf8string_s8;
  mTable_and[11, 3] := @and_utf8string_u16;
  mTable_and[11, 4] := @and_utf8string_s16;
  mTable_and[11, 5] := @and_utf8string_u32;
  mTable_and[11, 6] := @and_utf8string_s32;
  mTable_and[11, 7] := @and_utf8string_s64;
  mTable_and[11, 8] := @and_utf8string_single;
  mTable_and[11, 9] := @and_utf8string_double;
  mTable_and[11, 10] := @and_utf8string_string;
  mTable_and[11, 11] := @and_utf8string_utf8string;
  mTable_and[11, 12] := @and_utf8string_widestring;
  mTable_and[11, 13] := @and_utf8string_pchar;
  mTable_and[11, 14] := @and_utf8string_pointer;
  mTable_and[11, 15] := @and_utf8string_object;
  mTable_and[12, 1] := @and_widestring_u8;
  mTable_and[12, 2] := @and_widestring_s8;
  mTable_and[12, 3] := @and_widestring_u16;
  mTable_and[12, 4] := @and_widestring_s16;
  mTable_and[12, 5] := @and_widestring_u32;
  mTable_and[12, 6] := @and_widestring_s32;
  mTable_and[12, 7] := @and_widestring_s64;
  mTable_and[12, 8] := @and_widestring_single;
  mTable_and[12, 9] := @and_widestring_double;
  mTable_and[12, 10] := @and_widestring_string;
  mTable_and[12, 11] := @and_widestring_utf8string;
  mTable_and[12, 12] := @and_widestring_widestring;
  mTable_and[12, 13] := @and_widestring_pchar;
  mTable_and[12, 14] := @and_widestring_pointer;
  mTable_and[12, 15] := @and_widestring_object;
  mTable_and[13, 1] := @and_pchar_u8;
  mTable_and[13, 2] := @and_pchar_s8;
  mTable_and[13, 3] := @and_pchar_u16;
  mTable_and[13, 4] := @and_pchar_s16;
  mTable_and[13, 5] := @and_pchar_u32;
  mTable_and[13, 6] := @and_pchar_s32;
  mTable_and[13, 7] := @and_pchar_s64;
  mTable_and[13, 8] := @and_pchar_single;
  mTable_and[13, 9] := @and_pchar_double;
  mTable_and[13, 10] := @and_pchar_string;
  mTable_and[13, 11] := @and_pchar_utf8string;
  mTable_and[13, 12] := @and_pchar_widestring;
  mTable_and[13, 13] := @and_pchar_pchar;
  mTable_and[13, 14] := @and_pchar_pointer;
  mTable_and[13, 15] := @and_pchar_object;
  mTable_and[14, 1] := @and_pointer_u8;
  mTable_and[14, 2] := @and_pointer_s8;
  mTable_and[14, 3] := @and_pointer_u16;
  mTable_and[14, 4] := @and_pointer_s16;
  mTable_and[14, 5] := @and_pointer_u32;
  mTable_and[14, 6] := @and_pointer_s32;
  mTable_and[14, 7] := @and_pointer_s64;
  mTable_and[14, 8] := @and_pointer_single;
  mTable_and[14, 9] := @and_pointer_double;
  mTable_and[14, 10] := @and_pointer_string;
  mTable_and[14, 11] := @and_pointer_utf8string;
  mTable_and[14, 12] := @and_pointer_widestring;
  mTable_and[14, 13] := @and_pointer_pchar;
  mTable_and[14, 14] := @and_pointer_pointer;
  mTable_and[14, 15] := @and_pointer_object;
  mTable_and[15, 1] := @and_object_u8;
  mTable_and[15, 2] := @and_object_s8;
  mTable_and[15, 3] := @and_object_u16;
  mTable_and[15, 4] := @and_object_s16;
  mTable_and[15, 5] := @and_object_u32;
  mTable_and[15, 6] := @and_object_s32;
  mTable_and[15, 7] := @and_object_s64;
  mTable_and[15, 8] := @and_object_single;
  mTable_and[15, 9] := @and_object_double;
  mTable_and[15, 10] := @and_object_string;
  mTable_and[15, 11] := @and_object_utf8string;
  mTable_and[15, 12] := @and_object_widestring;
  mTable_and[15, 13] := @and_object_pchar;
  mTable_and[15, 14] := @and_object_pointer;
  mTable_and[15, 15] := @and_object_object;
end;

procedure InitTable_or;
begin
  mTable_or[1, 1] := @or_u8_u8;
  mTable_or[1, 2] := @or_u8_s8;
  mTable_or[1, 3] := @or_u8_u16;
  mTable_or[1, 4] := @or_u8_s16;
  mTable_or[1, 5] := @or_u8_u32;
  mTable_or[1, 6] := @or_u8_s32;
  mTable_or[1, 7] := @or_u8_s64;
  mTable_or[1, 8] := @or_u8_single;
  mTable_or[1, 9] := @or_u8_double;
  mTable_or[1, 10] := @or_u8_string;
  mTable_or[1, 11] := @or_u8_utf8string;
  mTable_or[1, 12] := @or_u8_widestring;
  mTable_or[1, 13] := @or_u8_pchar;
  mTable_or[1, 14] := @or_u8_pointer;
  mTable_or[1, 15] := @or_u8_object;
  mTable_or[2, 1] := @or_s8_u8;
  mTable_or[2, 2] := @or_s8_s8;
  mTable_or[2, 3] := @or_s8_u16;
  mTable_or[2, 4] := @or_s8_s16;
  mTable_or[2, 5] := @or_s8_u32;
  mTable_or[2, 6] := @or_s8_s32;
  mTable_or[2, 7] := @or_s8_s64;
  mTable_or[2, 8] := @or_s8_single;
  mTable_or[2, 9] := @or_s8_double;
  mTable_or[2, 10] := @or_s8_string;
  mTable_or[2, 11] := @or_s8_utf8string;
  mTable_or[2, 12] := @or_s8_widestring;
  mTable_or[2, 13] := @or_s8_pchar;
  mTable_or[2, 14] := @or_s8_pointer;
  mTable_or[2, 15] := @or_s8_object;
  mTable_or[3, 1] := @or_u16_u8;
  mTable_or[3, 2] := @or_u16_s8;
  mTable_or[3, 3] := @or_u16_u16;
  mTable_or[3, 4] := @or_u16_s16;
  mTable_or[3, 5] := @or_u16_u32;
  mTable_or[3, 6] := @or_u16_s32;
  mTable_or[3, 7] := @or_u16_s64;
  mTable_or[3, 8] := @or_u16_single;
  mTable_or[3, 9] := @or_u16_double;
  mTable_or[3, 10] := @or_u16_string;
  mTable_or[3, 11] := @or_u16_utf8string;
  mTable_or[3, 12] := @or_u16_widestring;
  mTable_or[3, 13] := @or_u16_pchar;
  mTable_or[3, 14] := @or_u16_pointer;
  mTable_or[3, 15] := @or_u16_object;
  mTable_or[4, 1] := @or_s16_u8;
  mTable_or[4, 2] := @or_s16_s8;
  mTable_or[4, 3] := @or_s16_u16;
  mTable_or[4, 4] := @or_s16_s16;
  mTable_or[4, 5] := @or_s16_u32;
  mTable_or[4, 6] := @or_s16_s32;
  mTable_or[4, 7] := @or_s16_s64;
  mTable_or[4, 8] := @or_s16_single;
  mTable_or[4, 9] := @or_s16_double;
  mTable_or[4, 10] := @or_s16_string;
  mTable_or[4, 11] := @or_s16_utf8string;
  mTable_or[4, 12] := @or_s16_widestring;
  mTable_or[4, 13] := @or_s16_pchar;
  mTable_or[4, 14] := @or_s16_pointer;
  mTable_or[4, 15] := @or_s16_object;
  mTable_or[5, 1] := @or_u32_u8;
  mTable_or[5, 2] := @or_u32_s8;
  mTable_or[5, 3] := @or_u32_u16;
  mTable_or[5, 4] := @or_u32_s16;
  mTable_or[5, 5] := @or_u32_u32;
  mTable_or[5, 6] := @or_u32_s32;
  mTable_or[5, 7] := @or_u32_s64;
  mTable_or[5, 8] := @or_u32_single;
  mTable_or[5, 9] := @or_u32_double;
  mTable_or[5, 10] := @or_u32_string;
  mTable_or[5, 11] := @or_u32_utf8string;
  mTable_or[5, 12] := @or_u32_widestring;
  mTable_or[5, 13] := @or_u32_pchar;
  mTable_or[5, 14] := @or_u32_pointer;
  mTable_or[5, 15] := @or_u32_object;
  mTable_or[6, 1] := @or_s32_u8;
  mTable_or[6, 2] := @or_s32_s8;
  mTable_or[6, 3] := @or_s32_u16;
  mTable_or[6, 4] := @or_s32_s16;
  mTable_or[6, 5] := @or_s32_u32;
  mTable_or[6, 6] := @or_s32_s32;
  mTable_or[6, 7] := @or_s32_s64;
  mTable_or[6, 8] := @or_s32_single;
  mTable_or[6, 9] := @or_s32_double;
  mTable_or[6, 10] := @or_s32_string;
  mTable_or[6, 11] := @or_s32_utf8string;
  mTable_or[6, 12] := @or_s32_widestring;
  mTable_or[6, 13] := @or_s32_pchar;
  mTable_or[6, 14] := @or_s32_pointer;
  mTable_or[6, 15] := @or_s32_object;
  mTable_or[7, 1] := @or_s64_u8;
  mTable_or[7, 2] := @or_s64_s8;
  mTable_or[7, 3] := @or_s64_u16;
  mTable_or[7, 4] := @or_s64_s16;
  mTable_or[7, 5] := @or_s64_u32;
  mTable_or[7, 6] := @or_s64_s32;
  mTable_or[7, 7] := @or_s64_s64;
  mTable_or[7, 8] := @or_s64_single;
  mTable_or[7, 9] := @or_s64_double;
  mTable_or[7, 10] := @or_s64_string;
  mTable_or[7, 11] := @or_s64_utf8string;
  mTable_or[7, 12] := @or_s64_widestring;
  mTable_or[7, 13] := @or_s64_pchar;
  mTable_or[7, 14] := @or_s64_pointer;
  mTable_or[7, 15] := @or_s64_object;
  mTable_or[8, 1] := @or_single_u8;
  mTable_or[8, 2] := @or_single_s8;
  mTable_or[8, 3] := @or_single_u16;
  mTable_or[8, 4] := @or_single_s16;
  mTable_or[8, 5] := @or_single_u32;
  mTable_or[8, 6] := @or_single_s32;
  mTable_or[8, 7] := @or_single_s64;
  mTable_or[8, 8] := @or_single_single;
  mTable_or[8, 9] := @or_single_double;
  mTable_or[8, 10] := @or_single_string;
  mTable_or[8, 11] := @or_single_utf8string;
  mTable_or[8, 12] := @or_single_widestring;
  mTable_or[8, 13] := @or_single_pchar;
  mTable_or[8, 14] := @or_single_pointer;
  mTable_or[8, 15] := @or_single_object;
  mTable_or[9, 1] := @or_double_u8;
  mTable_or[9, 2] := @or_double_s8;
  mTable_or[9, 3] := @or_double_u16;
  mTable_or[9, 4] := @or_double_s16;
  mTable_or[9, 5] := @or_double_u32;
  mTable_or[9, 6] := @or_double_s32;
  mTable_or[9, 7] := @or_double_s64;
  mTable_or[9, 8] := @or_double_single;
  mTable_or[9, 9] := @or_double_double;
  mTable_or[9, 10] := @or_double_string;
  mTable_or[9, 11] := @or_double_utf8string;
  mTable_or[9, 12] := @or_double_widestring;
  mTable_or[9, 13] := @or_double_pchar;
  mTable_or[9, 14] := @or_double_pointer;
  mTable_or[9, 15] := @or_double_object;
  mTable_or[10, 1] := @or_string_u8;
  mTable_or[10, 2] := @or_string_s8;
  mTable_or[10, 3] := @or_string_u16;
  mTable_or[10, 4] := @or_string_s16;
  mTable_or[10, 5] := @or_string_u32;
  mTable_or[10, 6] := @or_string_s32;
  mTable_or[10, 7] := @or_string_s64;
  mTable_or[10, 8] := @or_string_single;
  mTable_or[10, 9] := @or_string_double;
  mTable_or[10, 10] := @or_string_string;
  mTable_or[10, 11] := @or_string_utf8string;
  mTable_or[10, 12] := @or_string_widestring;
  mTable_or[10, 13] := @or_string_pchar;
  mTable_or[10, 14] := @or_string_pointer;
  mTable_or[10, 15] := @or_string_object;
  mTable_or[11, 1] := @or_utf8string_u8;
  mTable_or[11, 2] := @or_utf8string_s8;
  mTable_or[11, 3] := @or_utf8string_u16;
  mTable_or[11, 4] := @or_utf8string_s16;
  mTable_or[11, 5] := @or_utf8string_u32;
  mTable_or[11, 6] := @or_utf8string_s32;
  mTable_or[11, 7] := @or_utf8string_s64;
  mTable_or[11, 8] := @or_utf8string_single;
  mTable_or[11, 9] := @or_utf8string_double;
  mTable_or[11, 10] := @or_utf8string_string;
  mTable_or[11, 11] := @or_utf8string_utf8string;
  mTable_or[11, 12] := @or_utf8string_widestring;
  mTable_or[11, 13] := @or_utf8string_pchar;
  mTable_or[11, 14] := @or_utf8string_pointer;
  mTable_or[11, 15] := @or_utf8string_object;
  mTable_or[12, 1] := @or_widestring_u8;
  mTable_or[12, 2] := @or_widestring_s8;
  mTable_or[12, 3] := @or_widestring_u16;
  mTable_or[12, 4] := @or_widestring_s16;
  mTable_or[12, 5] := @or_widestring_u32;
  mTable_or[12, 6] := @or_widestring_s32;
  mTable_or[12, 7] := @or_widestring_s64;
  mTable_or[12, 8] := @or_widestring_single;
  mTable_or[12, 9] := @or_widestring_double;
  mTable_or[12, 10] := @or_widestring_string;
  mTable_or[12, 11] := @or_widestring_utf8string;
  mTable_or[12, 12] := @or_widestring_widestring;
  mTable_or[12, 13] := @or_widestring_pchar;
  mTable_or[12, 14] := @or_widestring_pointer;
  mTable_or[12, 15] := @or_widestring_object;
  mTable_or[13, 1] := @or_pchar_u8;
  mTable_or[13, 2] := @or_pchar_s8;
  mTable_or[13, 3] := @or_pchar_u16;
  mTable_or[13, 4] := @or_pchar_s16;
  mTable_or[13, 5] := @or_pchar_u32;
  mTable_or[13, 6] := @or_pchar_s32;
  mTable_or[13, 7] := @or_pchar_s64;
  mTable_or[13, 8] := @or_pchar_single;
  mTable_or[13, 9] := @or_pchar_double;
  mTable_or[13, 10] := @or_pchar_string;
  mTable_or[13, 11] := @or_pchar_utf8string;
  mTable_or[13, 12] := @or_pchar_widestring;
  mTable_or[13, 13] := @or_pchar_pchar;
  mTable_or[13, 14] := @or_pchar_pointer;
  mTable_or[13, 15] := @or_pchar_object;
  mTable_or[14, 1] := @or_pointer_u8;
  mTable_or[14, 2] := @or_pointer_s8;
  mTable_or[14, 3] := @or_pointer_u16;
  mTable_or[14, 4] := @or_pointer_s16;
  mTable_or[14, 5] := @or_pointer_u32;
  mTable_or[14, 6] := @or_pointer_s32;
  mTable_or[14, 7] := @or_pointer_s64;
  mTable_or[14, 8] := @or_pointer_single;
  mTable_or[14, 9] := @or_pointer_double;
  mTable_or[14, 10] := @or_pointer_string;
  mTable_or[14, 11] := @or_pointer_utf8string;
  mTable_or[14, 12] := @or_pointer_widestring;
  mTable_or[14, 13] := @or_pointer_pchar;
  mTable_or[14, 14] := @or_pointer_pointer;
  mTable_or[14, 15] := @or_pointer_object;
  mTable_or[15, 1] := @or_object_u8;
  mTable_or[15, 2] := @or_object_s8;
  mTable_or[15, 3] := @or_object_u16;
  mTable_or[15, 4] := @or_object_s16;
  mTable_or[15, 5] := @or_object_u32;
  mTable_or[15, 6] := @or_object_s32;
  mTable_or[15, 7] := @or_object_s64;
  mTable_or[15, 8] := @or_object_single;
  mTable_or[15, 9] := @or_object_double;
  mTable_or[15, 10] := @or_object_string;
  mTable_or[15, 11] := @or_object_utf8string;
  mTable_or[15, 12] := @or_object_widestring;
  mTable_or[15, 13] := @or_object_pchar;
  mTable_or[15, 14] := @or_object_pointer;
  mTable_or[15, 15] := @or_object_object;
end;

procedure InitTable_xor;
begin
  mTable_xor[1, 1] := @xor_u8_u8;
  mTable_xor[1, 2] := @xor_u8_s8;
  mTable_xor[1, 3] := @xor_u8_u16;
  mTable_xor[1, 4] := @xor_u8_s16;
  mTable_xor[1, 5] := @xor_u8_u32;
  mTable_xor[1, 6] := @xor_u8_s32;
  mTable_xor[1, 7] := @xor_u8_s64;
  mTable_xor[1, 8] := @xor_u8_single;
  mTable_xor[1, 9] := @xor_u8_double;
  mTable_xor[1, 10] := @xor_u8_string;
  mTable_xor[1, 11] := @xor_u8_utf8string;
  mTable_xor[1, 12] := @xor_u8_widestring;
  mTable_xor[1, 13] := @xor_u8_pchar;
  mTable_xor[1, 14] := @xor_u8_pointer;
  mTable_xor[1, 15] := @xor_u8_object;
  mTable_xor[2, 1] := @xor_s8_u8;
  mTable_xor[2, 2] := @xor_s8_s8;
  mTable_xor[2, 3] := @xor_s8_u16;
  mTable_xor[2, 4] := @xor_s8_s16;
  mTable_xor[2, 5] := @xor_s8_u32;
  mTable_xor[2, 6] := @xor_s8_s32;
  mTable_xor[2, 7] := @xor_s8_s64;
  mTable_xor[2, 8] := @xor_s8_single;
  mTable_xor[2, 9] := @xor_s8_double;
  mTable_xor[2, 10] := @xor_s8_string;
  mTable_xor[2, 11] := @xor_s8_utf8string;
  mTable_xor[2, 12] := @xor_s8_widestring;
  mTable_xor[2, 13] := @xor_s8_pchar;
  mTable_xor[2, 14] := @xor_s8_pointer;
  mTable_xor[2, 15] := @xor_s8_object;
  mTable_xor[3, 1] := @xor_u16_u8;
  mTable_xor[3, 2] := @xor_u16_s8;
  mTable_xor[3, 3] := @xor_u16_u16;
  mTable_xor[3, 4] := @xor_u16_s16;
  mTable_xor[3, 5] := @xor_u16_u32;
  mTable_xor[3, 6] := @xor_u16_s32;
  mTable_xor[3, 7] := @xor_u16_s64;
  mTable_xor[3, 8] := @xor_u16_single;
  mTable_xor[3, 9] := @xor_u16_double;
  mTable_xor[3, 10] := @xor_u16_string;
  mTable_xor[3, 11] := @xor_u16_utf8string;
  mTable_xor[3, 12] := @xor_u16_widestring;
  mTable_xor[3, 13] := @xor_u16_pchar;
  mTable_xor[3, 14] := @xor_u16_pointer;
  mTable_xor[3, 15] := @xor_u16_object;
  mTable_xor[4, 1] := @xor_s16_u8;
  mTable_xor[4, 2] := @xor_s16_s8;
  mTable_xor[4, 3] := @xor_s16_u16;
  mTable_xor[4, 4] := @xor_s16_s16;
  mTable_xor[4, 5] := @xor_s16_u32;
  mTable_xor[4, 6] := @xor_s16_s32;
  mTable_xor[4, 7] := @xor_s16_s64;
  mTable_xor[4, 8] := @xor_s16_single;
  mTable_xor[4, 9] := @xor_s16_double;
  mTable_xor[4, 10] := @xor_s16_string;
  mTable_xor[4, 11] := @xor_s16_utf8string;
  mTable_xor[4, 12] := @xor_s16_widestring;
  mTable_xor[4, 13] := @xor_s16_pchar;
  mTable_xor[4, 14] := @xor_s16_pointer;
  mTable_xor[4, 15] := @xor_s16_object;
  mTable_xor[5, 1] := @xor_u32_u8;
  mTable_xor[5, 2] := @xor_u32_s8;
  mTable_xor[5, 3] := @xor_u32_u16;
  mTable_xor[5, 4] := @xor_u32_s16;
  mTable_xor[5, 5] := @xor_u32_u32;
  mTable_xor[5, 6] := @xor_u32_s32;
  mTable_xor[5, 7] := @xor_u32_s64;
  mTable_xor[5, 8] := @xor_u32_single;
  mTable_xor[5, 9] := @xor_u32_double;
  mTable_xor[5, 10] := @xor_u32_string;
  mTable_xor[5, 11] := @xor_u32_utf8string;
  mTable_xor[5, 12] := @xor_u32_widestring;
  mTable_xor[5, 13] := @xor_u32_pchar;
  mTable_xor[5, 14] := @xor_u32_pointer;
  mTable_xor[5, 15] := @xor_u32_object;
  mTable_xor[6, 1] := @xor_s32_u8;
  mTable_xor[6, 2] := @xor_s32_s8;
  mTable_xor[6, 3] := @xor_s32_u16;
  mTable_xor[6, 4] := @xor_s32_s16;
  mTable_xor[6, 5] := @xor_s32_u32;
  mTable_xor[6, 6] := @xor_s32_s32;
  mTable_xor[6, 7] := @xor_s32_s64;
  mTable_xor[6, 8] := @xor_s32_single;
  mTable_xor[6, 9] := @xor_s32_double;
  mTable_xor[6, 10] := @xor_s32_string;
  mTable_xor[6, 11] := @xor_s32_utf8string;
  mTable_xor[6, 12] := @xor_s32_widestring;
  mTable_xor[6, 13] := @xor_s32_pchar;
  mTable_xor[6, 14] := @xor_s32_pointer;
  mTable_xor[6, 15] := @xor_s32_object;
  mTable_xor[7, 1] := @xor_s64_u8;
  mTable_xor[7, 2] := @xor_s64_s8;
  mTable_xor[7, 3] := @xor_s64_u16;
  mTable_xor[7, 4] := @xor_s64_s16;
  mTable_xor[7, 5] := @xor_s64_u32;
  mTable_xor[7, 6] := @xor_s64_s32;
  mTable_xor[7, 7] := @xor_s64_s64;
  mTable_xor[7, 8] := @xor_s64_single;
  mTable_xor[7, 9] := @xor_s64_double;
  mTable_xor[7, 10] := @xor_s64_string;
  mTable_xor[7, 11] := @xor_s64_utf8string;
  mTable_xor[7, 12] := @xor_s64_widestring;
  mTable_xor[7, 13] := @xor_s64_pchar;
  mTable_xor[7, 14] := @xor_s64_pointer;
  mTable_xor[7, 15] := @xor_s64_object;
  mTable_xor[8, 1] := @xor_single_u8;
  mTable_xor[8, 2] := @xor_single_s8;
  mTable_xor[8, 3] := @xor_single_u16;
  mTable_xor[8, 4] := @xor_single_s16;
  mTable_xor[8, 5] := @xor_single_u32;
  mTable_xor[8, 6] := @xor_single_s32;
  mTable_xor[8, 7] := @xor_single_s64;
  mTable_xor[8, 8] := @xor_single_single;
  mTable_xor[8, 9] := @xor_single_double;
  mTable_xor[8, 10] := @xor_single_string;
  mTable_xor[8, 11] := @xor_single_utf8string;
  mTable_xor[8, 12] := @xor_single_widestring;
  mTable_xor[8, 13] := @xor_single_pchar;
  mTable_xor[8, 14] := @xor_single_pointer;
  mTable_xor[8, 15] := @xor_single_object;
  mTable_xor[9, 1] := @xor_double_u8;
  mTable_xor[9, 2] := @xor_double_s8;
  mTable_xor[9, 3] := @xor_double_u16;
  mTable_xor[9, 4] := @xor_double_s16;
  mTable_xor[9, 5] := @xor_double_u32;
  mTable_xor[9, 6] := @xor_double_s32;
  mTable_xor[9, 7] := @xor_double_s64;
  mTable_xor[9, 8] := @xor_double_single;
  mTable_xor[9, 9] := @xor_double_double;
  mTable_xor[9, 10] := @xor_double_string;
  mTable_xor[9, 11] := @xor_double_utf8string;
  mTable_xor[9, 12] := @xor_double_widestring;
  mTable_xor[9, 13] := @xor_double_pchar;
  mTable_xor[9, 14] := @xor_double_pointer;
  mTable_xor[9, 15] := @xor_double_object;
  mTable_xor[10, 1] := @xor_string_u8;
  mTable_xor[10, 2] := @xor_string_s8;
  mTable_xor[10, 3] := @xor_string_u16;
  mTable_xor[10, 4] := @xor_string_s16;
  mTable_xor[10, 5] := @xor_string_u32;
  mTable_xor[10, 6] := @xor_string_s32;
  mTable_xor[10, 7] := @xor_string_s64;
  mTable_xor[10, 8] := @xor_string_single;
  mTable_xor[10, 9] := @xor_string_double;
  mTable_xor[10, 10] := @xor_string_string;
  mTable_xor[10, 11] := @xor_string_utf8string;
  mTable_xor[10, 12] := @xor_string_widestring;
  mTable_xor[10, 13] := @xor_string_pchar;
  mTable_xor[10, 14] := @xor_string_pointer;
  mTable_xor[10, 15] := @xor_string_object;
  mTable_xor[11, 1] := @xor_utf8string_u8;
  mTable_xor[11, 2] := @xor_utf8string_s8;
  mTable_xor[11, 3] := @xor_utf8string_u16;
  mTable_xor[11, 4] := @xor_utf8string_s16;
  mTable_xor[11, 5] := @xor_utf8string_u32;
  mTable_xor[11, 6] := @xor_utf8string_s32;
  mTable_xor[11, 7] := @xor_utf8string_s64;
  mTable_xor[11, 8] := @xor_utf8string_single;
  mTable_xor[11, 9] := @xor_utf8string_double;
  mTable_xor[11, 10] := @xor_utf8string_string;
  mTable_xor[11, 11] := @xor_utf8string_utf8string;
  mTable_xor[11, 12] := @xor_utf8string_widestring;
  mTable_xor[11, 13] := @xor_utf8string_pchar;
  mTable_xor[11, 14] := @xor_utf8string_pointer;
  mTable_xor[11, 15] := @xor_utf8string_object;
  mTable_xor[12, 1] := @xor_widestring_u8;
  mTable_xor[12, 2] := @xor_widestring_s8;
  mTable_xor[12, 3] := @xor_widestring_u16;
  mTable_xor[12, 4] := @xor_widestring_s16;
  mTable_xor[12, 5] := @xor_widestring_u32;
  mTable_xor[12, 6] := @xor_widestring_s32;
  mTable_xor[12, 7] := @xor_widestring_s64;
  mTable_xor[12, 8] := @xor_widestring_single;
  mTable_xor[12, 9] := @xor_widestring_double;
  mTable_xor[12, 10] := @xor_widestring_string;
  mTable_xor[12, 11] := @xor_widestring_utf8string;
  mTable_xor[12, 12] := @xor_widestring_widestring;
  mTable_xor[12, 13] := @xor_widestring_pchar;
  mTable_xor[12, 14] := @xor_widestring_pointer;
  mTable_xor[12, 15] := @xor_widestring_object;
  mTable_xor[13, 1] := @xor_pchar_u8;
  mTable_xor[13, 2] := @xor_pchar_s8;
  mTable_xor[13, 3] := @xor_pchar_u16;
  mTable_xor[13, 4] := @xor_pchar_s16;
  mTable_xor[13, 5] := @xor_pchar_u32;
  mTable_xor[13, 6] := @xor_pchar_s32;
  mTable_xor[13, 7] := @xor_pchar_s64;
  mTable_xor[13, 8] := @xor_pchar_single;
  mTable_xor[13, 9] := @xor_pchar_double;
  mTable_xor[13, 10] := @xor_pchar_string;
  mTable_xor[13, 11] := @xor_pchar_utf8string;
  mTable_xor[13, 12] := @xor_pchar_widestring;
  mTable_xor[13, 13] := @xor_pchar_pchar;
  mTable_xor[13, 14] := @xor_pchar_pointer;
  mTable_xor[13, 15] := @xor_pchar_object;
  mTable_xor[14, 1] := @xor_pointer_u8;
  mTable_xor[14, 2] := @xor_pointer_s8;
  mTable_xor[14, 3] := @xor_pointer_u16;
  mTable_xor[14, 4] := @xor_pointer_s16;
  mTable_xor[14, 5] := @xor_pointer_u32;
  mTable_xor[14, 6] := @xor_pointer_s32;
  mTable_xor[14, 7] := @xor_pointer_s64;
  mTable_xor[14, 8] := @xor_pointer_single;
  mTable_xor[14, 9] := @xor_pointer_double;
  mTable_xor[14, 10] := @xor_pointer_string;
  mTable_xor[14, 11] := @xor_pointer_utf8string;
  mTable_xor[14, 12] := @xor_pointer_widestring;
  mTable_xor[14, 13] := @xor_pointer_pchar;
  mTable_xor[14, 14] := @xor_pointer_pointer;
  mTable_xor[14, 15] := @xor_pointer_object;
  mTable_xor[15, 1] := @xor_object_u8;
  mTable_xor[15, 2] := @xor_object_s8;
  mTable_xor[15, 3] := @xor_object_u16;
  mTable_xor[15, 4] := @xor_object_s16;
  mTable_xor[15, 5] := @xor_object_u32;
  mTable_xor[15, 6] := @xor_object_s32;
  mTable_xor[15, 7] := @xor_object_s64;
  mTable_xor[15, 8] := @xor_object_single;
  mTable_xor[15, 9] := @xor_object_double;
  mTable_xor[15, 10] := @xor_object_string;
  mTable_xor[15, 11] := @xor_object_utf8string;
  mTable_xor[15, 12] := @xor_object_widestring;
  mTable_xor[15, 13] := @xor_object_pchar;
  mTable_xor[15, 14] := @xor_object_pointer;
  mTable_xor[15, 15] := @xor_object_object;
end;

procedure InitTable_shr;
begin
  mTable_shr[1, 1] := @shr_u8_u8;
  mTable_shr[1, 2] := @shr_u8_s8;
  mTable_shr[1, 3] := @shr_u8_u16;
  mTable_shr[1, 4] := @shr_u8_s16;
  mTable_shr[1, 5] := @shr_u8_u32;
  mTable_shr[1, 6] := @shr_u8_s32;
  mTable_shr[1, 7] := @shr_u8_s64;
  mTable_shr[1, 8] := @shr_u8_single;
  mTable_shr[1, 9] := @shr_u8_double;
  mTable_shr[1, 10] := @shr_u8_string;
  mTable_shr[1, 11] := @shr_u8_utf8string;
  mTable_shr[1, 12] := @shr_u8_widestring;
  mTable_shr[1, 13] := @shr_u8_pchar;
  mTable_shr[1, 14] := @shr_u8_pointer;
  mTable_shr[1, 15] := @shr_u8_object;
  mTable_shr[2, 1] := @shr_s8_u8;
  mTable_shr[2, 2] := @shr_s8_s8;
  mTable_shr[2, 3] := @shr_s8_u16;
  mTable_shr[2, 4] := @shr_s8_s16;
  mTable_shr[2, 5] := @shr_s8_u32;
  mTable_shr[2, 6] := @shr_s8_s32;
  mTable_shr[2, 7] := @shr_s8_s64;
  mTable_shr[2, 8] := @shr_s8_single;
  mTable_shr[2, 9] := @shr_s8_double;
  mTable_shr[2, 10] := @shr_s8_string;
  mTable_shr[2, 11] := @shr_s8_utf8string;
  mTable_shr[2, 12] := @shr_s8_widestring;
  mTable_shr[2, 13] := @shr_s8_pchar;
  mTable_shr[2, 14] := @shr_s8_pointer;
  mTable_shr[2, 15] := @shr_s8_object;
  mTable_shr[3, 1] := @shr_u16_u8;
  mTable_shr[3, 2] := @shr_u16_s8;
  mTable_shr[3, 3] := @shr_u16_u16;
  mTable_shr[3, 4] := @shr_u16_s16;
  mTable_shr[3, 5] := @shr_u16_u32;
  mTable_shr[3, 6] := @shr_u16_s32;
  mTable_shr[3, 7] := @shr_u16_s64;
  mTable_shr[3, 8] := @shr_u16_single;
  mTable_shr[3, 9] := @shr_u16_double;
  mTable_shr[3, 10] := @shr_u16_string;
  mTable_shr[3, 11] := @shr_u16_utf8string;
  mTable_shr[3, 12] := @shr_u16_widestring;
  mTable_shr[3, 13] := @shr_u16_pchar;
  mTable_shr[3, 14] := @shr_u16_pointer;
  mTable_shr[3, 15] := @shr_u16_object;
  mTable_shr[4, 1] := @shr_s16_u8;
  mTable_shr[4, 2] := @shr_s16_s8;
  mTable_shr[4, 3] := @shr_s16_u16;
  mTable_shr[4, 4] := @shr_s16_s16;
  mTable_shr[4, 5] := @shr_s16_u32;
  mTable_shr[4, 6] := @shr_s16_s32;
  mTable_shr[4, 7] := @shr_s16_s64;
  mTable_shr[4, 8] := @shr_s16_single;
  mTable_shr[4, 9] := @shr_s16_double;
  mTable_shr[4, 10] := @shr_s16_string;
  mTable_shr[4, 11] := @shr_s16_utf8string;
  mTable_shr[4, 12] := @shr_s16_widestring;
  mTable_shr[4, 13] := @shr_s16_pchar;
  mTable_shr[4, 14] := @shr_s16_pointer;
  mTable_shr[4, 15] := @shr_s16_object;
  mTable_shr[5, 1] := @shr_u32_u8;
  mTable_shr[5, 2] := @shr_u32_s8;
  mTable_shr[5, 3] := @shr_u32_u16;
  mTable_shr[5, 4] := @shr_u32_s16;
  mTable_shr[5, 5] := @shr_u32_u32;
  mTable_shr[5, 6] := @shr_u32_s32;
  mTable_shr[5, 7] := @shr_u32_s64;
  mTable_shr[5, 8] := @shr_u32_single;
  mTable_shr[5, 9] := @shr_u32_double;
  mTable_shr[5, 10] := @shr_u32_string;
  mTable_shr[5, 11] := @shr_u32_utf8string;
  mTable_shr[5, 12] := @shr_u32_widestring;
  mTable_shr[5, 13] := @shr_u32_pchar;
  mTable_shr[5, 14] := @shr_u32_pointer;
  mTable_shr[5, 15] := @shr_u32_object;
  mTable_shr[6, 1] := @shr_s32_u8;
  mTable_shr[6, 2] := @shr_s32_s8;
  mTable_shr[6, 3] := @shr_s32_u16;
  mTable_shr[6, 4] := @shr_s32_s16;
  mTable_shr[6, 5] := @shr_s32_u32;
  mTable_shr[6, 6] := @shr_s32_s32;
  mTable_shr[6, 7] := @shr_s32_s64;
  mTable_shr[6, 8] := @shr_s32_single;
  mTable_shr[6, 9] := @shr_s32_double;
  mTable_shr[6, 10] := @shr_s32_string;
  mTable_shr[6, 11] := @shr_s32_utf8string;
  mTable_shr[6, 12] := @shr_s32_widestring;
  mTable_shr[6, 13] := @shr_s32_pchar;
  mTable_shr[6, 14] := @shr_s32_pointer;
  mTable_shr[6, 15] := @shr_s32_object;
  mTable_shr[7, 1] := @shr_s64_u8;
  mTable_shr[7, 2] := @shr_s64_s8;
  mTable_shr[7, 3] := @shr_s64_u16;
  mTable_shr[7, 4] := @shr_s64_s16;
  mTable_shr[7, 5] := @shr_s64_u32;
  mTable_shr[7, 6] := @shr_s64_s32;
  mTable_shr[7, 7] := @shr_s64_s64;
  mTable_shr[7, 8] := @shr_s64_single;
  mTable_shr[7, 9] := @shr_s64_double;
  mTable_shr[7, 10] := @shr_s64_string;
  mTable_shr[7, 11] := @shr_s64_utf8string;
  mTable_shr[7, 12] := @shr_s64_widestring;
  mTable_shr[7, 13] := @shr_s64_pchar;
  mTable_shr[7, 14] := @shr_s64_pointer;
  mTable_shr[7, 15] := @shr_s64_object;
  mTable_shr[8, 1] := @shr_single_u8;
  mTable_shr[8, 2] := @shr_single_s8;
  mTable_shr[8, 3] := @shr_single_u16;
  mTable_shr[8, 4] := @shr_single_s16;
  mTable_shr[8, 5] := @shr_single_u32;
  mTable_shr[8, 6] := @shr_single_s32;
  mTable_shr[8, 7] := @shr_single_s64;
  mTable_shr[8, 8] := @shr_single_single;
  mTable_shr[8, 9] := @shr_single_double;
  mTable_shr[8, 10] := @shr_single_string;
  mTable_shr[8, 11] := @shr_single_utf8string;
  mTable_shr[8, 12] := @shr_single_widestring;
  mTable_shr[8, 13] := @shr_single_pchar;
  mTable_shr[8, 14] := @shr_single_pointer;
  mTable_shr[8, 15] := @shr_single_object;
  mTable_shr[9, 1] := @shr_double_u8;
  mTable_shr[9, 2] := @shr_double_s8;
  mTable_shr[9, 3] := @shr_double_u16;
  mTable_shr[9, 4] := @shr_double_s16;
  mTable_shr[9, 5] := @shr_double_u32;
  mTable_shr[9, 6] := @shr_double_s32;
  mTable_shr[9, 7] := @shr_double_s64;
  mTable_shr[9, 8] := @shr_double_single;
  mTable_shr[9, 9] := @shr_double_double;
  mTable_shr[9, 10] := @shr_double_string;
  mTable_shr[9, 11] := @shr_double_utf8string;
  mTable_shr[9, 12] := @shr_double_widestring;
  mTable_shr[9, 13] := @shr_double_pchar;
  mTable_shr[9, 14] := @shr_double_pointer;
  mTable_shr[9, 15] := @shr_double_object;
  mTable_shr[10, 1] := @shr_string_u8;
  mTable_shr[10, 2] := @shr_string_s8;
  mTable_shr[10, 3] := @shr_string_u16;
  mTable_shr[10, 4] := @shr_string_s16;
  mTable_shr[10, 5] := @shr_string_u32;
  mTable_shr[10, 6] := @shr_string_s32;
  mTable_shr[10, 7] := @shr_string_s64;
  mTable_shr[10, 8] := @shr_string_single;
  mTable_shr[10, 9] := @shr_string_double;
  mTable_shr[10, 10] := @shr_string_string;
  mTable_shr[10, 11] := @shr_string_utf8string;
  mTable_shr[10, 12] := @shr_string_widestring;
  mTable_shr[10, 13] := @shr_string_pchar;
  mTable_shr[10, 14] := @shr_string_pointer;
  mTable_shr[10, 15] := @shr_string_object;
  mTable_shr[11, 1] := @shr_utf8string_u8;
  mTable_shr[11, 2] := @shr_utf8string_s8;
  mTable_shr[11, 3] := @shr_utf8string_u16;
  mTable_shr[11, 4] := @shr_utf8string_s16;
  mTable_shr[11, 5] := @shr_utf8string_u32;
  mTable_shr[11, 6] := @shr_utf8string_s32;
  mTable_shr[11, 7] := @shr_utf8string_s64;
  mTable_shr[11, 8] := @shr_utf8string_single;
  mTable_shr[11, 9] := @shr_utf8string_double;
  mTable_shr[11, 10] := @shr_utf8string_string;
  mTable_shr[11, 11] := @shr_utf8string_utf8string;
  mTable_shr[11, 12] := @shr_utf8string_widestring;
  mTable_shr[11, 13] := @shr_utf8string_pchar;
  mTable_shr[11, 14] := @shr_utf8string_pointer;
  mTable_shr[11, 15] := @shr_utf8string_object;
  mTable_shr[12, 1] := @shr_widestring_u8;
  mTable_shr[12, 2] := @shr_widestring_s8;
  mTable_shr[12, 3] := @shr_widestring_u16;
  mTable_shr[12, 4] := @shr_widestring_s16;
  mTable_shr[12, 5] := @shr_widestring_u32;
  mTable_shr[12, 6] := @shr_widestring_s32;
  mTable_shr[12, 7] := @shr_widestring_s64;
  mTable_shr[12, 8] := @shr_widestring_single;
  mTable_shr[12, 9] := @shr_widestring_double;
  mTable_shr[12, 10] := @shr_widestring_string;
  mTable_shr[12, 11] := @shr_widestring_utf8string;
  mTable_shr[12, 12] := @shr_widestring_widestring;
  mTable_shr[12, 13] := @shr_widestring_pchar;
  mTable_shr[12, 14] := @shr_widestring_pointer;
  mTable_shr[12, 15] := @shr_widestring_object;
  mTable_shr[13, 1] := @shr_pchar_u8;
  mTable_shr[13, 2] := @shr_pchar_s8;
  mTable_shr[13, 3] := @shr_pchar_u16;
  mTable_shr[13, 4] := @shr_pchar_s16;
  mTable_shr[13, 5] := @shr_pchar_u32;
  mTable_shr[13, 6] := @shr_pchar_s32;
  mTable_shr[13, 7] := @shr_pchar_s64;
  mTable_shr[13, 8] := @shr_pchar_single;
  mTable_shr[13, 9] := @shr_pchar_double;
  mTable_shr[13, 10] := @shr_pchar_string;
  mTable_shr[13, 11] := @shr_pchar_utf8string;
  mTable_shr[13, 12] := @shr_pchar_widestring;
  mTable_shr[13, 13] := @shr_pchar_pchar;
  mTable_shr[13, 14] := @shr_pchar_pointer;
  mTable_shr[13, 15] := @shr_pchar_object;
  mTable_shr[14, 1] := @shr_pointer_u8;
  mTable_shr[14, 2] := @shr_pointer_s8;
  mTable_shr[14, 3] := @shr_pointer_u16;
  mTable_shr[14, 4] := @shr_pointer_s16;
  mTable_shr[14, 5] := @shr_pointer_u32;
  mTable_shr[14, 6] := @shr_pointer_s32;
  mTable_shr[14, 7] := @shr_pointer_s64;
  mTable_shr[14, 8] := @shr_pointer_single;
  mTable_shr[14, 9] := @shr_pointer_double;
  mTable_shr[14, 10] := @shr_pointer_string;
  mTable_shr[14, 11] := @shr_pointer_utf8string;
  mTable_shr[14, 12] := @shr_pointer_widestring;
  mTable_shr[14, 13] := @shr_pointer_pchar;
  mTable_shr[14, 14] := @shr_pointer_pointer;
  mTable_shr[14, 15] := @shr_pointer_object;
  mTable_shr[15, 1] := @shr_object_u8;
  mTable_shr[15, 2] := @shr_object_s8;
  mTable_shr[15, 3] := @shr_object_u16;
  mTable_shr[15, 4] := @shr_object_s16;
  mTable_shr[15, 5] := @shr_object_u32;
  mTable_shr[15, 6] := @shr_object_s32;
  mTable_shr[15, 7] := @shr_object_s64;
  mTable_shr[15, 8] := @shr_object_single;
  mTable_shr[15, 9] := @shr_object_double;
  mTable_shr[15, 10] := @shr_object_string;
  mTable_shr[15, 11] := @shr_object_utf8string;
  mTable_shr[15, 12] := @shr_object_widestring;
  mTable_shr[15, 13] := @shr_object_pchar;
  mTable_shr[15, 14] := @shr_object_pointer;
  mTable_shr[15, 15] := @shr_object_object;
end;

procedure InitTable_shl;
begin
  mTable_shl[1, 1] := @shl_u8_u8;
  mTable_shl[1, 2] := @shl_u8_s8;
  mTable_shl[1, 3] := @shl_u8_u16;
  mTable_shl[1, 4] := @shl_u8_s16;
  mTable_shl[1, 5] := @shl_u8_u32;
  mTable_shl[1, 6] := @shl_u8_s32;
  mTable_shl[1, 7] := @shl_u8_s64;
  mTable_shl[1, 8] := @shl_u8_single;
  mTable_shl[1, 9] := @shl_u8_double;
  mTable_shl[1, 10] := @shl_u8_string;
  mTable_shl[1, 11] := @shl_u8_utf8string;
  mTable_shl[1, 12] := @shl_u8_widestring;
  mTable_shl[1, 13] := @shl_u8_pchar;
  mTable_shl[1, 14] := @shl_u8_pointer;
  mTable_shl[1, 15] := @shl_u8_object;
  mTable_shl[2, 1] := @shl_s8_u8;
  mTable_shl[2, 2] := @shl_s8_s8;
  mTable_shl[2, 3] := @shl_s8_u16;
  mTable_shl[2, 4] := @shl_s8_s16;
  mTable_shl[2, 5] := @shl_s8_u32;
  mTable_shl[2, 6] := @shl_s8_s32;
  mTable_shl[2, 7] := @shl_s8_s64;
  mTable_shl[2, 8] := @shl_s8_single;
  mTable_shl[2, 9] := @shl_s8_double;
  mTable_shl[2, 10] := @shl_s8_string;
  mTable_shl[2, 11] := @shl_s8_utf8string;
  mTable_shl[2, 12] := @shl_s8_widestring;
  mTable_shl[2, 13] := @shl_s8_pchar;
  mTable_shl[2, 14] := @shl_s8_pointer;
  mTable_shl[2, 15] := @shl_s8_object;
  mTable_shl[3, 1] := @shl_u16_u8;
  mTable_shl[3, 2] := @shl_u16_s8;
  mTable_shl[3, 3] := @shl_u16_u16;
  mTable_shl[3, 4] := @shl_u16_s16;
  mTable_shl[3, 5] := @shl_u16_u32;
  mTable_shl[3, 6] := @shl_u16_s32;
  mTable_shl[3, 7] := @shl_u16_s64;
  mTable_shl[3, 8] := @shl_u16_single;
  mTable_shl[3, 9] := @shl_u16_double;
  mTable_shl[3, 10] := @shl_u16_string;
  mTable_shl[3, 11] := @shl_u16_utf8string;
  mTable_shl[3, 12] := @shl_u16_widestring;
  mTable_shl[3, 13] := @shl_u16_pchar;
  mTable_shl[3, 14] := @shl_u16_pointer;
  mTable_shl[3, 15] := @shl_u16_object;
  mTable_shl[4, 1] := @shl_s16_u8;
  mTable_shl[4, 2] := @shl_s16_s8;
  mTable_shl[4, 3] := @shl_s16_u16;
  mTable_shl[4, 4] := @shl_s16_s16;
  mTable_shl[4, 5] := @shl_s16_u32;
  mTable_shl[4, 6] := @shl_s16_s32;
  mTable_shl[4, 7] := @shl_s16_s64;
  mTable_shl[4, 8] := @shl_s16_single;
  mTable_shl[4, 9] := @shl_s16_double;
  mTable_shl[4, 10] := @shl_s16_string;
  mTable_shl[4, 11] := @shl_s16_utf8string;
  mTable_shl[4, 12] := @shl_s16_widestring;
  mTable_shl[4, 13] := @shl_s16_pchar;
  mTable_shl[4, 14] := @shl_s16_pointer;
  mTable_shl[4, 15] := @shl_s16_object;
  mTable_shl[5, 1] := @shl_u32_u8;
  mTable_shl[5, 2] := @shl_u32_s8;
  mTable_shl[5, 3] := @shl_u32_u16;
  mTable_shl[5, 4] := @shl_u32_s16;
  mTable_shl[5, 5] := @shl_u32_u32;
  mTable_shl[5, 6] := @shl_u32_s32;
  mTable_shl[5, 7] := @shl_u32_s64;
  mTable_shl[5, 8] := @shl_u32_single;
  mTable_shl[5, 9] := @shl_u32_double;
  mTable_shl[5, 10] := @shl_u32_string;
  mTable_shl[5, 11] := @shl_u32_utf8string;
  mTable_shl[5, 12] := @shl_u32_widestring;
  mTable_shl[5, 13] := @shl_u32_pchar;
  mTable_shl[5, 14] := @shl_u32_pointer;
  mTable_shl[5, 15] := @shl_u32_object;
  mTable_shl[6, 1] := @shl_s32_u8;
  mTable_shl[6, 2] := @shl_s32_s8;
  mTable_shl[6, 3] := @shl_s32_u16;
  mTable_shl[6, 4] := @shl_s32_s16;
  mTable_shl[6, 5] := @shl_s32_u32;
  mTable_shl[6, 6] := @shl_s32_s32;
  mTable_shl[6, 7] := @shl_s32_s64;
  mTable_shl[6, 8] := @shl_s32_single;
  mTable_shl[6, 9] := @shl_s32_double;
  mTable_shl[6, 10] := @shl_s32_string;
  mTable_shl[6, 11] := @shl_s32_utf8string;
  mTable_shl[6, 12] := @shl_s32_widestring;
  mTable_shl[6, 13] := @shl_s32_pchar;
  mTable_shl[6, 14] := @shl_s32_pointer;
  mTable_shl[6, 15] := @shl_s32_object;
  mTable_shl[7, 1] := @shl_s64_u8;
  mTable_shl[7, 2] := @shl_s64_s8;
  mTable_shl[7, 3] := @shl_s64_u16;
  mTable_shl[7, 4] := @shl_s64_s16;
  mTable_shl[7, 5] := @shl_s64_u32;
  mTable_shl[7, 6] := @shl_s64_s32;
  mTable_shl[7, 7] := @shl_s64_s64;
  mTable_shl[7, 8] := @shl_s64_single;
  mTable_shl[7, 9] := @shl_s64_double;
  mTable_shl[7, 10] := @shl_s64_string;
  mTable_shl[7, 11] := @shl_s64_utf8string;
  mTable_shl[7, 12] := @shl_s64_widestring;
  mTable_shl[7, 13] := @shl_s64_pchar;
  mTable_shl[7, 14] := @shl_s64_pointer;
  mTable_shl[7, 15] := @shl_s64_object;
  mTable_shl[8, 1] := @shl_single_u8;
  mTable_shl[8, 2] := @shl_single_s8;
  mTable_shl[8, 3] := @shl_single_u16;
  mTable_shl[8, 4] := @shl_single_s16;
  mTable_shl[8, 5] := @shl_single_u32;
  mTable_shl[8, 6] := @shl_single_s32;
  mTable_shl[8, 7] := @shl_single_s64;
  mTable_shl[8, 8] := @shl_single_single;
  mTable_shl[8, 9] := @shl_single_double;
  mTable_shl[8, 10] := @shl_single_string;
  mTable_shl[8, 11] := @shl_single_utf8string;
  mTable_shl[8, 12] := @shl_single_widestring;
  mTable_shl[8, 13] := @shl_single_pchar;
  mTable_shl[8, 14] := @shl_single_pointer;
  mTable_shl[8, 15] := @shl_single_object;
  mTable_shl[9, 1] := @shl_double_u8;
  mTable_shl[9, 2] := @shl_double_s8;
  mTable_shl[9, 3] := @shl_double_u16;
  mTable_shl[9, 4] := @shl_double_s16;
  mTable_shl[9, 5] := @shl_double_u32;
  mTable_shl[9, 6] := @shl_double_s32;
  mTable_shl[9, 7] := @shl_double_s64;
  mTable_shl[9, 8] := @shl_double_single;
  mTable_shl[9, 9] := @shl_double_double;
  mTable_shl[9, 10] := @shl_double_string;
  mTable_shl[9, 11] := @shl_double_utf8string;
  mTable_shl[9, 12] := @shl_double_widestring;
  mTable_shl[9, 13] := @shl_double_pchar;
  mTable_shl[9, 14] := @shl_double_pointer;
  mTable_shl[9, 15] := @shl_double_object;
  mTable_shl[10, 1] := @shl_string_u8;
  mTable_shl[10, 2] := @shl_string_s8;
  mTable_shl[10, 3] := @shl_string_u16;
  mTable_shl[10, 4] := @shl_string_s16;
  mTable_shl[10, 5] := @shl_string_u32;
  mTable_shl[10, 6] := @shl_string_s32;
  mTable_shl[10, 7] := @shl_string_s64;
  mTable_shl[10, 8] := @shl_string_single;
  mTable_shl[10, 9] := @shl_string_double;
  mTable_shl[10, 10] := @shl_string_string;
  mTable_shl[10, 11] := @shl_string_utf8string;
  mTable_shl[10, 12] := @shl_string_widestring;
  mTable_shl[10, 13] := @shl_string_pchar;
  mTable_shl[10, 14] := @shl_string_pointer;
  mTable_shl[10, 15] := @shl_string_object;
  mTable_shl[11, 1] := @shl_utf8string_u8;
  mTable_shl[11, 2] := @shl_utf8string_s8;
  mTable_shl[11, 3] := @shl_utf8string_u16;
  mTable_shl[11, 4] := @shl_utf8string_s16;
  mTable_shl[11, 5] := @shl_utf8string_u32;
  mTable_shl[11, 6] := @shl_utf8string_s32;
  mTable_shl[11, 7] := @shl_utf8string_s64;
  mTable_shl[11, 8] := @shl_utf8string_single;
  mTable_shl[11, 9] := @shl_utf8string_double;
  mTable_shl[11, 10] := @shl_utf8string_string;
  mTable_shl[11, 11] := @shl_utf8string_utf8string;
  mTable_shl[11, 12] := @shl_utf8string_widestring;
  mTable_shl[11, 13] := @shl_utf8string_pchar;
  mTable_shl[11, 14] := @shl_utf8string_pointer;
  mTable_shl[11, 15] := @shl_utf8string_object;
  mTable_shl[12, 1] := @shl_widestring_u8;
  mTable_shl[12, 2] := @shl_widestring_s8;
  mTable_shl[12, 3] := @shl_widestring_u16;
  mTable_shl[12, 4] := @shl_widestring_s16;
  mTable_shl[12, 5] := @shl_widestring_u32;
  mTable_shl[12, 6] := @shl_widestring_s32;
  mTable_shl[12, 7] := @shl_widestring_s64;
  mTable_shl[12, 8] := @shl_widestring_single;
  mTable_shl[12, 9] := @shl_widestring_double;
  mTable_shl[12, 10] := @shl_widestring_string;
  mTable_shl[12, 11] := @shl_widestring_utf8string;
  mTable_shl[12, 12] := @shl_widestring_widestring;
  mTable_shl[12, 13] := @shl_widestring_pchar;
  mTable_shl[12, 14] := @shl_widestring_pointer;
  mTable_shl[12, 15] := @shl_widestring_object;
  mTable_shl[13, 1] := @shl_pchar_u8;
  mTable_shl[13, 2] := @shl_pchar_s8;
  mTable_shl[13, 3] := @shl_pchar_u16;
  mTable_shl[13, 4] := @shl_pchar_s16;
  mTable_shl[13, 5] := @shl_pchar_u32;
  mTable_shl[13, 6] := @shl_pchar_s32;
  mTable_shl[13, 7] := @shl_pchar_s64;
  mTable_shl[13, 8] := @shl_pchar_single;
  mTable_shl[13, 9] := @shl_pchar_double;
  mTable_shl[13, 10] := @shl_pchar_string;
  mTable_shl[13, 11] := @shl_pchar_utf8string;
  mTable_shl[13, 12] := @shl_pchar_widestring;
  mTable_shl[13, 13] := @shl_pchar_pchar;
  mTable_shl[13, 14] := @shl_pchar_pointer;
  mTable_shl[13, 15] := @shl_pchar_object;
  mTable_shl[14, 1] := @shl_pointer_u8;
  mTable_shl[14, 2] := @shl_pointer_s8;
  mTable_shl[14, 3] := @shl_pointer_u16;
  mTable_shl[14, 4] := @shl_pointer_s16;
  mTable_shl[14, 5] := @shl_pointer_u32;
  mTable_shl[14, 6] := @shl_pointer_s32;
  mTable_shl[14, 7] := @shl_pointer_s64;
  mTable_shl[14, 8] := @shl_pointer_single;
  mTable_shl[14, 9] := @shl_pointer_double;
  mTable_shl[14, 10] := @shl_pointer_string;
  mTable_shl[14, 11] := @shl_pointer_utf8string;
  mTable_shl[14, 12] := @shl_pointer_widestring;
  mTable_shl[14, 13] := @shl_pointer_pchar;
  mTable_shl[14, 14] := @shl_pointer_pointer;
  mTable_shl[14, 15] := @shl_pointer_object;
  mTable_shl[15, 1] := @shl_object_u8;
  mTable_shl[15, 2] := @shl_object_s8;
  mTable_shl[15, 3] := @shl_object_u16;
  mTable_shl[15, 4] := @shl_object_s16;
  mTable_shl[15, 5] := @shl_object_u32;
  mTable_shl[15, 6] := @shl_object_s32;
  mTable_shl[15, 7] := @shl_object_s64;
  mTable_shl[15, 8] := @shl_object_single;
  mTable_shl[15, 9] := @shl_object_double;
  mTable_shl[15, 10] := @shl_object_string;
  mTable_shl[15, 11] := @shl_object_utf8string;
  mTable_shl[15, 12] := @shl_object_widestring;
  mTable_shl[15, 13] := @shl_object_pchar;
  mTable_shl[15, 14] := @shl_object_pointer;
  mTable_shl[15, 15] := @shl_object_object;
end;

procedure InitTable_mod;
begin
  mTable_mod[1, 1] := @mod_u8_u8;
  mTable_mod[1, 2] := @mod_u8_s8;
  mTable_mod[1, 3] := @mod_u8_u16;
  mTable_mod[1, 4] := @mod_u8_s16;
  mTable_mod[1, 5] := @mod_u8_u32;
  mTable_mod[1, 6] := @mod_u8_s32;
  mTable_mod[1, 7] := @mod_u8_s64;
  mTable_mod[1, 8] := @mod_u8_single;
  mTable_mod[1, 9] := @mod_u8_double;
  mTable_mod[1, 10] := @mod_u8_string;
  mTable_mod[1, 11] := @mod_u8_utf8string;
  mTable_mod[1, 12] := @mod_u8_widestring;
  mTable_mod[1, 13] := @mod_u8_pchar;
  mTable_mod[1, 14] := @mod_u8_pointer;
  mTable_mod[1, 15] := @mod_u8_object;
  mTable_mod[2, 1] := @mod_s8_u8;
  mTable_mod[2, 2] := @mod_s8_s8;
  mTable_mod[2, 3] := @mod_s8_u16;
  mTable_mod[2, 4] := @mod_s8_s16;
  mTable_mod[2, 5] := @mod_s8_u32;
  mTable_mod[2, 6] := @mod_s8_s32;
  mTable_mod[2, 7] := @mod_s8_s64;
  mTable_mod[2, 8] := @mod_s8_single;
  mTable_mod[2, 9] := @mod_s8_double;
  mTable_mod[2, 10] := @mod_s8_string;
  mTable_mod[2, 11] := @mod_s8_utf8string;
  mTable_mod[2, 12] := @mod_s8_widestring;
  mTable_mod[2, 13] := @mod_s8_pchar;
  mTable_mod[2, 14] := @mod_s8_pointer;
  mTable_mod[2, 15] := @mod_s8_object;
  mTable_mod[3, 1] := @mod_u16_u8;
  mTable_mod[3, 2] := @mod_u16_s8;
  mTable_mod[3, 3] := @mod_u16_u16;
  mTable_mod[3, 4] := @mod_u16_s16;
  mTable_mod[3, 5] := @mod_u16_u32;
  mTable_mod[3, 6] := @mod_u16_s32;
  mTable_mod[3, 7] := @mod_u16_s64;
  mTable_mod[3, 8] := @mod_u16_single;
  mTable_mod[3, 9] := @mod_u16_double;
  mTable_mod[3, 10] := @mod_u16_string;
  mTable_mod[3, 11] := @mod_u16_utf8string;
  mTable_mod[3, 12] := @mod_u16_widestring;
  mTable_mod[3, 13] := @mod_u16_pchar;
  mTable_mod[3, 14] := @mod_u16_pointer;
  mTable_mod[3, 15] := @mod_u16_object;
  mTable_mod[4, 1] := @mod_s16_u8;
  mTable_mod[4, 2] := @mod_s16_s8;
  mTable_mod[4, 3] := @mod_s16_u16;
  mTable_mod[4, 4] := @mod_s16_s16;
  mTable_mod[4, 5] := @mod_s16_u32;
  mTable_mod[4, 6] := @mod_s16_s32;
  mTable_mod[4, 7] := @mod_s16_s64;
  mTable_mod[4, 8] := @mod_s16_single;
  mTable_mod[4, 9] := @mod_s16_double;
  mTable_mod[4, 10] := @mod_s16_string;
  mTable_mod[4, 11] := @mod_s16_utf8string;
  mTable_mod[4, 12] := @mod_s16_widestring;
  mTable_mod[4, 13] := @mod_s16_pchar;
  mTable_mod[4, 14] := @mod_s16_pointer;
  mTable_mod[4, 15] := @mod_s16_object;
  mTable_mod[5, 1] := @mod_u32_u8;
  mTable_mod[5, 2] := @mod_u32_s8;
  mTable_mod[5, 3] := @mod_u32_u16;
  mTable_mod[5, 4] := @mod_u32_s16;
  mTable_mod[5, 5] := @mod_u32_u32;
  mTable_mod[5, 6] := @mod_u32_s32;
  mTable_mod[5, 7] := @mod_u32_s64;
  mTable_mod[5, 8] := @mod_u32_single;
  mTable_mod[5, 9] := @mod_u32_double;
  mTable_mod[5, 10] := @mod_u32_string;
  mTable_mod[5, 11] := @mod_u32_utf8string;
  mTable_mod[5, 12] := @mod_u32_widestring;
  mTable_mod[5, 13] := @mod_u32_pchar;
  mTable_mod[5, 14] := @mod_u32_pointer;
  mTable_mod[5, 15] := @mod_u32_object;
  mTable_mod[6, 1] := @mod_s32_u8;
  mTable_mod[6, 2] := @mod_s32_s8;
  mTable_mod[6, 3] := @mod_s32_u16;
  mTable_mod[6, 4] := @mod_s32_s16;
  mTable_mod[6, 5] := @mod_s32_u32;
  mTable_mod[6, 6] := @mod_s32_s32;
  mTable_mod[6, 7] := @mod_s32_s64;
  mTable_mod[6, 8] := @mod_s32_single;
  mTable_mod[6, 9] := @mod_s32_double;
  mTable_mod[6, 10] := @mod_s32_string;
  mTable_mod[6, 11] := @mod_s32_utf8string;
  mTable_mod[6, 12] := @mod_s32_widestring;
  mTable_mod[6, 13] := @mod_s32_pchar;
  mTable_mod[6, 14] := @mod_s32_pointer;
  mTable_mod[6, 15] := @mod_s32_object;
  mTable_mod[7, 1] := @mod_s64_u8;
  mTable_mod[7, 2] := @mod_s64_s8;
  mTable_mod[7, 3] := @mod_s64_u16;
  mTable_mod[7, 4] := @mod_s64_s16;
  mTable_mod[7, 5] := @mod_s64_u32;
  mTable_mod[7, 6] := @mod_s64_s32;
  mTable_mod[7, 7] := @mod_s64_s64;
  mTable_mod[7, 8] := @mod_s64_single;
  mTable_mod[7, 9] := @mod_s64_double;
  mTable_mod[7, 10] := @mod_s64_string;
  mTable_mod[7, 11] := @mod_s64_utf8string;
  mTable_mod[7, 12] := @mod_s64_widestring;
  mTable_mod[7, 13] := @mod_s64_pchar;
  mTable_mod[7, 14] := @mod_s64_pointer;
  mTable_mod[7, 15] := @mod_s64_object;
  mTable_mod[8, 1] := @mod_single_u8;
  mTable_mod[8, 2] := @mod_single_s8;
  mTable_mod[8, 3] := @mod_single_u16;
  mTable_mod[8, 4] := @mod_single_s16;
  mTable_mod[8, 5] := @mod_single_u32;
  mTable_mod[8, 6] := @mod_single_s32;
  mTable_mod[8, 7] := @mod_single_s64;
  mTable_mod[8, 8] := @mod_single_single;
  mTable_mod[8, 9] := @mod_single_double;
  mTable_mod[8, 10] := @mod_single_string;
  mTable_mod[8, 11] := @mod_single_utf8string;
  mTable_mod[8, 12] := @mod_single_widestring;
  mTable_mod[8, 13] := @mod_single_pchar;
  mTable_mod[8, 14] := @mod_single_pointer;
  mTable_mod[8, 15] := @mod_single_object;
  mTable_mod[9, 1] := @mod_double_u8;
  mTable_mod[9, 2] := @mod_double_s8;
  mTable_mod[9, 3] := @mod_double_u16;
  mTable_mod[9, 4] := @mod_double_s16;
  mTable_mod[9, 5] := @mod_double_u32;
  mTable_mod[9, 6] := @mod_double_s32;
  mTable_mod[9, 7] := @mod_double_s64;
  mTable_mod[9, 8] := @mod_double_single;
  mTable_mod[9, 9] := @mod_double_double;
  mTable_mod[9, 10] := @mod_double_string;
  mTable_mod[9, 11] := @mod_double_utf8string;
  mTable_mod[9, 12] := @mod_double_widestring;
  mTable_mod[9, 13] := @mod_double_pchar;
  mTable_mod[9, 14] := @mod_double_pointer;
  mTable_mod[9, 15] := @mod_double_object;
  mTable_mod[10, 1] := @mod_string_u8;
  mTable_mod[10, 2] := @mod_string_s8;
  mTable_mod[10, 3] := @mod_string_u16;
  mTable_mod[10, 4] := @mod_string_s16;
  mTable_mod[10, 5] := @mod_string_u32;
  mTable_mod[10, 6] := @mod_string_s32;
  mTable_mod[10, 7] := @mod_string_s64;
  mTable_mod[10, 8] := @mod_string_single;
  mTable_mod[10, 9] := @mod_string_double;
  mTable_mod[10, 10] := @mod_string_string;
  mTable_mod[10, 11] := @mod_string_utf8string;
  mTable_mod[10, 12] := @mod_string_widestring;
  mTable_mod[10, 13] := @mod_string_pchar;
  mTable_mod[10, 14] := @mod_string_pointer;
  mTable_mod[10, 15] := @mod_string_object;
  mTable_mod[11, 1] := @mod_utf8string_u8;
  mTable_mod[11, 2] := @mod_utf8string_s8;
  mTable_mod[11, 3] := @mod_utf8string_u16;
  mTable_mod[11, 4] := @mod_utf8string_s16;
  mTable_mod[11, 5] := @mod_utf8string_u32;
  mTable_mod[11, 6] := @mod_utf8string_s32;
  mTable_mod[11, 7] := @mod_utf8string_s64;
  mTable_mod[11, 8] := @mod_utf8string_single;
  mTable_mod[11, 9] := @mod_utf8string_double;
  mTable_mod[11, 10] := @mod_utf8string_string;
  mTable_mod[11, 11] := @mod_utf8string_utf8string;
  mTable_mod[11, 12] := @mod_utf8string_widestring;
  mTable_mod[11, 13] := @mod_utf8string_pchar;
  mTable_mod[11, 14] := @mod_utf8string_pointer;
  mTable_mod[11, 15] := @mod_utf8string_object;
  mTable_mod[12, 1] := @mod_widestring_u8;
  mTable_mod[12, 2] := @mod_widestring_s8;
  mTable_mod[12, 3] := @mod_widestring_u16;
  mTable_mod[12, 4] := @mod_widestring_s16;
  mTable_mod[12, 5] := @mod_widestring_u32;
  mTable_mod[12, 6] := @mod_widestring_s32;
  mTable_mod[12, 7] := @mod_widestring_s64;
  mTable_mod[12, 8] := @mod_widestring_single;
  mTable_mod[12, 9] := @mod_widestring_double;
  mTable_mod[12, 10] := @mod_widestring_string;
  mTable_mod[12, 11] := @mod_widestring_utf8string;
  mTable_mod[12, 12] := @mod_widestring_widestring;
  mTable_mod[12, 13] := @mod_widestring_pchar;
  mTable_mod[12, 14] := @mod_widestring_pointer;
  mTable_mod[12, 15] := @mod_widestring_object;
  mTable_mod[13, 1] := @mod_pchar_u8;
  mTable_mod[13, 2] := @mod_pchar_s8;
  mTable_mod[13, 3] := @mod_pchar_u16;
  mTable_mod[13, 4] := @mod_pchar_s16;
  mTable_mod[13, 5] := @mod_pchar_u32;
  mTable_mod[13, 6] := @mod_pchar_s32;
  mTable_mod[13, 7] := @mod_pchar_s64;
  mTable_mod[13, 8] := @mod_pchar_single;
  mTable_mod[13, 9] := @mod_pchar_double;
  mTable_mod[13, 10] := @mod_pchar_string;
  mTable_mod[13, 11] := @mod_pchar_utf8string;
  mTable_mod[13, 12] := @mod_pchar_widestring;
  mTable_mod[13, 13] := @mod_pchar_pchar;
  mTable_mod[13, 14] := @mod_pchar_pointer;
  mTable_mod[13, 15] := @mod_pchar_object;
  mTable_mod[14, 1] := @mod_pointer_u8;
  mTable_mod[14, 2] := @mod_pointer_s8;
  mTable_mod[14, 3] := @mod_pointer_u16;
  mTable_mod[14, 4] := @mod_pointer_s16;
  mTable_mod[14, 5] := @mod_pointer_u32;
  mTable_mod[14, 6] := @mod_pointer_s32;
  mTable_mod[14, 7] := @mod_pointer_s64;
  mTable_mod[14, 8] := @mod_pointer_single;
  mTable_mod[14, 9] := @mod_pointer_double;
  mTable_mod[14, 10] := @mod_pointer_string;
  mTable_mod[14, 11] := @mod_pointer_utf8string;
  mTable_mod[14, 12] := @mod_pointer_widestring;
  mTable_mod[14, 13] := @mod_pointer_pchar;
  mTable_mod[14, 14] := @mod_pointer_pointer;
  mTable_mod[14, 15] := @mod_pointer_object;
  mTable_mod[15, 1] := @mod_object_u8;
  mTable_mod[15, 2] := @mod_object_s8;
  mTable_mod[15, 3] := @mod_object_u16;
  mTable_mod[15, 4] := @mod_object_s16;
  mTable_mod[15, 5] := @mod_object_u32;
  mTable_mod[15, 6] := @mod_object_s32;
  mTable_mod[15, 7] := @mod_object_s64;
  mTable_mod[15, 8] := @mod_object_single;
  mTable_mod[15, 9] := @mod_object_double;
  mTable_mod[15, 10] := @mod_object_string;
  mTable_mod[15, 11] := @mod_object_utf8string;
  mTable_mod[15, 12] := @mod_object_widestring;
  mTable_mod[15, 13] := @mod_object_pchar;
  mTable_mod[15, 14] := @mod_object_pointer;
  mTable_mod[15, 15] := @mod_object_object;
end;

{
type TOp_NOT = procedure(p1, p2: PSE2VarData);
var mTable_not: array[1..15, 1..15] of TOp_NOT;
               
procedure InitTable_not;
begin
  mTable_not[1, 1] := @not_u8_u8;
  mTable_not[1, 2] := @not_u8_s8;
  mTable_not[1, 3] := @not_u8_u16;
  mTable_not[1, 4] := @not_u8_s16;
  mTable_not[1, 5] := @not_u8_u32;
  mTable_not[1, 6] := @not_u8_s32;
  mTable_not[1, 7] := @not_u8_s64;
  mTable_not[1, 8] := @not_u8_single;
  mTable_not[1, 9] := @not_u8_double;
  mTable_not[1, 10] := @not_u8_string;
  mTable_not[1, 11] := @not_u8_utf8string;
  mTable_not[1, 12] := @not_u8_widestring;
  mTable_not[1, 13] := @not_u8_pchar;
  mTable_not[1, 14] := @not_u8_pointer;
  mTable_not[1, 15] := @not_u8_object;
  mTable_not[2, 1] := @not_s8_u8;
  mTable_not[2, 2] := @not_s8_s8;
  mTable_not[2, 3] := @not_s8_u16;
  mTable_not[2, 4] := @not_s8_s16;
  mTable_not[2, 5] := @not_s8_u32;
  mTable_not[2, 6] := @not_s8_s32;
  mTable_not[2, 7] := @not_s8_s64;
  mTable_not[2, 8] := @not_s8_single;
  mTable_not[2, 9] := @not_s8_double;
  mTable_not[2, 10] := @not_s8_string;
  mTable_not[2, 11] := @not_s8_utf8string;
  mTable_not[2, 12] := @not_s8_widestring;
  mTable_not[2, 13] := @not_s8_pchar;
  mTable_not[2, 14] := @not_s8_pointer;
  mTable_not[2, 15] := @not_s8_object;
  mTable_not[3, 1] := @not_u16_u8;
  mTable_not[3, 2] := @not_u16_s8;
  mTable_not[3, 3] := @not_u16_u16;
  mTable_not[3, 4] := @not_u16_s16;
  mTable_not[3, 5] := @not_u16_u32;
  mTable_not[3, 6] := @not_u16_s32;
  mTable_not[3, 7] := @not_u16_s64;
  mTable_not[3, 8] := @not_u16_single;
  mTable_not[3, 9] := @not_u16_double;
  mTable_not[3, 10] := @not_u16_string;
  mTable_not[3, 11] := @not_u16_utf8string;
  mTable_not[3, 12] := @not_u16_widestring;
  mTable_not[3, 13] := @not_u16_pchar;
  mTable_not[3, 14] := @not_u16_pointer;
  mTable_not[3, 15] := @not_u16_object;
  mTable_not[4, 1] := @not_s16_u8;
  mTable_not[4, 2] := @not_s16_s8;
  mTable_not[4, 3] := @not_s16_u16;
  mTable_not[4, 4] := @not_s16_s16;
  mTable_not[4, 5] := @not_s16_u32;
  mTable_not[4, 6] := @not_s16_s32;
  mTable_not[4, 7] := @not_s16_s64;
  mTable_not[4, 8] := @not_s16_single;
  mTable_not[4, 9] := @not_s16_double;
  mTable_not[4, 10] := @not_s16_string;
  mTable_not[4, 11] := @not_s16_utf8string;
  mTable_not[4, 12] := @not_s16_widestring;
  mTable_not[4, 13] := @not_s16_pchar;
  mTable_not[4, 14] := @not_s16_pointer;
  mTable_not[4, 15] := @not_s16_object;
  mTable_not[5, 1] := @not_u32_u8;
  mTable_not[5, 2] := @not_u32_s8;
  mTable_not[5, 3] := @not_u32_u16;
  mTable_not[5, 4] := @not_u32_s16;
  mTable_not[5, 5] := @not_u32_u32;
  mTable_not[5, 6] := @not_u32_s32;
  mTable_not[5, 7] := @not_u32_s64;
  mTable_not[5, 8] := @not_u32_single;
  mTable_not[5, 9] := @not_u32_double;
  mTable_not[5, 10] := @not_u32_string;
  mTable_not[5, 11] := @not_u32_utf8string;
  mTable_not[5, 12] := @not_u32_widestring;
  mTable_not[5, 13] := @not_u32_pchar;
  mTable_not[5, 14] := @not_u32_pointer;
  mTable_not[5, 15] := @not_u32_object;
  mTable_not[6, 1] := @not_s32_u8;
  mTable_not[6, 2] := @not_s32_s8;
  mTable_not[6, 3] := @not_s32_u16;
  mTable_not[6, 4] := @not_s32_s16;
  mTable_not[6, 5] := @not_s32_u32;
  mTable_not[6, 6] := @not_s32_s32;
  mTable_not[6, 7] := @not_s32_s64;
  mTable_not[6, 8] := @not_s32_single;
  mTable_not[6, 9] := @not_s32_double;
  mTable_not[6, 10] := @not_s32_string;
  mTable_not[6, 11] := @not_s32_utf8string;
  mTable_not[6, 12] := @not_s32_widestring;
  mTable_not[6, 13] := @not_s32_pchar;
  mTable_not[6, 14] := @not_s32_pointer;
  mTable_not[6, 15] := @not_s32_object;
  mTable_not[7, 1] := @not_s64_u8;
  mTable_not[7, 2] := @not_s64_s8;
  mTable_not[7, 3] := @not_s64_u16;
  mTable_not[7, 4] := @not_s64_s16;
  mTable_not[7, 5] := @not_s64_u32;
  mTable_not[7, 6] := @not_s64_s32;
  mTable_not[7, 7] := @not_s64_s64;
  mTable_not[7, 8] := @not_s64_single;
  mTable_not[7, 9] := @not_s64_double;
  mTable_not[7, 10] := @not_s64_string;
  mTable_not[7, 11] := @not_s64_utf8string;
  mTable_not[7, 12] := @not_s64_widestring;
  mTable_not[7, 13] := @not_s64_pchar;
  mTable_not[7, 14] := @not_s64_pointer;
  mTable_not[7, 15] := @not_s64_object;
  mTable_not[8, 1] := @not_single_u8;
  mTable_not[8, 2] := @not_single_s8;
  mTable_not[8, 3] := @not_single_u16;
  mTable_not[8, 4] := @not_single_s16;
  mTable_not[8, 5] := @not_single_u32;
  mTable_not[8, 6] := @not_single_s32;
  mTable_not[8, 7] := @not_single_s64;
  mTable_not[8, 8] := @not_single_single;
  mTable_not[8, 9] := @not_single_double;
  mTable_not[8, 10] := @not_single_string;
  mTable_not[8, 11] := @not_single_utf8string;
  mTable_not[8, 12] := @not_single_widestring;
  mTable_not[8, 13] := @not_single_pchar;
  mTable_not[8, 14] := @not_single_pointer;
  mTable_not[8, 15] := @not_single_object;
  mTable_not[9, 1] := @not_double_u8;
  mTable_not[9, 2] := @not_double_s8;
  mTable_not[9, 3] := @not_double_u16;
  mTable_not[9, 4] := @not_double_s16;
  mTable_not[9, 5] := @not_double_u32;
  mTable_not[9, 6] := @not_double_s32;
  mTable_not[9, 7] := @not_double_s64;
  mTable_not[9, 8] := @not_double_single;
  mTable_not[9, 9] := @not_double_double;
  mTable_not[9, 10] := @not_double_string;
  mTable_not[9, 11] := @not_double_utf8string;
  mTable_not[9, 12] := @not_double_widestring;
  mTable_not[9, 13] := @not_double_pchar;
  mTable_not[9, 14] := @not_double_pointer;
  mTable_not[9, 15] := @not_double_object;
  mTable_not[10, 1] := @not_string_u8;
  mTable_not[10, 2] := @not_string_s8;
  mTable_not[10, 3] := @not_string_u16;
  mTable_not[10, 4] := @not_string_s16;
  mTable_not[10, 5] := @not_string_u32;
  mTable_not[10, 6] := @not_string_s32;
  mTable_not[10, 7] := @not_string_s64;
  mTable_not[10, 8] := @not_string_single;
  mTable_not[10, 9] := @not_string_double;
  mTable_not[10, 10] := @not_string_string;
  mTable_not[10, 11] := @not_string_utf8string;
  mTable_not[10, 12] := @not_string_widestring;
  mTable_not[10, 13] := @not_string_pchar;
  mTable_not[10, 14] := @not_string_pointer;
  mTable_not[10, 15] := @not_string_object;
  mTable_not[11, 1] := @not_utf8string_u8;
  mTable_not[11, 2] := @not_utf8string_s8;
  mTable_not[11, 3] := @not_utf8string_u16;
  mTable_not[11, 4] := @not_utf8string_s16;
  mTable_not[11, 5] := @not_utf8string_u32;
  mTable_not[11, 6] := @not_utf8string_s32;
  mTable_not[11, 7] := @not_utf8string_s64;
  mTable_not[11, 8] := @not_utf8string_single;
  mTable_not[11, 9] := @not_utf8string_double;
  mTable_not[11, 10] := @not_utf8string_string;
  mTable_not[11, 11] := @not_utf8string_utf8string;
  mTable_not[11, 12] := @not_utf8string_widestring;
  mTable_not[11, 13] := @not_utf8string_pchar;
  mTable_not[11, 14] := @not_utf8string_pointer;
  mTable_not[11, 15] := @not_utf8string_object;
  mTable_not[12, 1] := @not_widestring_u8;
  mTable_not[12, 2] := @not_widestring_s8;
  mTable_not[12, 3] := @not_widestring_u16;
  mTable_not[12, 4] := @not_widestring_s16;
  mTable_not[12, 5] := @not_widestring_u32;
  mTable_not[12, 6] := @not_widestring_s32;
  mTable_not[12, 7] := @not_widestring_s64;
  mTable_not[12, 8] := @not_widestring_single;
  mTable_not[12, 9] := @not_widestring_double;
  mTable_not[12, 10] := @not_widestring_string;
  mTable_not[12, 11] := @not_widestring_utf8string;
  mTable_not[12, 12] := @not_widestring_widestring;
  mTable_not[12, 13] := @not_widestring_pchar;
  mTable_not[12, 14] := @not_widestring_pointer;
  mTable_not[12, 15] := @not_widestring_object;
  mTable_not[13, 1] := @not_pchar_u8;
  mTable_not[13, 2] := @not_pchar_s8;
  mTable_not[13, 3] := @not_pchar_u16;
  mTable_not[13, 4] := @not_pchar_s16;
  mTable_not[13, 5] := @not_pchar_u32;
  mTable_not[13, 6] := @not_pchar_s32;
  mTable_not[13, 7] := @not_pchar_s64;
  mTable_not[13, 8] := @not_pchar_single;
  mTable_not[13, 9] := @not_pchar_double;
  mTable_not[13, 10] := @not_pchar_string;
  mTable_not[13, 11] := @not_pchar_utf8string;
  mTable_not[13, 12] := @not_pchar_widestring;
  mTable_not[13, 13] := @not_pchar_pchar;
  mTable_not[13, 14] := @not_pchar_pointer;
  mTable_not[13, 15] := @not_pchar_object;
  mTable_not[14, 1] := @not_pointer_u8;
  mTable_not[14, 2] := @not_pointer_s8;
  mTable_not[14, 3] := @not_pointer_u16;
  mTable_not[14, 4] := @not_pointer_s16;
  mTable_not[14, 5] := @not_pointer_u32;
  mTable_not[14, 6] := @not_pointer_s32;
  mTable_not[14, 7] := @not_pointer_s64;
  mTable_not[14, 8] := @not_pointer_single;
  mTable_not[14, 9] := @not_pointer_double;
  mTable_not[14, 10] := @not_pointer_string;
  mTable_not[14, 11] := @not_pointer_utf8string;
  mTable_not[14, 12] := @not_pointer_widestring;
  mTable_not[14, 13] := @not_pointer_pchar;
  mTable_not[14, 14] := @not_pointer_pointer;
  mTable_not[14, 15] := @not_pointer_object;
  mTable_not[15, 1] := @not_object_u8;
  mTable_not[15, 2] := @not_object_s8;
  mTable_not[15, 3] := @not_object_u16;
  mTable_not[15, 4] := @not_object_s16;
  mTable_not[15, 5] := @not_object_u32;
  mTable_not[15, 6] := @not_object_s32;
  mTable_not[15, 7] := @not_object_s64;
  mTable_not[15, 8] := @not_object_single;
  mTable_not[15, 9] := @not_object_double;
  mTable_not[15, 10] := @not_object_string;
  mTable_not[15, 11] := @not_object_utf8string;
  mTable_not[15, 12] := @not_object_widestring;
  mTable_not[15, 13] := @not_object_pchar;
  mTable_not[15, 14] := @not_object_pointer;
  mTable_not[15, 15] := @not_object_object;
end;

type TOp_BNOT = procedure(p1, p2: PSE2VarData);
var mTable_bnot: array[1..15, 1..15] of TOp_BNOT;

procedure InitTable_bnot;
begin
  mTable_bnot[1, 1] := @bnot_u8_u8;
  mTable_bnot[1, 2] := @bnot_u8_s8;
  mTable_bnot[1, 3] := @bnot_u8_u16;
  mTable_bnot[1, 4] := @bnot_u8_s16;
  mTable_bnot[1, 5] := @bnot_u8_u32;
  mTable_bnot[1, 6] := @bnot_u8_s32;
  mTable_bnot[1, 7] := @bnot_u8_s64;
  mTable_bnot[1, 8] := @bnot_u8_single;
  mTable_bnot[1, 9] := @bnot_u8_double;
  mTable_bnot[1, 10] := @bnot_u8_string;
  mTable_bnot[1, 11] := @bnot_u8_utf8string;
  mTable_bnot[1, 12] := @bnot_u8_widestring;
  mTable_bnot[1, 13] := @bnot_u8_pchar;
  mTable_bnot[1, 14] := @bnot_u8_pointer;
  mTable_bnot[1, 15] := @bnot_u8_object;
  mTable_bnot[2, 1] := @bnot_s8_u8;
  mTable_bnot[2, 2] := @bnot_s8_s8;
  mTable_bnot[2, 3] := @bnot_s8_u16;
  mTable_bnot[2, 4] := @bnot_s8_s16;
  mTable_bnot[2, 5] := @bnot_s8_u32;
  mTable_bnot[2, 6] := @bnot_s8_s32;
  mTable_bnot[2, 7] := @bnot_s8_s64;
  mTable_bnot[2, 8] := @bnot_s8_single;
  mTable_bnot[2, 9] := @bnot_s8_double;
  mTable_bnot[2, 10] := @bnot_s8_string;
  mTable_bnot[2, 11] := @bnot_s8_utf8string;
  mTable_bnot[2, 12] := @bnot_s8_widestring;
  mTable_bnot[2, 13] := @bnot_s8_pchar;
  mTable_bnot[2, 14] := @bnot_s8_pointer;
  mTable_bnot[2, 15] := @bnot_s8_object;
  mTable_bnot[3, 1] := @bnot_u16_u8;
  mTable_bnot[3, 2] := @bnot_u16_s8;
  mTable_bnot[3, 3] := @bnot_u16_u16;
  mTable_bnot[3, 4] := @bnot_u16_s16;
  mTable_bnot[3, 5] := @bnot_u16_u32;
  mTable_bnot[3, 6] := @bnot_u16_s32;
  mTable_bnot[3, 7] := @bnot_u16_s64;
  mTable_bnot[3, 8] := @bnot_u16_single;
  mTable_bnot[3, 9] := @bnot_u16_double;
  mTable_bnot[3, 10] := @bnot_u16_string;
  mTable_bnot[3, 11] := @bnot_u16_utf8string;
  mTable_bnot[3, 12] := @bnot_u16_widestring;
  mTable_bnot[3, 13] := @bnot_u16_pchar;
  mTable_bnot[3, 14] := @bnot_u16_pointer;
  mTable_bnot[3, 15] := @bnot_u16_object;
  mTable_bnot[4, 1] := @bnot_s16_u8;
  mTable_bnot[4, 2] := @bnot_s16_s8;
  mTable_bnot[4, 3] := @bnot_s16_u16;
  mTable_bnot[4, 4] := @bnot_s16_s16;
  mTable_bnot[4, 5] := @bnot_s16_u32;
  mTable_bnot[4, 6] := @bnot_s16_s32;
  mTable_bnot[4, 7] := @bnot_s16_s64;
  mTable_bnot[4, 8] := @bnot_s16_single;
  mTable_bnot[4, 9] := @bnot_s16_double;
  mTable_bnot[4, 10] := @bnot_s16_string;
  mTable_bnot[4, 11] := @bnot_s16_utf8string;
  mTable_bnot[4, 12] := @bnot_s16_widestring;
  mTable_bnot[4, 13] := @bnot_s16_pchar;
  mTable_bnot[4, 14] := @bnot_s16_pointer;
  mTable_bnot[4, 15] := @bnot_s16_object;
  mTable_bnot[5, 1] := @bnot_u32_u8;
  mTable_bnot[5, 2] := @bnot_u32_s8;
  mTable_bnot[5, 3] := @bnot_u32_u16;
  mTable_bnot[5, 4] := @bnot_u32_s16;
  mTable_bnot[5, 5] := @bnot_u32_u32;
  mTable_bnot[5, 6] := @bnot_u32_s32;
  mTable_bnot[5, 7] := @bnot_u32_s64;
  mTable_bnot[5, 8] := @bnot_u32_single;
  mTable_bnot[5, 9] := @bnot_u32_double;
  mTable_bnot[5, 10] := @bnot_u32_string;
  mTable_bnot[5, 11] := @bnot_u32_utf8string;
  mTable_bnot[5, 12] := @bnot_u32_widestring;
  mTable_bnot[5, 13] := @bnot_u32_pchar;
  mTable_bnot[5, 14] := @bnot_u32_pointer;
  mTable_bnot[5, 15] := @bnot_u32_object;
  mTable_bnot[6, 1] := @bnot_s32_u8;
  mTable_bnot[6, 2] := @bnot_s32_s8;
  mTable_bnot[6, 3] := @bnot_s32_u16;
  mTable_bnot[6, 4] := @bnot_s32_s16;
  mTable_bnot[6, 5] := @bnot_s32_u32;
  mTable_bnot[6, 6] := @bnot_s32_s32;
  mTable_bnot[6, 7] := @bnot_s32_s64;
  mTable_bnot[6, 8] := @bnot_s32_single;
  mTable_bnot[6, 9] := @bnot_s32_double;
  mTable_bnot[6, 10] := @bnot_s32_string;
  mTable_bnot[6, 11] := @bnot_s32_utf8string;
  mTable_bnot[6, 12] := @bnot_s32_widestring;
  mTable_bnot[6, 13] := @bnot_s32_pchar;
  mTable_bnot[6, 14] := @bnot_s32_pointer;
  mTable_bnot[6, 15] := @bnot_s32_object;
  mTable_bnot[7, 1] := @bnot_s64_u8;
  mTable_bnot[7, 2] := @bnot_s64_s8;
  mTable_bnot[7, 3] := @bnot_s64_u16;
  mTable_bnot[7, 4] := @bnot_s64_s16;
  mTable_bnot[7, 5] := @bnot_s64_u32;
  mTable_bnot[7, 6] := @bnot_s64_s32;
  mTable_bnot[7, 7] := @bnot_s64_s64;
  mTable_bnot[7, 8] := @bnot_s64_single;
  mTable_bnot[7, 9] := @bnot_s64_double;
  mTable_bnot[7, 10] := @bnot_s64_string;
  mTable_bnot[7, 11] := @bnot_s64_utf8string;
  mTable_bnot[7, 12] := @bnot_s64_widestring;
  mTable_bnot[7, 13] := @bnot_s64_pchar;
  mTable_bnot[7, 14] := @bnot_s64_pointer;
  mTable_bnot[7, 15] := @bnot_s64_object;
  mTable_bnot[8, 1] := @bnot_single_u8;
  mTable_bnot[8, 2] := @bnot_single_s8;
  mTable_bnot[8, 3] := @bnot_single_u16;
  mTable_bnot[8, 4] := @bnot_single_s16;
  mTable_bnot[8, 5] := @bnot_single_u32;
  mTable_bnot[8, 6] := @bnot_single_s32;
  mTable_bnot[8, 7] := @bnot_single_s64;
  mTable_bnot[8, 8] := @bnot_single_single;
  mTable_bnot[8, 9] := @bnot_single_double;
  mTable_bnot[8, 10] := @bnot_single_string;
  mTable_bnot[8, 11] := @bnot_single_utf8string;
  mTable_bnot[8, 12] := @bnot_single_widestring;
  mTable_bnot[8, 13] := @bnot_single_pchar;
  mTable_bnot[8, 14] := @bnot_single_pointer;
  mTable_bnot[8, 15] := @bnot_single_object;
  mTable_bnot[9, 1] := @bnot_double_u8;
  mTable_bnot[9, 2] := @bnot_double_s8;
  mTable_bnot[9, 3] := @bnot_double_u16;
  mTable_bnot[9, 4] := @bnot_double_s16;
  mTable_bnot[9, 5] := @bnot_double_u32;
  mTable_bnot[9, 6] := @bnot_double_s32;
  mTable_bnot[9, 7] := @bnot_double_s64;
  mTable_bnot[9, 8] := @bnot_double_single;
  mTable_bnot[9, 9] := @bnot_double_double;
  mTable_bnot[9, 10] := @bnot_double_string;
  mTable_bnot[9, 11] := @bnot_double_utf8string;
  mTable_bnot[9, 12] := @bnot_double_widestring;
  mTable_bnot[9, 13] := @bnot_double_pchar;
  mTable_bnot[9, 14] := @bnot_double_pointer;
  mTable_bnot[9, 15] := @bnot_double_object;
  mTable_bnot[10, 1] := @bnot_string_u8;
  mTable_bnot[10, 2] := @bnot_string_s8;
  mTable_bnot[10, 3] := @bnot_string_u16;
  mTable_bnot[10, 4] := @bnot_string_s16;
  mTable_bnot[10, 5] := @bnot_string_u32;
  mTable_bnot[10, 6] := @bnot_string_s32;
  mTable_bnot[10, 7] := @bnot_string_s64;
  mTable_bnot[10, 8] := @bnot_string_single;
  mTable_bnot[10, 9] := @bnot_string_double;
  mTable_bnot[10, 10] := @bnot_string_string;
  mTable_bnot[10, 11] := @bnot_string_utf8string;
  mTable_bnot[10, 12] := @bnot_string_widestring;
  mTable_bnot[10, 13] := @bnot_string_pchar;
  mTable_bnot[10, 14] := @bnot_string_pointer;
  mTable_bnot[10, 15] := @bnot_string_object;
  mTable_bnot[11, 1] := @bnot_utf8string_u8;
  mTable_bnot[11, 2] := @bnot_utf8string_s8;
  mTable_bnot[11, 3] := @bnot_utf8string_u16;
  mTable_bnot[11, 4] := @bnot_utf8string_s16;
  mTable_bnot[11, 5] := @bnot_utf8string_u32;
  mTable_bnot[11, 6] := @bnot_utf8string_s32;
  mTable_bnot[11, 7] := @bnot_utf8string_s64;
  mTable_bnot[11, 8] := @bnot_utf8string_single;
  mTable_bnot[11, 9] := @bnot_utf8string_double;
  mTable_bnot[11, 10] := @bnot_utf8string_string;
  mTable_bnot[11, 11] := @bnot_utf8string_utf8string;
  mTable_bnot[11, 12] := @bnot_utf8string_widestring;
  mTable_bnot[11, 13] := @bnot_utf8string_pchar;
  mTable_bnot[11, 14] := @bnot_utf8string_pointer;
  mTable_bnot[11, 15] := @bnot_utf8string_object;
  mTable_bnot[12, 1] := @bnot_widestring_u8;
  mTable_bnot[12, 2] := @bnot_widestring_s8;
  mTable_bnot[12, 3] := @bnot_widestring_u16;
  mTable_bnot[12, 4] := @bnot_widestring_s16;
  mTable_bnot[12, 5] := @bnot_widestring_u32;
  mTable_bnot[12, 6] := @bnot_widestring_s32;
  mTable_bnot[12, 7] := @bnot_widestring_s64;
  mTable_bnot[12, 8] := @bnot_widestring_single;
  mTable_bnot[12, 9] := @bnot_widestring_double;
  mTable_bnot[12, 10] := @bnot_widestring_string;
  mTable_bnot[12, 11] := @bnot_widestring_utf8string;
  mTable_bnot[12, 12] := @bnot_widestring_widestring;
  mTable_bnot[12, 13] := @bnot_widestring_pchar;
  mTable_bnot[12, 14] := @bnot_widestring_pointer;
  mTable_bnot[12, 15] := @bnot_widestring_object;
  mTable_bnot[13, 1] := @bnot_pchar_u8;
  mTable_bnot[13, 2] := @bnot_pchar_s8;
  mTable_bnot[13, 3] := @bnot_pchar_u16;
  mTable_bnot[13, 4] := @bnot_pchar_s16;
  mTable_bnot[13, 5] := @bnot_pchar_u32;
  mTable_bnot[13, 6] := @bnot_pchar_s32;
  mTable_bnot[13, 7] := @bnot_pchar_s64;
  mTable_bnot[13, 8] := @bnot_pchar_single;
  mTable_bnot[13, 9] := @bnot_pchar_double;
  mTable_bnot[13, 10] := @bnot_pchar_string;
  mTable_bnot[13, 11] := @bnot_pchar_utf8string;
  mTable_bnot[13, 12] := @bnot_pchar_widestring;
  mTable_bnot[13, 13] := @bnot_pchar_pchar;
  mTable_bnot[13, 14] := @bnot_pchar_pointer;
  mTable_bnot[13, 15] := @bnot_pchar_object;
  mTable_bnot[14, 1] := @bnot_pointer_u8;
  mTable_bnot[14, 2] := @bnot_pointer_s8;
  mTable_bnot[14, 3] := @bnot_pointer_u16;
  mTable_bnot[14, 4] := @bnot_pointer_s16;
  mTable_bnot[14, 5] := @bnot_pointer_u32;
  mTable_bnot[14, 6] := @bnot_pointer_s32;
  mTable_bnot[14, 7] := @bnot_pointer_s64;
  mTable_bnot[14, 8] := @bnot_pointer_single;
  mTable_bnot[14, 9] := @bnot_pointer_double;
  mTable_bnot[14, 10] := @bnot_pointer_string;
  mTable_bnot[14, 11] := @bnot_pointer_utf8string;
  mTable_bnot[14, 12] := @bnot_pointer_widestring;
  mTable_bnot[14, 13] := @bnot_pointer_pchar;
  mTable_bnot[14, 14] := @bnot_pointer_pointer;
  mTable_bnot[14, 15] := @bnot_pointer_object;
  mTable_bnot[15, 1] := @bnot_object_u8;
  mTable_bnot[15, 2] := @bnot_object_s8;
  mTable_bnot[15, 3] := @bnot_object_u16;
  mTable_bnot[15, 4] := @bnot_object_s16;
  mTable_bnot[15, 5] := @bnot_object_u32;
  mTable_bnot[15, 6] := @bnot_object_s32;
  mTable_bnot[15, 7] := @bnot_object_s64;
  mTable_bnot[15, 8] := @bnot_object_single;
  mTable_bnot[15, 9] := @bnot_object_double;
  mTable_bnot[15, 10] := @bnot_object_string;
  mTable_bnot[15, 11] := @bnot_object_utf8string;
  mTable_bnot[15, 12] := @bnot_object_widestring;
  mTable_bnot[15, 13] := @bnot_object_pchar;
  mTable_bnot[15, 14] := @bnot_object_pointer;
  mTable_bnot[15, 15] := @bnot_object_object;
end;                }

procedure InitTable_smaller;
begin
  mTable_smaller[1, 1] := @smaller_u8_u8;
  mTable_smaller[1, 2] := @smaller_u8_s8;
  mTable_smaller[1, 3] := @smaller_u8_u16;
  mTable_smaller[1, 4] := @smaller_u8_s16;
  mTable_smaller[1, 5] := @smaller_u8_u32;
  mTable_smaller[1, 6] := @smaller_u8_s32;
  mTable_smaller[1, 7] := @smaller_u8_s64;
  mTable_smaller[1, 8] := @smaller_u8_single;
  mTable_smaller[1, 9] := @smaller_u8_double;
  mTable_smaller[1, 10] := @smaller_u8_string;
  mTable_smaller[1, 11] := @smaller_u8_utf8string;
  mTable_smaller[1, 12] := @smaller_u8_widestring;
  mTable_smaller[1, 13] := @smaller_u8_pchar;
  mTable_smaller[1, 14] := @smaller_u8_pointer;
  mTable_smaller[1, 15] := @smaller_u8_object;
  mTable_smaller[2, 1] := @smaller_s8_u8;
  mTable_smaller[2, 2] := @smaller_s8_s8;
  mTable_smaller[2, 3] := @smaller_s8_u16;
  mTable_smaller[2, 4] := @smaller_s8_s16;
  mTable_smaller[2, 5] := @smaller_s8_u32;
  mTable_smaller[2, 6] := @smaller_s8_s32;
  mTable_smaller[2, 7] := @smaller_s8_s64;
  mTable_smaller[2, 8] := @smaller_s8_single;
  mTable_smaller[2, 9] := @smaller_s8_double;
  mTable_smaller[2, 10] := @smaller_s8_string;
  mTable_smaller[2, 11] := @smaller_s8_utf8string;
  mTable_smaller[2, 12] := @smaller_s8_widestring;
  mTable_smaller[2, 13] := @smaller_s8_pchar;
  mTable_smaller[2, 14] := @smaller_s8_pointer;
  mTable_smaller[2, 15] := @smaller_s8_object;
  mTable_smaller[3, 1] := @smaller_u16_u8;
  mTable_smaller[3, 2] := @smaller_u16_s8;
  mTable_smaller[3, 3] := @smaller_u16_u16;
  mTable_smaller[3, 4] := @smaller_u16_s16;
  mTable_smaller[3, 5] := @smaller_u16_u32;
  mTable_smaller[3, 6] := @smaller_u16_s32;
  mTable_smaller[3, 7] := @smaller_u16_s64;
  mTable_smaller[3, 8] := @smaller_u16_single;
  mTable_smaller[3, 9] := @smaller_u16_double;
  mTable_smaller[3, 10] := @smaller_u16_string;
  mTable_smaller[3, 11] := @smaller_u16_utf8string;
  mTable_smaller[3, 12] := @smaller_u16_widestring;
  mTable_smaller[3, 13] := @smaller_u16_pchar;
  mTable_smaller[3, 14] := @smaller_u16_pointer;
  mTable_smaller[3, 15] := @smaller_u16_object;
  mTable_smaller[4, 1] := @smaller_s16_u8;
  mTable_smaller[4, 2] := @smaller_s16_s8;
  mTable_smaller[4, 3] := @smaller_s16_u16;
  mTable_smaller[4, 4] := @smaller_s16_s16;
  mTable_smaller[4, 5] := @smaller_s16_u32;
  mTable_smaller[4, 6] := @smaller_s16_s32;
  mTable_smaller[4, 7] := @smaller_s16_s64;
  mTable_smaller[4, 8] := @smaller_s16_single;
  mTable_smaller[4, 9] := @smaller_s16_double;
  mTable_smaller[4, 10] := @smaller_s16_string;
  mTable_smaller[4, 11] := @smaller_s16_utf8string;
  mTable_smaller[4, 12] := @smaller_s16_widestring;
  mTable_smaller[4, 13] := @smaller_s16_pchar;
  mTable_smaller[4, 14] := @smaller_s16_pointer;
  mTable_smaller[4, 15] := @smaller_s16_object;
  mTable_smaller[5, 1] := @smaller_u32_u8;
  mTable_smaller[5, 2] := @smaller_u32_s8;
  mTable_smaller[5, 3] := @smaller_u32_u16;
  mTable_smaller[5, 4] := @smaller_u32_s16;
  mTable_smaller[5, 5] := @smaller_u32_u32;
  mTable_smaller[5, 6] := @smaller_u32_s32;
  mTable_smaller[5, 7] := @smaller_u32_s64;
  mTable_smaller[5, 8] := @smaller_u32_single;
  mTable_smaller[5, 9] := @smaller_u32_double;
  mTable_smaller[5, 10] := @smaller_u32_string;
  mTable_smaller[5, 11] := @smaller_u32_utf8string;
  mTable_smaller[5, 12] := @smaller_u32_widestring;
  mTable_smaller[5, 13] := @smaller_u32_pchar;
  mTable_smaller[5, 14] := @smaller_u32_pointer;
  mTable_smaller[5, 15] := @smaller_u32_object;
  mTable_smaller[6, 1] := @smaller_s32_u8;
  mTable_smaller[6, 2] := @smaller_s32_s8;
  mTable_smaller[6, 3] := @smaller_s32_u16;
  mTable_smaller[6, 4] := @smaller_s32_s16;
  mTable_smaller[6, 5] := @smaller_s32_u32;
  mTable_smaller[6, 6] := @smaller_s32_s32;
  mTable_smaller[6, 7] := @smaller_s32_s64;
  mTable_smaller[6, 8] := @smaller_s32_single;
  mTable_smaller[6, 9] := @smaller_s32_double;
  mTable_smaller[6, 10] := @smaller_s32_string;
  mTable_smaller[6, 11] := @smaller_s32_utf8string;
  mTable_smaller[6, 12] := @smaller_s32_widestring;
  mTable_smaller[6, 13] := @smaller_s32_pchar;
  mTable_smaller[6, 14] := @smaller_s32_pointer;
  mTable_smaller[6, 15] := @smaller_s32_object;
  mTable_smaller[7, 1] := @smaller_s64_u8;
  mTable_smaller[7, 2] := @smaller_s64_s8;
  mTable_smaller[7, 3] := @smaller_s64_u16;
  mTable_smaller[7, 4] := @smaller_s64_s16;
  mTable_smaller[7, 5] := @smaller_s64_u32;
  mTable_smaller[7, 6] := @smaller_s64_s32;
  mTable_smaller[7, 7] := @smaller_s64_s64;
  mTable_smaller[7, 8] := @smaller_s64_single;
  mTable_smaller[7, 9] := @smaller_s64_double;
  mTable_smaller[7, 10] := @smaller_s64_string;
  mTable_smaller[7, 11] := @smaller_s64_utf8string;
  mTable_smaller[7, 12] := @smaller_s64_widestring;
  mTable_smaller[7, 13] := @smaller_s64_pchar;
  mTable_smaller[7, 14] := @smaller_s64_pointer;
  mTable_smaller[7, 15] := @smaller_s64_object;
  mTable_smaller[8, 1] := @smaller_single_u8;
  mTable_smaller[8, 2] := @smaller_single_s8;
  mTable_smaller[8, 3] := @smaller_single_u16;
  mTable_smaller[8, 4] := @smaller_single_s16;
  mTable_smaller[8, 5] := @smaller_single_u32;
  mTable_smaller[8, 6] := @smaller_single_s32;
  mTable_smaller[8, 7] := @smaller_single_s64;
  mTable_smaller[8, 8] := @smaller_single_single;
  mTable_smaller[8, 9] := @smaller_single_double;
  mTable_smaller[8, 10] := @smaller_single_string;
  mTable_smaller[8, 11] := @smaller_single_utf8string;
  mTable_smaller[8, 12] := @smaller_single_widestring;
  mTable_smaller[8, 13] := @smaller_single_pchar;
  mTable_smaller[8, 14] := @smaller_single_pointer;
  mTable_smaller[8, 15] := @smaller_single_object;
  mTable_smaller[9, 1] := @smaller_double_u8;
  mTable_smaller[9, 2] := @smaller_double_s8;
  mTable_smaller[9, 3] := @smaller_double_u16;
  mTable_smaller[9, 4] := @smaller_double_s16;
  mTable_smaller[9, 5] := @smaller_double_u32;
  mTable_smaller[9, 6] := @smaller_double_s32;
  mTable_smaller[9, 7] := @smaller_double_s64;
  mTable_smaller[9, 8] := @smaller_double_single;
  mTable_smaller[9, 9] := @smaller_double_double;
  mTable_smaller[9, 10] := @smaller_double_string;
  mTable_smaller[9, 11] := @smaller_double_utf8string;
  mTable_smaller[9, 12] := @smaller_double_widestring;
  mTable_smaller[9, 13] := @smaller_double_pchar;
  mTable_smaller[9, 14] := @smaller_double_pointer;
  mTable_smaller[9, 15] := @smaller_double_object;
  mTable_smaller[10, 1] := @smaller_string_u8;
  mTable_smaller[10, 2] := @smaller_string_s8;
  mTable_smaller[10, 3] := @smaller_string_u16;
  mTable_smaller[10, 4] := @smaller_string_s16;
  mTable_smaller[10, 5] := @smaller_string_u32;
  mTable_smaller[10, 6] := @smaller_string_s32;
  mTable_smaller[10, 7] := @smaller_string_s64;
  mTable_smaller[10, 8] := @smaller_string_single;
  mTable_smaller[10, 9] := @smaller_string_double;
  mTable_smaller[10, 10] := @smaller_string_string;
  mTable_smaller[10, 11] := @smaller_string_utf8string;
  mTable_smaller[10, 12] := @smaller_string_widestring;
  mTable_smaller[10, 13] := @smaller_string_pchar;
  mTable_smaller[10, 14] := @smaller_string_pointer;
  mTable_smaller[10, 15] := @smaller_string_object;
  mTable_smaller[11, 1] := @smaller_utf8string_u8;
  mTable_smaller[11, 2] := @smaller_utf8string_s8;
  mTable_smaller[11, 3] := @smaller_utf8string_u16;
  mTable_smaller[11, 4] := @smaller_utf8string_s16;
  mTable_smaller[11, 5] := @smaller_utf8string_u32;
  mTable_smaller[11, 6] := @smaller_utf8string_s32;
  mTable_smaller[11, 7] := @smaller_utf8string_s64;
  mTable_smaller[11, 8] := @smaller_utf8string_single;
  mTable_smaller[11, 9] := @smaller_utf8string_double;
  mTable_smaller[11, 10] := @smaller_utf8string_string;
  mTable_smaller[11, 11] := @smaller_utf8string_utf8string;
  mTable_smaller[11, 12] := @smaller_utf8string_widestring;
  mTable_smaller[11, 13] := @smaller_utf8string_pchar;
  mTable_smaller[11, 14] := @smaller_utf8string_pointer;
  mTable_smaller[11, 15] := @smaller_utf8string_object;
  mTable_smaller[12, 1] := @smaller_widestring_u8;
  mTable_smaller[12, 2] := @smaller_widestring_s8;
  mTable_smaller[12, 3] := @smaller_widestring_u16;
  mTable_smaller[12, 4] := @smaller_widestring_s16;
  mTable_smaller[12, 5] := @smaller_widestring_u32;
  mTable_smaller[12, 6] := @smaller_widestring_s32;
  mTable_smaller[12, 7] := @smaller_widestring_s64;
  mTable_smaller[12, 8] := @smaller_widestring_single;
  mTable_smaller[12, 9] := @smaller_widestring_double;
  mTable_smaller[12, 10] := @smaller_widestring_string;
  mTable_smaller[12, 11] := @smaller_widestring_utf8string;
  mTable_smaller[12, 12] := @smaller_widestring_widestring;
  mTable_smaller[12, 13] := @smaller_widestring_pchar;
  mTable_smaller[12, 14] := @smaller_widestring_pointer;
  mTable_smaller[12, 15] := @smaller_widestring_object;
  mTable_smaller[13, 1] := @smaller_pchar_u8;
  mTable_smaller[13, 2] := @smaller_pchar_s8;
  mTable_smaller[13, 3] := @smaller_pchar_u16;
  mTable_smaller[13, 4] := @smaller_pchar_s16;
  mTable_smaller[13, 5] := @smaller_pchar_u32;
  mTable_smaller[13, 6] := @smaller_pchar_s32;
  mTable_smaller[13, 7] := @smaller_pchar_s64;
  mTable_smaller[13, 8] := @smaller_pchar_single;
  mTable_smaller[13, 9] := @smaller_pchar_double;
  mTable_smaller[13, 10] := @smaller_pchar_string;
  mTable_smaller[13, 11] := @smaller_pchar_utf8string;
  mTable_smaller[13, 12] := @smaller_pchar_widestring;
  mTable_smaller[13, 13] := @smaller_pchar_pchar;
  mTable_smaller[13, 14] := @smaller_pchar_pointer;
  mTable_smaller[13, 15] := @smaller_pchar_object;
  mTable_smaller[14, 1] := @smaller_pointer_u8;
  mTable_smaller[14, 2] := @smaller_pointer_s8;
  mTable_smaller[14, 3] := @smaller_pointer_u16;
  mTable_smaller[14, 4] := @smaller_pointer_s16;
  mTable_smaller[14, 5] := @smaller_pointer_u32;
  mTable_smaller[14, 6] := @smaller_pointer_s32;
  mTable_smaller[14, 7] := @smaller_pointer_s64;
  mTable_smaller[14, 8] := @smaller_pointer_single;
  mTable_smaller[14, 9] := @smaller_pointer_double;
  mTable_smaller[14, 10] := @smaller_pointer_string;
  mTable_smaller[14, 11] := @smaller_pointer_utf8string;
  mTable_smaller[14, 12] := @smaller_pointer_widestring;
  mTable_smaller[14, 13] := @smaller_pointer_pchar;
  mTable_smaller[14, 14] := @smaller_pointer_pointer;
  mTable_smaller[14, 15] := @smaller_pointer_object;
  mTable_smaller[15, 1] := @smaller_object_u8;
  mTable_smaller[15, 2] := @smaller_object_s8;
  mTable_smaller[15, 3] := @smaller_object_u16;
  mTable_smaller[15, 4] := @smaller_object_s16;
  mTable_smaller[15, 5] := @smaller_object_u32;
  mTable_smaller[15, 6] := @smaller_object_s32;
  mTable_smaller[15, 7] := @smaller_object_s64;
  mTable_smaller[15, 8] := @smaller_object_single;
  mTable_smaller[15, 9] := @smaller_object_double;
  mTable_smaller[15, 10] := @smaller_object_string;
  mTable_smaller[15, 11] := @smaller_object_utf8string;
  mTable_smaller[15, 12] := @smaller_object_widestring;
  mTable_smaller[15, 13] := @smaller_object_pchar;
  mTable_smaller[15, 14] := @smaller_object_pointer;
  mTable_smaller[15, 15] := @smaller_object_object;
end;

procedure InitTable_smallerequal;
begin
  mTable_smallerequal[1, 1] := @smallerequal_u8_u8;
  mTable_smallerequal[1, 2] := @smallerequal_u8_s8;
  mTable_smallerequal[1, 3] := @smallerequal_u8_u16;
  mTable_smallerequal[1, 4] := @smallerequal_u8_s16;
  mTable_smallerequal[1, 5] := @smallerequal_u8_u32;
  mTable_smallerequal[1, 6] := @smallerequal_u8_s32;
  mTable_smallerequal[1, 7] := @smallerequal_u8_s64;
  mTable_smallerequal[1, 8] := @smallerequal_u8_single;
  mTable_smallerequal[1, 9] := @smallerequal_u8_double;
  mTable_smallerequal[1, 10] := @smallerequal_u8_string;
  mTable_smallerequal[1, 11] := @smallerequal_u8_utf8string;
  mTable_smallerequal[1, 12] := @smallerequal_u8_widestring;
  mTable_smallerequal[1, 13] := @smallerequal_u8_pchar;
  mTable_smallerequal[1, 14] := @smallerequal_u8_pointer;
  mTable_smallerequal[1, 15] := @smallerequal_u8_object;
  mTable_smallerequal[2, 1] := @smallerequal_s8_u8;
  mTable_smallerequal[2, 2] := @smallerequal_s8_s8;
  mTable_smallerequal[2, 3] := @smallerequal_s8_u16;
  mTable_smallerequal[2, 4] := @smallerequal_s8_s16;
  mTable_smallerequal[2, 5] := @smallerequal_s8_u32;
  mTable_smallerequal[2, 6] := @smallerequal_s8_s32;
  mTable_smallerequal[2, 7] := @smallerequal_s8_s64;
  mTable_smallerequal[2, 8] := @smallerequal_s8_single;
  mTable_smallerequal[2, 9] := @smallerequal_s8_double;
  mTable_smallerequal[2, 10] := @smallerequal_s8_string;
  mTable_smallerequal[2, 11] := @smallerequal_s8_utf8string;
  mTable_smallerequal[2, 12] := @smallerequal_s8_widestring;
  mTable_smallerequal[2, 13] := @smallerequal_s8_pchar;
  mTable_smallerequal[2, 14] := @smallerequal_s8_pointer;
  mTable_smallerequal[2, 15] := @smallerequal_s8_object;
  mTable_smallerequal[3, 1] := @smallerequal_u16_u8;
  mTable_smallerequal[3, 2] := @smallerequal_u16_s8;
  mTable_smallerequal[3, 3] := @smallerequal_u16_u16;
  mTable_smallerequal[3, 4] := @smallerequal_u16_s16;
  mTable_smallerequal[3, 5] := @smallerequal_u16_u32;
  mTable_smallerequal[3, 6] := @smallerequal_u16_s32;
  mTable_smallerequal[3, 7] := @smallerequal_u16_s64;
  mTable_smallerequal[3, 8] := @smallerequal_u16_single;
  mTable_smallerequal[3, 9] := @smallerequal_u16_double;
  mTable_smallerequal[3, 10] := @smallerequal_u16_string;
  mTable_smallerequal[3, 11] := @smallerequal_u16_utf8string;
  mTable_smallerequal[3, 12] := @smallerequal_u16_widestring;
  mTable_smallerequal[3, 13] := @smallerequal_u16_pchar;
  mTable_smallerequal[3, 14] := @smallerequal_u16_pointer;
  mTable_smallerequal[3, 15] := @smallerequal_u16_object;
  mTable_smallerequal[4, 1] := @smallerequal_s16_u8;
  mTable_smallerequal[4, 2] := @smallerequal_s16_s8;
  mTable_smallerequal[4, 3] := @smallerequal_s16_u16;
  mTable_smallerequal[4, 4] := @smallerequal_s16_s16;
  mTable_smallerequal[4, 5] := @smallerequal_s16_u32;
  mTable_smallerequal[4, 6] := @smallerequal_s16_s32;
  mTable_smallerequal[4, 7] := @smallerequal_s16_s64;
  mTable_smallerequal[4, 8] := @smallerequal_s16_single;
  mTable_smallerequal[4, 9] := @smallerequal_s16_double;
  mTable_smallerequal[4, 10] := @smallerequal_s16_string;
  mTable_smallerequal[4, 11] := @smallerequal_s16_utf8string;
  mTable_smallerequal[4, 12] := @smallerequal_s16_widestring;
  mTable_smallerequal[4, 13] := @smallerequal_s16_pchar;
  mTable_smallerequal[4, 14] := @smallerequal_s16_pointer;
  mTable_smallerequal[4, 15] := @smallerequal_s16_object;
  mTable_smallerequal[5, 1] := @smallerequal_u32_u8;
  mTable_smallerequal[5, 2] := @smallerequal_u32_s8;
  mTable_smallerequal[5, 3] := @smallerequal_u32_u16;
  mTable_smallerequal[5, 4] := @smallerequal_u32_s16;
  mTable_smallerequal[5, 5] := @smallerequal_u32_u32;
  mTable_smallerequal[5, 6] := @smallerequal_u32_s32;
  mTable_smallerequal[5, 7] := @smallerequal_u32_s64;
  mTable_smallerequal[5, 8] := @smallerequal_u32_single;
  mTable_smallerequal[5, 9] := @smallerequal_u32_double;
  mTable_smallerequal[5, 10] := @smallerequal_u32_string;
  mTable_smallerequal[5, 11] := @smallerequal_u32_utf8string;
  mTable_smallerequal[5, 12] := @smallerequal_u32_widestring;
  mTable_smallerequal[5, 13] := @smallerequal_u32_pchar;
  mTable_smallerequal[5, 14] := @smallerequal_u32_pointer;
  mTable_smallerequal[5, 15] := @smallerequal_u32_object;
  mTable_smallerequal[6, 1] := @smallerequal_s32_u8;
  mTable_smallerequal[6, 2] := @smallerequal_s32_s8;
  mTable_smallerequal[6, 3] := @smallerequal_s32_u16;
  mTable_smallerequal[6, 4] := @smallerequal_s32_s16;
  mTable_smallerequal[6, 5] := @smallerequal_s32_u32;
  mTable_smallerequal[6, 6] := @smallerequal_s32_s32;
  mTable_smallerequal[6, 7] := @smallerequal_s32_s64;
  mTable_smallerequal[6, 8] := @smallerequal_s32_single;
  mTable_smallerequal[6, 9] := @smallerequal_s32_double;
  mTable_smallerequal[6, 10] := @smallerequal_s32_string;
  mTable_smallerequal[6, 11] := @smallerequal_s32_utf8string;
  mTable_smallerequal[6, 12] := @smallerequal_s32_widestring;
  mTable_smallerequal[6, 13] := @smallerequal_s32_pchar;
  mTable_smallerequal[6, 14] := @smallerequal_s32_pointer;
  mTable_smallerequal[6, 15] := @smallerequal_s32_object;
  mTable_smallerequal[7, 1] := @smallerequal_s64_u8;
  mTable_smallerequal[7, 2] := @smallerequal_s64_s8;
  mTable_smallerequal[7, 3] := @smallerequal_s64_u16;
  mTable_smallerequal[7, 4] := @smallerequal_s64_s16;
  mTable_smallerequal[7, 5] := @smallerequal_s64_u32;
  mTable_smallerequal[7, 6] := @smallerequal_s64_s32;
  mTable_smallerequal[7, 7] := @smallerequal_s64_s64;
  mTable_smallerequal[7, 8] := @smallerequal_s64_single;
  mTable_smallerequal[7, 9] := @smallerequal_s64_double;
  mTable_smallerequal[7, 10] := @smallerequal_s64_string;
  mTable_smallerequal[7, 11] := @smallerequal_s64_utf8string;
  mTable_smallerequal[7, 12] := @smallerequal_s64_widestring;
  mTable_smallerequal[7, 13] := @smallerequal_s64_pchar;
  mTable_smallerequal[7, 14] := @smallerequal_s64_pointer;
  mTable_smallerequal[7, 15] := @smallerequal_s64_object;
  mTable_smallerequal[8, 1] := @smallerequal_single_u8;
  mTable_smallerequal[8, 2] := @smallerequal_single_s8;
  mTable_smallerequal[8, 3] := @smallerequal_single_u16;
  mTable_smallerequal[8, 4] := @smallerequal_single_s16;
  mTable_smallerequal[8, 5] := @smallerequal_single_u32;
  mTable_smallerequal[8, 6] := @smallerequal_single_s32;
  mTable_smallerequal[8, 7] := @smallerequal_single_s64;
  mTable_smallerequal[8, 8] := @smallerequal_single_single;
  mTable_smallerequal[8, 9] := @smallerequal_single_double;
  mTable_smallerequal[8, 10] := @smallerequal_single_string;
  mTable_smallerequal[8, 11] := @smallerequal_single_utf8string;
  mTable_smallerequal[8, 12] := @smallerequal_single_widestring;
  mTable_smallerequal[8, 13] := @smallerequal_single_pchar;
  mTable_smallerequal[8, 14] := @smallerequal_single_pointer;
  mTable_smallerequal[8, 15] := @smallerequal_single_object;
  mTable_smallerequal[9, 1] := @smallerequal_double_u8;
  mTable_smallerequal[9, 2] := @smallerequal_double_s8;
  mTable_smallerequal[9, 3] := @smallerequal_double_u16;
  mTable_smallerequal[9, 4] := @smallerequal_double_s16;
  mTable_smallerequal[9, 5] := @smallerequal_double_u32;
  mTable_smallerequal[9, 6] := @smallerequal_double_s32;
  mTable_smallerequal[9, 7] := @smallerequal_double_s64;
  mTable_smallerequal[9, 8] := @smallerequal_double_single;
  mTable_smallerequal[9, 9] := @smallerequal_double_double;
  mTable_smallerequal[9, 10] := @smallerequal_double_string;
  mTable_smallerequal[9, 11] := @smallerequal_double_utf8string;
  mTable_smallerequal[9, 12] := @smallerequal_double_widestring;
  mTable_smallerequal[9, 13] := @smallerequal_double_pchar;
  mTable_smallerequal[9, 14] := @smallerequal_double_pointer;
  mTable_smallerequal[9, 15] := @smallerequal_double_object;
  mTable_smallerequal[10, 1] := @smallerequal_string_u8;
  mTable_smallerequal[10, 2] := @smallerequal_string_s8;
  mTable_smallerequal[10, 3] := @smallerequal_string_u16;
  mTable_smallerequal[10, 4] := @smallerequal_string_s16;
  mTable_smallerequal[10, 5] := @smallerequal_string_u32;
  mTable_smallerequal[10, 6] := @smallerequal_string_s32;
  mTable_smallerequal[10, 7] := @smallerequal_string_s64;
  mTable_smallerequal[10, 8] := @smallerequal_string_single;
  mTable_smallerequal[10, 9] := @smallerequal_string_double;
  mTable_smallerequal[10, 10] := @smallerequal_string_string;
  mTable_smallerequal[10, 11] := @smallerequal_string_utf8string;
  mTable_smallerequal[10, 12] := @smallerequal_string_widestring;
  mTable_smallerequal[10, 13] := @smallerequal_string_pchar;
  mTable_smallerequal[10, 14] := @smallerequal_string_pointer;
  mTable_smallerequal[10, 15] := @smallerequal_string_object;
  mTable_smallerequal[11, 1] := @smallerequal_utf8string_u8;
  mTable_smallerequal[11, 2] := @smallerequal_utf8string_s8;
  mTable_smallerequal[11, 3] := @smallerequal_utf8string_u16;
  mTable_smallerequal[11, 4] := @smallerequal_utf8string_s16;
  mTable_smallerequal[11, 5] := @smallerequal_utf8string_u32;
  mTable_smallerequal[11, 6] := @smallerequal_utf8string_s32;
  mTable_smallerequal[11, 7] := @smallerequal_utf8string_s64;
  mTable_smallerequal[11, 8] := @smallerequal_utf8string_single;
  mTable_smallerequal[11, 9] := @smallerequal_utf8string_double;
  mTable_smallerequal[11, 10] := @smallerequal_utf8string_string;
  mTable_smallerequal[11, 11] := @smallerequal_utf8string_utf8string;
  mTable_smallerequal[11, 12] := @smallerequal_utf8string_widestring;
  mTable_smallerequal[11, 13] := @smallerequal_utf8string_pchar;
  mTable_smallerequal[11, 14] := @smallerequal_utf8string_pointer;
  mTable_smallerequal[11, 15] := @smallerequal_utf8string_object;
  mTable_smallerequal[12, 1] := @smallerequal_widestring_u8;
  mTable_smallerequal[12, 2] := @smallerequal_widestring_s8;
  mTable_smallerequal[12, 3] := @smallerequal_widestring_u16;
  mTable_smallerequal[12, 4] := @smallerequal_widestring_s16;
  mTable_smallerequal[12, 5] := @smallerequal_widestring_u32;
  mTable_smallerequal[12, 6] := @smallerequal_widestring_s32;
  mTable_smallerequal[12, 7] := @smallerequal_widestring_s64;
  mTable_smallerequal[12, 8] := @smallerequal_widestring_single;
  mTable_smallerequal[12, 9] := @smallerequal_widestring_double;
  mTable_smallerequal[12, 10] := @smallerequal_widestring_string;
  mTable_smallerequal[12, 11] := @smallerequal_widestring_utf8string;
  mTable_smallerequal[12, 12] := @smallerequal_widestring_widestring;
  mTable_smallerequal[12, 13] := @smallerequal_widestring_pchar;
  mTable_smallerequal[12, 14] := @smallerequal_widestring_pointer;
  mTable_smallerequal[12, 15] := @smallerequal_widestring_object;
  mTable_smallerequal[13, 1] := @smallerequal_pchar_u8;
  mTable_smallerequal[13, 2] := @smallerequal_pchar_s8;
  mTable_smallerequal[13, 3] := @smallerequal_pchar_u16;
  mTable_smallerequal[13, 4] := @smallerequal_pchar_s16;
  mTable_smallerequal[13, 5] := @smallerequal_pchar_u32;
  mTable_smallerequal[13, 6] := @smallerequal_pchar_s32;
  mTable_smallerequal[13, 7] := @smallerequal_pchar_s64;
  mTable_smallerequal[13, 8] := @smallerequal_pchar_single;
  mTable_smallerequal[13, 9] := @smallerequal_pchar_double;
  mTable_smallerequal[13, 10] := @smallerequal_pchar_string;
  mTable_smallerequal[13, 11] := @smallerequal_pchar_utf8string;
  mTable_smallerequal[13, 12] := @smallerequal_pchar_widestring;
  mTable_smallerequal[13, 13] := @smallerequal_pchar_pchar;
  mTable_smallerequal[13, 14] := @smallerequal_pchar_pointer;
  mTable_smallerequal[13, 15] := @smallerequal_pchar_object;
  mTable_smallerequal[14, 1] := @smallerequal_pointer_u8;
  mTable_smallerequal[14, 2] := @smallerequal_pointer_s8;
  mTable_smallerequal[14, 3] := @smallerequal_pointer_u16;
  mTable_smallerequal[14, 4] := @smallerequal_pointer_s16;
  mTable_smallerequal[14, 5] := @smallerequal_pointer_u32;
  mTable_smallerequal[14, 6] := @smallerequal_pointer_s32;
  mTable_smallerequal[14, 7] := @smallerequal_pointer_s64;
  mTable_smallerequal[14, 8] := @smallerequal_pointer_single;
  mTable_smallerequal[14, 9] := @smallerequal_pointer_double;
  mTable_smallerequal[14, 10] := @smallerequal_pointer_string;
  mTable_smallerequal[14, 11] := @smallerequal_pointer_utf8string;
  mTable_smallerequal[14, 12] := @smallerequal_pointer_widestring;
  mTable_smallerequal[14, 13] := @smallerequal_pointer_pchar;
  mTable_smallerequal[14, 14] := @smallerequal_pointer_pointer;
  mTable_smallerequal[14, 15] := @smallerequal_pointer_object;
  mTable_smallerequal[15, 1] := @smallerequal_object_u8;
  mTable_smallerequal[15, 2] := @smallerequal_object_s8;
  mTable_smallerequal[15, 3] := @smallerequal_object_u16;
  mTable_smallerequal[15, 4] := @smallerequal_object_s16;
  mTable_smallerequal[15, 5] := @smallerequal_object_u32;
  mTable_smallerequal[15, 6] := @smallerequal_object_s32;
  mTable_smallerequal[15, 7] := @smallerequal_object_s64;
  mTable_smallerequal[15, 8] := @smallerequal_object_single;
  mTable_smallerequal[15, 9] := @smallerequal_object_double;
  mTable_smallerequal[15, 10] := @smallerequal_object_string;
  mTable_smallerequal[15, 11] := @smallerequal_object_utf8string;
  mTable_smallerequal[15, 12] := @smallerequal_object_widestring;
  mTable_smallerequal[15, 13] := @smallerequal_object_pchar;
  mTable_smallerequal[15, 14] := @smallerequal_object_pointer;
  mTable_smallerequal[15, 15] := @smallerequal_object_object;
end;

procedure InitTable_bigger;
begin
  mTable_bigger[1, 1] := @bigger_u8_u8;
  mTable_bigger[1, 2] := @bigger_u8_s8;
  mTable_bigger[1, 3] := @bigger_u8_u16;
  mTable_bigger[1, 4] := @bigger_u8_s16;
  mTable_bigger[1, 5] := @bigger_u8_u32;
  mTable_bigger[1, 6] := @bigger_u8_s32;
  mTable_bigger[1, 7] := @bigger_u8_s64;
  mTable_bigger[1, 8] := @bigger_u8_single;
  mTable_bigger[1, 9] := @bigger_u8_double;
  mTable_bigger[1, 10] := @bigger_u8_string;
  mTable_bigger[1, 11] := @bigger_u8_utf8string;
  mTable_bigger[1, 12] := @bigger_u8_widestring;
  mTable_bigger[1, 13] := @bigger_u8_pchar;
  mTable_bigger[1, 14] := @bigger_u8_pointer;
  mTable_bigger[1, 15] := @bigger_u8_object;
  mTable_bigger[2, 1] := @bigger_s8_u8;
  mTable_bigger[2, 2] := @bigger_s8_s8;
  mTable_bigger[2, 3] := @bigger_s8_u16;
  mTable_bigger[2, 4] := @bigger_s8_s16;
  mTable_bigger[2, 5] := @bigger_s8_u32;
  mTable_bigger[2, 6] := @bigger_s8_s32;
  mTable_bigger[2, 7] := @bigger_s8_s64;
  mTable_bigger[2, 8] := @bigger_s8_single;
  mTable_bigger[2, 9] := @bigger_s8_double;
  mTable_bigger[2, 10] := @bigger_s8_string;
  mTable_bigger[2, 11] := @bigger_s8_utf8string;
  mTable_bigger[2, 12] := @bigger_s8_widestring;
  mTable_bigger[2, 13] := @bigger_s8_pchar;
  mTable_bigger[2, 14] := @bigger_s8_pointer;
  mTable_bigger[2, 15] := @bigger_s8_object;
  mTable_bigger[3, 1] := @bigger_u16_u8;
  mTable_bigger[3, 2] := @bigger_u16_s8;
  mTable_bigger[3, 3] := @bigger_u16_u16;
  mTable_bigger[3, 4] := @bigger_u16_s16;
  mTable_bigger[3, 5] := @bigger_u16_u32;
  mTable_bigger[3, 6] := @bigger_u16_s32;
  mTable_bigger[3, 7] := @bigger_u16_s64;
  mTable_bigger[3, 8] := @bigger_u16_single;
  mTable_bigger[3, 9] := @bigger_u16_double;
  mTable_bigger[3, 10] := @bigger_u16_string;
  mTable_bigger[3, 11] := @bigger_u16_utf8string;
  mTable_bigger[3, 12] := @bigger_u16_widestring;
  mTable_bigger[3, 13] := @bigger_u16_pchar;
  mTable_bigger[3, 14] := @bigger_u16_pointer;
  mTable_bigger[3, 15] := @bigger_u16_object;
  mTable_bigger[4, 1] := @bigger_s16_u8;
  mTable_bigger[4, 2] := @bigger_s16_s8;
  mTable_bigger[4, 3] := @bigger_s16_u16;
  mTable_bigger[4, 4] := @bigger_s16_s16;
  mTable_bigger[4, 5] := @bigger_s16_u32;
  mTable_bigger[4, 6] := @bigger_s16_s32;
  mTable_bigger[4, 7] := @bigger_s16_s64;
  mTable_bigger[4, 8] := @bigger_s16_single;
  mTable_bigger[4, 9] := @bigger_s16_double;
  mTable_bigger[4, 10] := @bigger_s16_string;
  mTable_bigger[4, 11] := @bigger_s16_utf8string;
  mTable_bigger[4, 12] := @bigger_s16_widestring;
  mTable_bigger[4, 13] := @bigger_s16_pchar;
  mTable_bigger[4, 14] := @bigger_s16_pointer;
  mTable_bigger[4, 15] := @bigger_s16_object;
  mTable_bigger[5, 1] := @bigger_u32_u8;
  mTable_bigger[5, 2] := @bigger_u32_s8;
  mTable_bigger[5, 3] := @bigger_u32_u16;
  mTable_bigger[5, 4] := @bigger_u32_s16;
  mTable_bigger[5, 5] := @bigger_u32_u32;
  mTable_bigger[5, 6] := @bigger_u32_s32;
  mTable_bigger[5, 7] := @bigger_u32_s64;
  mTable_bigger[5, 8] := @bigger_u32_single;
  mTable_bigger[5, 9] := @bigger_u32_double;
  mTable_bigger[5, 10] := @bigger_u32_string;
  mTable_bigger[5, 11] := @bigger_u32_utf8string;
  mTable_bigger[5, 12] := @bigger_u32_widestring;
  mTable_bigger[5, 13] := @bigger_u32_pchar;
  mTable_bigger[5, 14] := @bigger_u32_pointer;
  mTable_bigger[5, 15] := @bigger_u32_object;
  mTable_bigger[6, 1] := @bigger_s32_u8;
  mTable_bigger[6, 2] := @bigger_s32_s8;
  mTable_bigger[6, 3] := @bigger_s32_u16;
  mTable_bigger[6, 4] := @bigger_s32_s16;
  mTable_bigger[6, 5] := @bigger_s32_u32;
  mTable_bigger[6, 6] := @bigger_s32_s32;
  mTable_bigger[6, 7] := @bigger_s32_s64;
  mTable_bigger[6, 8] := @bigger_s32_single;
  mTable_bigger[6, 9] := @bigger_s32_double;
  mTable_bigger[6, 10] := @bigger_s32_string;
  mTable_bigger[6, 11] := @bigger_s32_utf8string;
  mTable_bigger[6, 12] := @bigger_s32_widestring;
  mTable_bigger[6, 13] := @bigger_s32_pchar;
  mTable_bigger[6, 14] := @bigger_s32_pointer;
  mTable_bigger[6, 15] := @bigger_s32_object;
  mTable_bigger[7, 1] := @bigger_s64_u8;
  mTable_bigger[7, 2] := @bigger_s64_s8;
  mTable_bigger[7, 3] := @bigger_s64_u16;
  mTable_bigger[7, 4] := @bigger_s64_s16;
  mTable_bigger[7, 5] := @bigger_s64_u32;
  mTable_bigger[7, 6] := @bigger_s64_s32;
  mTable_bigger[7, 7] := @bigger_s64_s64;
  mTable_bigger[7, 8] := @bigger_s64_single;
  mTable_bigger[7, 9] := @bigger_s64_double;
  mTable_bigger[7, 10] := @bigger_s64_string;
  mTable_bigger[7, 11] := @bigger_s64_utf8string;
  mTable_bigger[7, 12] := @bigger_s64_widestring;
  mTable_bigger[7, 13] := @bigger_s64_pchar;
  mTable_bigger[7, 14] := @bigger_s64_pointer;
  mTable_bigger[7, 15] := @bigger_s64_object;
  mTable_bigger[8, 1] := @bigger_single_u8;
  mTable_bigger[8, 2] := @bigger_single_s8;
  mTable_bigger[8, 3] := @bigger_single_u16;
  mTable_bigger[8, 4] := @bigger_single_s16;
  mTable_bigger[8, 5] := @bigger_single_u32;
  mTable_bigger[8, 6] := @bigger_single_s32;
  mTable_bigger[8, 7] := @bigger_single_s64;
  mTable_bigger[8, 8] := @bigger_single_single;
  mTable_bigger[8, 9] := @bigger_single_double;
  mTable_bigger[8, 10] := @bigger_single_string;
  mTable_bigger[8, 11] := @bigger_single_utf8string;
  mTable_bigger[8, 12] := @bigger_single_widestring;
  mTable_bigger[8, 13] := @bigger_single_pchar;
  mTable_bigger[8, 14] := @bigger_single_pointer;
  mTable_bigger[8, 15] := @bigger_single_object;
  mTable_bigger[9, 1] := @bigger_double_u8;
  mTable_bigger[9, 2] := @bigger_double_s8;
  mTable_bigger[9, 3] := @bigger_double_u16;
  mTable_bigger[9, 4] := @bigger_double_s16;
  mTable_bigger[9, 5] := @bigger_double_u32;
  mTable_bigger[9, 6] := @bigger_double_s32;
  mTable_bigger[9, 7] := @bigger_double_s64;
  mTable_bigger[9, 8] := @bigger_double_single;
  mTable_bigger[9, 9] := @bigger_double_double;
  mTable_bigger[9, 10] := @bigger_double_string;
  mTable_bigger[9, 11] := @bigger_double_utf8string;
  mTable_bigger[9, 12] := @bigger_double_widestring;
  mTable_bigger[9, 13] := @bigger_double_pchar;
  mTable_bigger[9, 14] := @bigger_double_pointer;
  mTable_bigger[9, 15] := @bigger_double_object;
  mTable_bigger[10, 1] := @bigger_string_u8;
  mTable_bigger[10, 2] := @bigger_string_s8;
  mTable_bigger[10, 3] := @bigger_string_u16;
  mTable_bigger[10, 4] := @bigger_string_s16;
  mTable_bigger[10, 5] := @bigger_string_u32;
  mTable_bigger[10, 6] := @bigger_string_s32;
  mTable_bigger[10, 7] := @bigger_string_s64;
  mTable_bigger[10, 8] := @bigger_string_single;
  mTable_bigger[10, 9] := @bigger_string_double;
  mTable_bigger[10, 10] := @bigger_string_string;
  mTable_bigger[10, 11] := @bigger_string_utf8string;
  mTable_bigger[10, 12] := @bigger_string_widestring;
  mTable_bigger[10, 13] := @bigger_string_pchar;
  mTable_bigger[10, 14] := @bigger_string_pointer;
  mTable_bigger[10, 15] := @bigger_string_object;
  mTable_bigger[11, 1] := @bigger_utf8string_u8;
  mTable_bigger[11, 2] := @bigger_utf8string_s8;
  mTable_bigger[11, 3] := @bigger_utf8string_u16;
  mTable_bigger[11, 4] := @bigger_utf8string_s16;
  mTable_bigger[11, 5] := @bigger_utf8string_u32;
  mTable_bigger[11, 6] := @bigger_utf8string_s32;
  mTable_bigger[11, 7] := @bigger_utf8string_s64;
  mTable_bigger[11, 8] := @bigger_utf8string_single;
  mTable_bigger[11, 9] := @bigger_utf8string_double;
  mTable_bigger[11, 10] := @bigger_utf8string_string;
  mTable_bigger[11, 11] := @bigger_utf8string_utf8string;
  mTable_bigger[11, 12] := @bigger_utf8string_widestring;
  mTable_bigger[11, 13] := @bigger_utf8string_pchar;
  mTable_bigger[11, 14] := @bigger_utf8string_pointer;
  mTable_bigger[11, 15] := @bigger_utf8string_object;
  mTable_bigger[12, 1] := @bigger_widestring_u8;
  mTable_bigger[12, 2] := @bigger_widestring_s8;
  mTable_bigger[12, 3] := @bigger_widestring_u16;
  mTable_bigger[12, 4] := @bigger_widestring_s16;
  mTable_bigger[12, 5] := @bigger_widestring_u32;
  mTable_bigger[12, 6] := @bigger_widestring_s32;
  mTable_bigger[12, 7] := @bigger_widestring_s64;
  mTable_bigger[12, 8] := @bigger_widestring_single;
  mTable_bigger[12, 9] := @bigger_widestring_double;
  mTable_bigger[12, 10] := @bigger_widestring_string;
  mTable_bigger[12, 11] := @bigger_widestring_utf8string;
  mTable_bigger[12, 12] := @bigger_widestring_widestring;
  mTable_bigger[12, 13] := @bigger_widestring_pchar;
  mTable_bigger[12, 14] := @bigger_widestring_pointer;
  mTable_bigger[12, 15] := @bigger_widestring_object;
  mTable_bigger[13, 1] := @bigger_pchar_u8;
  mTable_bigger[13, 2] := @bigger_pchar_s8;
  mTable_bigger[13, 3] := @bigger_pchar_u16;
  mTable_bigger[13, 4] := @bigger_pchar_s16;
  mTable_bigger[13, 5] := @bigger_pchar_u32;
  mTable_bigger[13, 6] := @bigger_pchar_s32;
  mTable_bigger[13, 7] := @bigger_pchar_s64;
  mTable_bigger[13, 8] := @bigger_pchar_single;
  mTable_bigger[13, 9] := @bigger_pchar_double;
  mTable_bigger[13, 10] := @bigger_pchar_string;
  mTable_bigger[13, 11] := @bigger_pchar_utf8string;
  mTable_bigger[13, 12] := @bigger_pchar_widestring;
  mTable_bigger[13, 13] := @bigger_pchar_pchar;
  mTable_bigger[13, 14] := @bigger_pchar_pointer;
  mTable_bigger[13, 15] := @bigger_pchar_object;
  mTable_bigger[14, 1] := @bigger_pointer_u8;
  mTable_bigger[14, 2] := @bigger_pointer_s8;
  mTable_bigger[14, 3] := @bigger_pointer_u16;
  mTable_bigger[14, 4] := @bigger_pointer_s16;
  mTable_bigger[14, 5] := @bigger_pointer_u32;
  mTable_bigger[14, 6] := @bigger_pointer_s32;
  mTable_bigger[14, 7] := @bigger_pointer_s64;
  mTable_bigger[14, 8] := @bigger_pointer_single;
  mTable_bigger[14, 9] := @bigger_pointer_double;
  mTable_bigger[14, 10] := @bigger_pointer_string;
  mTable_bigger[14, 11] := @bigger_pointer_utf8string;
  mTable_bigger[14, 12] := @bigger_pointer_widestring;
  mTable_bigger[14, 13] := @bigger_pointer_pchar;
  mTable_bigger[14, 14] := @bigger_pointer_pointer;
  mTable_bigger[14, 15] := @bigger_pointer_object;
  mTable_bigger[15, 1] := @bigger_object_u8;
  mTable_bigger[15, 2] := @bigger_object_s8;
  mTable_bigger[15, 3] := @bigger_object_u16;
  mTable_bigger[15, 4] := @bigger_object_s16;
  mTable_bigger[15, 5] := @bigger_object_u32;
  mTable_bigger[15, 6] := @bigger_object_s32;
  mTable_bigger[15, 7] := @bigger_object_s64;
  mTable_bigger[15, 8] := @bigger_object_single;
  mTable_bigger[15, 9] := @bigger_object_double;
  mTable_bigger[15, 10] := @bigger_object_string;
  mTable_bigger[15, 11] := @bigger_object_utf8string;
  mTable_bigger[15, 12] := @bigger_object_widestring;
  mTable_bigger[15, 13] := @bigger_object_pchar;
  mTable_bigger[15, 14] := @bigger_object_pointer;
  mTable_bigger[15, 15] := @bigger_object_object;
end;

procedure InitTable_biggerequal;
begin
  mTable_biggerequal[1, 1] := @biggerequal_u8_u8;
  mTable_biggerequal[1, 2] := @biggerequal_u8_s8;
  mTable_biggerequal[1, 3] := @biggerequal_u8_u16;
  mTable_biggerequal[1, 4] := @biggerequal_u8_s16;
  mTable_biggerequal[1, 5] := @biggerequal_u8_u32;
  mTable_biggerequal[1, 6] := @biggerequal_u8_s32;
  mTable_biggerequal[1, 7] := @biggerequal_u8_s64;
  mTable_biggerequal[1, 8] := @biggerequal_u8_single;
  mTable_biggerequal[1, 9] := @biggerequal_u8_double;
  mTable_biggerequal[1, 10] := @biggerequal_u8_string;
  mTable_biggerequal[1, 11] := @biggerequal_u8_utf8string;
  mTable_biggerequal[1, 12] := @biggerequal_u8_widestring;
  mTable_biggerequal[1, 13] := @biggerequal_u8_pchar;
  mTable_biggerequal[1, 14] := @biggerequal_u8_pointer;
  mTable_biggerequal[1, 15] := @biggerequal_u8_object;
  mTable_biggerequal[2, 1] := @biggerequal_s8_u8;
  mTable_biggerequal[2, 2] := @biggerequal_s8_s8;
  mTable_biggerequal[2, 3] := @biggerequal_s8_u16;
  mTable_biggerequal[2, 4] := @biggerequal_s8_s16;
  mTable_biggerequal[2, 5] := @biggerequal_s8_u32;
  mTable_biggerequal[2, 6] := @biggerequal_s8_s32;
  mTable_biggerequal[2, 7] := @biggerequal_s8_s64;
  mTable_biggerequal[2, 8] := @biggerequal_s8_single;
  mTable_biggerequal[2, 9] := @biggerequal_s8_double;
  mTable_biggerequal[2, 10] := @biggerequal_s8_string;
  mTable_biggerequal[2, 11] := @biggerequal_s8_utf8string;
  mTable_biggerequal[2, 12] := @biggerequal_s8_widestring;
  mTable_biggerequal[2, 13] := @biggerequal_s8_pchar;
  mTable_biggerequal[2, 14] := @biggerequal_s8_pointer;
  mTable_biggerequal[2, 15] := @biggerequal_s8_object;
  mTable_biggerequal[3, 1] := @biggerequal_u16_u8;
  mTable_biggerequal[3, 2] := @biggerequal_u16_s8;
  mTable_biggerequal[3, 3] := @biggerequal_u16_u16;
  mTable_biggerequal[3, 4] := @biggerequal_u16_s16;
  mTable_biggerequal[3, 5] := @biggerequal_u16_u32;
  mTable_biggerequal[3, 6] := @biggerequal_u16_s32;
  mTable_biggerequal[3, 7] := @biggerequal_u16_s64;
  mTable_biggerequal[3, 8] := @biggerequal_u16_single;
  mTable_biggerequal[3, 9] := @biggerequal_u16_double;
  mTable_biggerequal[3, 10] := @biggerequal_u16_string;
  mTable_biggerequal[3, 11] := @biggerequal_u16_utf8string;
  mTable_biggerequal[3, 12] := @biggerequal_u16_widestring;
  mTable_biggerequal[3, 13] := @biggerequal_u16_pchar;
  mTable_biggerequal[3, 14] := @biggerequal_u16_pointer;
  mTable_biggerequal[3, 15] := @biggerequal_u16_object;
  mTable_biggerequal[4, 1] := @biggerequal_s16_u8;
  mTable_biggerequal[4, 2] := @biggerequal_s16_s8;
  mTable_biggerequal[4, 3] := @biggerequal_s16_u16;
  mTable_biggerequal[4, 4] := @biggerequal_s16_s16;
  mTable_biggerequal[4, 5] := @biggerequal_s16_u32;
  mTable_biggerequal[4, 6] := @biggerequal_s16_s32;
  mTable_biggerequal[4, 7] := @biggerequal_s16_s64;
  mTable_biggerequal[4, 8] := @biggerequal_s16_single;
  mTable_biggerequal[4, 9] := @biggerequal_s16_double;
  mTable_biggerequal[4, 10] := @biggerequal_s16_string;
  mTable_biggerequal[4, 11] := @biggerequal_s16_utf8string;
  mTable_biggerequal[4, 12] := @biggerequal_s16_widestring;
  mTable_biggerequal[4, 13] := @biggerequal_s16_pchar;
  mTable_biggerequal[4, 14] := @biggerequal_s16_pointer;
  mTable_biggerequal[4, 15] := @biggerequal_s16_object;
  mTable_biggerequal[5, 1] := @biggerequal_u32_u8;
  mTable_biggerequal[5, 2] := @biggerequal_u32_s8;
  mTable_biggerequal[5, 3] := @biggerequal_u32_u16;
  mTable_biggerequal[5, 4] := @biggerequal_u32_s16;
  mTable_biggerequal[5, 5] := @biggerequal_u32_u32;
  mTable_biggerequal[5, 6] := @biggerequal_u32_s32;
  mTable_biggerequal[5, 7] := @biggerequal_u32_s64;
  mTable_biggerequal[5, 8] := @biggerequal_u32_single;
  mTable_biggerequal[5, 9] := @biggerequal_u32_double;
  mTable_biggerequal[5, 10] := @biggerequal_u32_string;
  mTable_biggerequal[5, 11] := @biggerequal_u32_utf8string;
  mTable_biggerequal[5, 12] := @biggerequal_u32_widestring;
  mTable_biggerequal[5, 13] := @biggerequal_u32_pchar;
  mTable_biggerequal[5, 14] := @biggerequal_u32_pointer;
  mTable_biggerequal[5, 15] := @biggerequal_u32_object;
  mTable_biggerequal[6, 1] := @biggerequal_s32_u8;
  mTable_biggerequal[6, 2] := @biggerequal_s32_s8;
  mTable_biggerequal[6, 3] := @biggerequal_s32_u16;
  mTable_biggerequal[6, 4] := @biggerequal_s32_s16;
  mTable_biggerequal[6, 5] := @biggerequal_s32_u32;
  mTable_biggerequal[6, 6] := @biggerequal_s32_s32;
  mTable_biggerequal[6, 7] := @biggerequal_s32_s64;
  mTable_biggerequal[6, 8] := @biggerequal_s32_single;
  mTable_biggerequal[6, 9] := @biggerequal_s32_double;
  mTable_biggerequal[6, 10] := @biggerequal_s32_string;
  mTable_biggerequal[6, 11] := @biggerequal_s32_utf8string;
  mTable_biggerequal[6, 12] := @biggerequal_s32_widestring;
  mTable_biggerequal[6, 13] := @biggerequal_s32_pchar;
  mTable_biggerequal[6, 14] := @biggerequal_s32_pointer;
  mTable_biggerequal[6, 15] := @biggerequal_s32_object;
  mTable_biggerequal[7, 1] := @biggerequal_s64_u8;
  mTable_biggerequal[7, 2] := @biggerequal_s64_s8;
  mTable_biggerequal[7, 3] := @biggerequal_s64_u16;
  mTable_biggerequal[7, 4] := @biggerequal_s64_s16;
  mTable_biggerequal[7, 5] := @biggerequal_s64_u32;
  mTable_biggerequal[7, 6] := @biggerequal_s64_s32;
  mTable_biggerequal[7, 7] := @biggerequal_s64_s64;
  mTable_biggerequal[7, 8] := @biggerequal_s64_single;
  mTable_biggerequal[7, 9] := @biggerequal_s64_double;
  mTable_biggerequal[7, 10] := @biggerequal_s64_string;
  mTable_biggerequal[7, 11] := @biggerequal_s64_utf8string;
  mTable_biggerequal[7, 12] := @biggerequal_s64_widestring;
  mTable_biggerequal[7, 13] := @biggerequal_s64_pchar;
  mTable_biggerequal[7, 14] := @biggerequal_s64_pointer;
  mTable_biggerequal[7, 15] := @biggerequal_s64_object;
  mTable_biggerequal[8, 1] := @biggerequal_single_u8;
  mTable_biggerequal[8, 2] := @biggerequal_single_s8;
  mTable_biggerequal[8, 3] := @biggerequal_single_u16;
  mTable_biggerequal[8, 4] := @biggerequal_single_s16;
  mTable_biggerequal[8, 5] := @biggerequal_single_u32;
  mTable_biggerequal[8, 6] := @biggerequal_single_s32;
  mTable_biggerequal[8, 7] := @biggerequal_single_s64;
  mTable_biggerequal[8, 8] := @biggerequal_single_single;
  mTable_biggerequal[8, 9] := @biggerequal_single_double;
  mTable_biggerequal[8, 10] := @biggerequal_single_string;
  mTable_biggerequal[8, 11] := @biggerequal_single_utf8string;
  mTable_biggerequal[8, 12] := @biggerequal_single_widestring;
  mTable_biggerequal[8, 13] := @biggerequal_single_pchar;
  mTable_biggerequal[8, 14] := @biggerequal_single_pointer;
  mTable_biggerequal[8, 15] := @biggerequal_single_object;
  mTable_biggerequal[9, 1] := @biggerequal_double_u8;
  mTable_biggerequal[9, 2] := @biggerequal_double_s8;
  mTable_biggerequal[9, 3] := @biggerequal_double_u16;
  mTable_biggerequal[9, 4] := @biggerequal_double_s16;
  mTable_biggerequal[9, 5] := @biggerequal_double_u32;
  mTable_biggerequal[9, 6] := @biggerequal_double_s32;
  mTable_biggerequal[9, 7] := @biggerequal_double_s64;
  mTable_biggerequal[9, 8] := @biggerequal_double_single;
  mTable_biggerequal[9, 9] := @biggerequal_double_double;
  mTable_biggerequal[9, 10] := @biggerequal_double_string;
  mTable_biggerequal[9, 11] := @biggerequal_double_utf8string;
  mTable_biggerequal[9, 12] := @biggerequal_double_widestring;
  mTable_biggerequal[9, 13] := @biggerequal_double_pchar;
  mTable_biggerequal[9, 14] := @biggerequal_double_pointer;
  mTable_biggerequal[9, 15] := @biggerequal_double_object;
  mTable_biggerequal[10, 1] := @biggerequal_string_u8;
  mTable_biggerequal[10, 2] := @biggerequal_string_s8;
  mTable_biggerequal[10, 3] := @biggerequal_string_u16;
  mTable_biggerequal[10, 4] := @biggerequal_string_s16;
  mTable_biggerequal[10, 5] := @biggerequal_string_u32;
  mTable_biggerequal[10, 6] := @biggerequal_string_s32;
  mTable_biggerequal[10, 7] := @biggerequal_string_s64;
  mTable_biggerequal[10, 8] := @biggerequal_string_single;
  mTable_biggerequal[10, 9] := @biggerequal_string_double;
  mTable_biggerequal[10, 10] := @biggerequal_string_string;
  mTable_biggerequal[10, 11] := @biggerequal_string_utf8string;
  mTable_biggerequal[10, 12] := @biggerequal_string_widestring;
  mTable_biggerequal[10, 13] := @biggerequal_string_pchar;
  mTable_biggerequal[10, 14] := @biggerequal_string_pointer;
  mTable_biggerequal[10, 15] := @biggerequal_string_object;
  mTable_biggerequal[11, 1] := @biggerequal_utf8string_u8;
  mTable_biggerequal[11, 2] := @biggerequal_utf8string_s8;
  mTable_biggerequal[11, 3] := @biggerequal_utf8string_u16;
  mTable_biggerequal[11, 4] := @biggerequal_utf8string_s16;
  mTable_biggerequal[11, 5] := @biggerequal_utf8string_u32;
  mTable_biggerequal[11, 6] := @biggerequal_utf8string_s32;
  mTable_biggerequal[11, 7] := @biggerequal_utf8string_s64;
  mTable_biggerequal[11, 8] := @biggerequal_utf8string_single;
  mTable_biggerequal[11, 9] := @biggerequal_utf8string_double;
  mTable_biggerequal[11, 10] := @biggerequal_utf8string_string;
  mTable_biggerequal[11, 11] := @biggerequal_utf8string_utf8string;
  mTable_biggerequal[11, 12] := @biggerequal_utf8string_widestring;
  mTable_biggerequal[11, 13] := @biggerequal_utf8string_pchar;
  mTable_biggerequal[11, 14] := @biggerequal_utf8string_pointer;
  mTable_biggerequal[11, 15] := @biggerequal_utf8string_object;
  mTable_biggerequal[12, 1] := @biggerequal_widestring_u8;
  mTable_biggerequal[12, 2] := @biggerequal_widestring_s8;
  mTable_biggerequal[12, 3] := @biggerequal_widestring_u16;
  mTable_biggerequal[12, 4] := @biggerequal_widestring_s16;
  mTable_biggerequal[12, 5] := @biggerequal_widestring_u32;
  mTable_biggerequal[12, 6] := @biggerequal_widestring_s32;
  mTable_biggerequal[12, 7] := @biggerequal_widestring_s64;
  mTable_biggerequal[12, 8] := @biggerequal_widestring_single;
  mTable_biggerequal[12, 9] := @biggerequal_widestring_double;
  mTable_biggerequal[12, 10] := @biggerequal_widestring_string;
  mTable_biggerequal[12, 11] := @biggerequal_widestring_utf8string;
  mTable_biggerequal[12, 12] := @biggerequal_widestring_widestring;
  mTable_biggerequal[12, 13] := @biggerequal_widestring_pchar;
  mTable_biggerequal[12, 14] := @biggerequal_widestring_pointer;
  mTable_biggerequal[12, 15] := @biggerequal_widestring_object;
  mTable_biggerequal[13, 1] := @biggerequal_pchar_u8;
  mTable_biggerequal[13, 2] := @biggerequal_pchar_s8;
  mTable_biggerequal[13, 3] := @biggerequal_pchar_u16;
  mTable_biggerequal[13, 4] := @biggerequal_pchar_s16;
  mTable_biggerequal[13, 5] := @biggerequal_pchar_u32;
  mTable_biggerequal[13, 6] := @biggerequal_pchar_s32;
  mTable_biggerequal[13, 7] := @biggerequal_pchar_s64;
  mTable_biggerequal[13, 8] := @biggerequal_pchar_single;
  mTable_biggerequal[13, 9] := @biggerequal_pchar_double;
  mTable_biggerequal[13, 10] := @biggerequal_pchar_string;
  mTable_biggerequal[13, 11] := @biggerequal_pchar_utf8string;
  mTable_biggerequal[13, 12] := @biggerequal_pchar_widestring;
  mTable_biggerequal[13, 13] := @biggerequal_pchar_pchar;
  mTable_biggerequal[13, 14] := @biggerequal_pchar_pointer;
  mTable_biggerequal[13, 15] := @biggerequal_pchar_object;
  mTable_biggerequal[14, 1] := @biggerequal_pointer_u8;
  mTable_biggerequal[14, 2] := @biggerequal_pointer_s8;
  mTable_biggerequal[14, 3] := @biggerequal_pointer_u16;
  mTable_biggerequal[14, 4] := @biggerequal_pointer_s16;
  mTable_biggerequal[14, 5] := @biggerequal_pointer_u32;
  mTable_biggerequal[14, 6] := @biggerequal_pointer_s32;
  mTable_biggerequal[14, 7] := @biggerequal_pointer_s64;
  mTable_biggerequal[14, 8] := @biggerequal_pointer_single;
  mTable_biggerequal[14, 9] := @biggerequal_pointer_double;
  mTable_biggerequal[14, 10] := @biggerequal_pointer_string;
  mTable_biggerequal[14, 11] := @biggerequal_pointer_utf8string;
  mTable_biggerequal[14, 12] := @biggerequal_pointer_widestring;
  mTable_biggerequal[14, 13] := @biggerequal_pointer_pchar;
  mTable_biggerequal[14, 14] := @biggerequal_pointer_pointer;
  mTable_biggerequal[14, 15] := @biggerequal_pointer_object;
  mTable_biggerequal[15, 1] := @biggerequal_object_u8;
  mTable_biggerequal[15, 2] := @biggerequal_object_s8;
  mTable_biggerequal[15, 3] := @biggerequal_object_u16;
  mTable_biggerequal[15, 4] := @biggerequal_object_s16;
  mTable_biggerequal[15, 5] := @biggerequal_object_u32;
  mTable_biggerequal[15, 6] := @biggerequal_object_s32;
  mTable_biggerequal[15, 7] := @biggerequal_object_s64;
  mTable_biggerequal[15, 8] := @biggerequal_object_single;
  mTable_biggerequal[15, 9] := @biggerequal_object_double;
  mTable_biggerequal[15, 10] := @biggerequal_object_string;
  mTable_biggerequal[15, 11] := @biggerequal_object_utf8string;
  mTable_biggerequal[15, 12] := @biggerequal_object_widestring;
  mTable_biggerequal[15, 13] := @biggerequal_object_pchar;
  mTable_biggerequal[15, 14] := @biggerequal_object_pointer;
  mTable_biggerequal[15, 15] := @biggerequal_object_object;
end;

procedure InitTable_equal;
begin
  mTable_equal[1, 1] := @equal_u8_u8;
  mTable_equal[1, 2] := @equal_u8_s8;
  mTable_equal[1, 3] := @equal_u8_u16;
  mTable_equal[1, 4] := @equal_u8_s16;
  mTable_equal[1, 5] := @equal_u8_u32;
  mTable_equal[1, 6] := @equal_u8_s32;
  mTable_equal[1, 7] := @equal_u8_s64;
  mTable_equal[1, 8] := @equal_u8_single;
  mTable_equal[1, 9] := @equal_u8_double;
  mTable_equal[1, 10] := @equal_u8_string;
  mTable_equal[1, 11] := @equal_u8_utf8string;
  mTable_equal[1, 12] := @equal_u8_widestring;
  mTable_equal[1, 13] := @equal_u8_pchar;
  mTable_equal[1, 14] := @equal_u8_pointer;
  mTable_equal[1, 15] := @equal_u8_object;
  mTable_equal[2, 1] := @equal_s8_u8;
  mTable_equal[2, 2] := @equal_s8_s8;
  mTable_equal[2, 3] := @equal_s8_u16;
  mTable_equal[2, 4] := @equal_s8_s16;
  mTable_equal[2, 5] := @equal_s8_u32;
  mTable_equal[2, 6] := @equal_s8_s32;
  mTable_equal[2, 7] := @equal_s8_s64;
  mTable_equal[2, 8] := @equal_s8_single;
  mTable_equal[2, 9] := @equal_s8_double;
  mTable_equal[2, 10] := @equal_s8_string;
  mTable_equal[2, 11] := @equal_s8_utf8string;
  mTable_equal[2, 12] := @equal_s8_widestring;
  mTable_equal[2, 13] := @equal_s8_pchar;
  mTable_equal[2, 14] := @equal_s8_pointer;
  mTable_equal[2, 15] := @equal_s8_object;
  mTable_equal[3, 1] := @equal_u16_u8;
  mTable_equal[3, 2] := @equal_u16_s8;
  mTable_equal[3, 3] := @equal_u16_u16;
  mTable_equal[3, 4] := @equal_u16_s16;
  mTable_equal[3, 5] := @equal_u16_u32;
  mTable_equal[3, 6] := @equal_u16_s32;
  mTable_equal[3, 7] := @equal_u16_s64;
  mTable_equal[3, 8] := @equal_u16_single;
  mTable_equal[3, 9] := @equal_u16_double;
  mTable_equal[3, 10] := @equal_u16_string;
  mTable_equal[3, 11] := @equal_u16_utf8string;
  mTable_equal[3, 12] := @equal_u16_widestring;
  mTable_equal[3, 13] := @equal_u16_pchar;
  mTable_equal[3, 14] := @equal_u16_pointer;
  mTable_equal[3, 15] := @equal_u16_object;
  mTable_equal[4, 1] := @equal_s16_u8;
  mTable_equal[4, 2] := @equal_s16_s8;
  mTable_equal[4, 3] := @equal_s16_u16;
  mTable_equal[4, 4] := @equal_s16_s16;
  mTable_equal[4, 5] := @equal_s16_u32;
  mTable_equal[4, 6] := @equal_s16_s32;
  mTable_equal[4, 7] := @equal_s16_s64;
  mTable_equal[4, 8] := @equal_s16_single;
  mTable_equal[4, 9] := @equal_s16_double;
  mTable_equal[4, 10] := @equal_s16_string;
  mTable_equal[4, 11] := @equal_s16_utf8string;
  mTable_equal[4, 12] := @equal_s16_widestring;
  mTable_equal[4, 13] := @equal_s16_pchar;
  mTable_equal[4, 14] := @equal_s16_pointer;
  mTable_equal[4, 15] := @equal_s16_object;
  mTable_equal[5, 1] := @equal_u32_u8;
  mTable_equal[5, 2] := @equal_u32_s8;
  mTable_equal[5, 3] := @equal_u32_u16;
  mTable_equal[5, 4] := @equal_u32_s16;
  mTable_equal[5, 5] := @equal_u32_u32;
  mTable_equal[5, 6] := @equal_u32_s32;
  mTable_equal[5, 7] := @equal_u32_s64;
  mTable_equal[5, 8] := @equal_u32_single;
  mTable_equal[5, 9] := @equal_u32_double;
  mTable_equal[5, 10] := @equal_u32_string;
  mTable_equal[5, 11] := @equal_u32_utf8string;
  mTable_equal[5, 12] := @equal_u32_widestring;
  mTable_equal[5, 13] := @equal_u32_pchar;
  mTable_equal[5, 14] := @equal_u32_pointer;
  mTable_equal[5, 15] := @equal_u32_object;
  mTable_equal[6, 1] := @equal_s32_u8;
  mTable_equal[6, 2] := @equal_s32_s8;
  mTable_equal[6, 3] := @equal_s32_u16;
  mTable_equal[6, 4] := @equal_s32_s16;
  mTable_equal[6, 5] := @equal_s32_u32;
  mTable_equal[6, 6] := @equal_s32_s32;
  mTable_equal[6, 7] := @equal_s32_s64;
  mTable_equal[6, 8] := @equal_s32_single;
  mTable_equal[6, 9] := @equal_s32_double;
  mTable_equal[6, 10] := @equal_s32_string;
  mTable_equal[6, 11] := @equal_s32_utf8string;
  mTable_equal[6, 12] := @equal_s32_widestring;
  mTable_equal[6, 13] := @equal_s32_pchar;
  mTable_equal[6, 14] := @equal_s32_pointer;
  mTable_equal[6, 15] := @equal_s32_object;
  mTable_equal[7, 1] := @equal_s64_u8;
  mTable_equal[7, 2] := @equal_s64_s8;
  mTable_equal[7, 3] := @equal_s64_u16;
  mTable_equal[7, 4] := @equal_s64_s16;
  mTable_equal[7, 5] := @equal_s64_u32;
  mTable_equal[7, 6] := @equal_s64_s32;
  mTable_equal[7, 7] := @equal_s64_s64;
  mTable_equal[7, 8] := @equal_s64_single;
  mTable_equal[7, 9] := @equal_s64_double;
  mTable_equal[7, 10] := @equal_s64_string;
  mTable_equal[7, 11] := @equal_s64_utf8string;
  mTable_equal[7, 12] := @equal_s64_widestring;
  mTable_equal[7, 13] := @equal_s64_pchar;
  mTable_equal[7, 14] := @equal_s64_pointer;
  mTable_equal[7, 15] := @equal_s64_object;
  mTable_equal[8, 1] := @equal_single_u8;
  mTable_equal[8, 2] := @equal_single_s8;
  mTable_equal[8, 3] := @equal_single_u16;
  mTable_equal[8, 4] := @equal_single_s16;
  mTable_equal[8, 5] := @equal_single_u32;
  mTable_equal[8, 6] := @equal_single_s32;
  mTable_equal[8, 7] := @equal_single_s64;
  mTable_equal[8, 8] := @equal_single_single;
  mTable_equal[8, 9] := @equal_single_double;
  mTable_equal[8, 10] := @equal_single_string;
  mTable_equal[8, 11] := @equal_single_utf8string;
  mTable_equal[8, 12] := @equal_single_widestring;
  mTable_equal[8, 13] := @equal_single_pchar;
  mTable_equal[8, 14] := @equal_single_pointer;
  mTable_equal[8, 15] := @equal_single_object;
  mTable_equal[9, 1] := @equal_double_u8;
  mTable_equal[9, 2] := @equal_double_s8;
  mTable_equal[9, 3] := @equal_double_u16;
  mTable_equal[9, 4] := @equal_double_s16;
  mTable_equal[9, 5] := @equal_double_u32;
  mTable_equal[9, 6] := @equal_double_s32;
  mTable_equal[9, 7] := @equal_double_s64;
  mTable_equal[9, 8] := @equal_double_single;
  mTable_equal[9, 9] := @equal_double_double;
  mTable_equal[9, 10] := @equal_double_string;
  mTable_equal[9, 11] := @equal_double_utf8string;
  mTable_equal[9, 12] := @equal_double_widestring;
  mTable_equal[9, 13] := @equal_double_pchar;
  mTable_equal[9, 14] := @equal_double_pointer;
  mTable_equal[9, 15] := @equal_double_object;
  mTable_equal[10, 1] := @equal_string_u8;
  mTable_equal[10, 2] := @equal_string_s8;
  mTable_equal[10, 3] := @equal_string_u16;
  mTable_equal[10, 4] := @equal_string_s16;
  mTable_equal[10, 5] := @equal_string_u32;
  mTable_equal[10, 6] := @equal_string_s32;
  mTable_equal[10, 7] := @equal_string_s64;
  mTable_equal[10, 8] := @equal_string_single;
  mTable_equal[10, 9] := @equal_string_double;
  mTable_equal[10, 10] := @equal_string_string;
  mTable_equal[10, 11] := @equal_string_utf8string;
  mTable_equal[10, 12] := @equal_string_widestring;
  mTable_equal[10, 13] := @equal_string_pchar;
  mTable_equal[10, 14] := @equal_string_pointer;
  mTable_equal[10, 15] := @equal_string_object;
  mTable_equal[11, 1] := @equal_utf8string_u8;
  mTable_equal[11, 2] := @equal_utf8string_s8;
  mTable_equal[11, 3] := @equal_utf8string_u16;
  mTable_equal[11, 4] := @equal_utf8string_s16;
  mTable_equal[11, 5] := @equal_utf8string_u32;
  mTable_equal[11, 6] := @equal_utf8string_s32;
  mTable_equal[11, 7] := @equal_utf8string_s64;
  mTable_equal[11, 8] := @equal_utf8string_single;
  mTable_equal[11, 9] := @equal_utf8string_double;
  mTable_equal[11, 10] := @equal_utf8string_string;
  mTable_equal[11, 11] := @equal_utf8string_utf8string;
  mTable_equal[11, 12] := @equal_utf8string_widestring;
  mTable_equal[11, 13] := @equal_utf8string_pchar;
  mTable_equal[11, 14] := @equal_utf8string_pointer;
  mTable_equal[11, 15] := @equal_utf8string_object;
  mTable_equal[12, 1] := @equal_widestring_u8;
  mTable_equal[12, 2] := @equal_widestring_s8;
  mTable_equal[12, 3] := @equal_widestring_u16;
  mTable_equal[12, 4] := @equal_widestring_s16;
  mTable_equal[12, 5] := @equal_widestring_u32;
  mTable_equal[12, 6] := @equal_widestring_s32;
  mTable_equal[12, 7] := @equal_widestring_s64;
  mTable_equal[12, 8] := @equal_widestring_single;
  mTable_equal[12, 9] := @equal_widestring_double;
  mTable_equal[12, 10] := @equal_widestring_string;
  mTable_equal[12, 11] := @equal_widestring_utf8string;
  mTable_equal[12, 12] := @equal_widestring_widestring;
  mTable_equal[12, 13] := @equal_widestring_pchar;
  mTable_equal[12, 14] := @equal_widestring_pointer;
  mTable_equal[12, 15] := @equal_widestring_object;
  mTable_equal[13, 1] := @equal_pchar_u8;
  mTable_equal[13, 2] := @equal_pchar_s8;
  mTable_equal[13, 3] := @equal_pchar_u16;
  mTable_equal[13, 4] := @equal_pchar_s16;
  mTable_equal[13, 5] := @equal_pchar_u32;
  mTable_equal[13, 6] := @equal_pchar_s32;
  mTable_equal[13, 7] := @equal_pchar_s64;
  mTable_equal[13, 8] := @equal_pchar_single;
  mTable_equal[13, 9] := @equal_pchar_double;
  mTable_equal[13, 10] := @equal_pchar_string;
  mTable_equal[13, 11] := @equal_pchar_utf8string;
  mTable_equal[13, 12] := @equal_pchar_widestring;
  mTable_equal[13, 13] := @equal_pchar_pchar;
  mTable_equal[13, 14] := @equal_pchar_pointer;
  mTable_equal[13, 15] := @equal_pchar_object;
  mTable_equal[14, 1] := @equal_pointer_u8;
  mTable_equal[14, 2] := @equal_pointer_s8;
  mTable_equal[14, 3] := @equal_pointer_u16;
  mTable_equal[14, 4] := @equal_pointer_s16;
  mTable_equal[14, 5] := @equal_pointer_u32;
  mTable_equal[14, 6] := @equal_pointer_s32;
  mTable_equal[14, 7] := @equal_pointer_s64;
  mTable_equal[14, 8] := @equal_pointer_single;
  mTable_equal[14, 9] := @equal_pointer_double;
  mTable_equal[14, 10] := @equal_pointer_string;
  mTable_equal[14, 11] := @equal_pointer_utf8string;
  mTable_equal[14, 12] := @equal_pointer_widestring;
  mTable_equal[14, 13] := @equal_pointer_pchar;
  mTable_equal[14, 14] := @equal_pointer_pointer;
  mTable_equal[14, 15] := @equal_pointer_object;
  mTable_equal[15, 1] := @equal_object_u8;
  mTable_equal[15, 2] := @equal_object_s8;
  mTable_equal[15, 3] := @equal_object_u16;
  mTable_equal[15, 4] := @equal_object_s16;
  mTable_equal[15, 5] := @equal_object_u32;
  mTable_equal[15, 6] := @equal_object_s32;
  mTable_equal[15, 7] := @equal_object_s64;
  mTable_equal[15, 8] := @equal_object_single;
  mTable_equal[15, 9] := @equal_object_double;
  mTable_equal[15, 10] := @equal_object_string;
  mTable_equal[15, 11] := @equal_object_utf8string;
  mTable_equal[15, 12] := @equal_object_widestring;
  mTable_equal[15, 13] := @equal_object_pchar;
  mTable_equal[15, 14] := @equal_object_pointer;
  mTable_equal[15, 15] := @equal_object_object;
end;

procedure InitTable_unequal;
begin
  mTable_unequal[1, 1] := @unequal_u8_u8;
  mTable_unequal[1, 2] := @unequal_u8_s8;
  mTable_unequal[1, 3] := @unequal_u8_u16;
  mTable_unequal[1, 4] := @unequal_u8_s16;
  mTable_unequal[1, 5] := @unequal_u8_u32;
  mTable_unequal[1, 6] := @unequal_u8_s32;
  mTable_unequal[1, 7] := @unequal_u8_s64;
  mTable_unequal[1, 8] := @unequal_u8_single;
  mTable_unequal[1, 9] := @unequal_u8_double;
  mTable_unequal[1, 10] := @unequal_u8_string;
  mTable_unequal[1, 11] := @unequal_u8_utf8string;
  mTable_unequal[1, 12] := @unequal_u8_widestring;
  mTable_unequal[1, 13] := @unequal_u8_pchar;
  mTable_unequal[1, 14] := @unequal_u8_pointer;
  mTable_unequal[1, 15] := @unequal_u8_object;
  mTable_unequal[2, 1] := @unequal_s8_u8;
  mTable_unequal[2, 2] := @unequal_s8_s8;
  mTable_unequal[2, 3] := @unequal_s8_u16;
  mTable_unequal[2, 4] := @unequal_s8_s16;
  mTable_unequal[2, 5] := @unequal_s8_u32;
  mTable_unequal[2, 6] := @unequal_s8_s32;
  mTable_unequal[2, 7] := @unequal_s8_s64;
  mTable_unequal[2, 8] := @unequal_s8_single;
  mTable_unequal[2, 9] := @unequal_s8_double;
  mTable_unequal[2, 10] := @unequal_s8_string;
  mTable_unequal[2, 11] := @unequal_s8_utf8string;
  mTable_unequal[2, 12] := @unequal_s8_widestring;
  mTable_unequal[2, 13] := @unequal_s8_pchar;
  mTable_unequal[2, 14] := @unequal_s8_pointer;
  mTable_unequal[2, 15] := @unequal_s8_object;
  mTable_unequal[3, 1] := @unequal_u16_u8;
  mTable_unequal[3, 2] := @unequal_u16_s8;
  mTable_unequal[3, 3] := @unequal_u16_u16;
  mTable_unequal[3, 4] := @unequal_u16_s16;
  mTable_unequal[3, 5] := @unequal_u16_u32;
  mTable_unequal[3, 6] := @unequal_u16_s32;
  mTable_unequal[3, 7] := @unequal_u16_s64;
  mTable_unequal[3, 8] := @unequal_u16_single;
  mTable_unequal[3, 9] := @unequal_u16_double;
  mTable_unequal[3, 10] := @unequal_u16_string;
  mTable_unequal[3, 11] := @unequal_u16_utf8string;
  mTable_unequal[3, 12] := @unequal_u16_widestring;
  mTable_unequal[3, 13] := @unequal_u16_pchar;
  mTable_unequal[3, 14] := @unequal_u16_pointer;
  mTable_unequal[3, 15] := @unequal_u16_object;
  mTable_unequal[4, 1] := @unequal_s16_u8;
  mTable_unequal[4, 2] := @unequal_s16_s8;
  mTable_unequal[4, 3] := @unequal_s16_u16;
  mTable_unequal[4, 4] := @unequal_s16_s16;
  mTable_unequal[4, 5] := @unequal_s16_u32;
  mTable_unequal[4, 6] := @unequal_s16_s32;
  mTable_unequal[4, 7] := @unequal_s16_s64;
  mTable_unequal[4, 8] := @unequal_s16_single;
  mTable_unequal[4, 9] := @unequal_s16_double;
  mTable_unequal[4, 10] := @unequal_s16_string;
  mTable_unequal[4, 11] := @unequal_s16_utf8string;
  mTable_unequal[4, 12] := @unequal_s16_widestring;
  mTable_unequal[4, 13] := @unequal_s16_pchar;
  mTable_unequal[4, 14] := @unequal_s16_pointer;
  mTable_unequal[4, 15] := @unequal_s16_object;
  mTable_unequal[5, 1] := @unequal_u32_u8;
  mTable_unequal[5, 2] := @unequal_u32_s8;
  mTable_unequal[5, 3] := @unequal_u32_u16;
  mTable_unequal[5, 4] := @unequal_u32_s16;
  mTable_unequal[5, 5] := @unequal_u32_u32;
  mTable_unequal[5, 6] := @unequal_u32_s32;
  mTable_unequal[5, 7] := @unequal_u32_s64;
  mTable_unequal[5, 8] := @unequal_u32_single;
  mTable_unequal[5, 9] := @unequal_u32_double;
  mTable_unequal[5, 10] := @unequal_u32_string;
  mTable_unequal[5, 11] := @unequal_u32_utf8string;
  mTable_unequal[5, 12] := @unequal_u32_widestring;
  mTable_unequal[5, 13] := @unequal_u32_pchar;
  mTable_unequal[5, 14] := @unequal_u32_pointer;
  mTable_unequal[5, 15] := @unequal_u32_object;
  mTable_unequal[6, 1] := @unequal_s32_u8;
  mTable_unequal[6, 2] := @unequal_s32_s8;
  mTable_unequal[6, 3] := @unequal_s32_u16;
  mTable_unequal[6, 4] := @unequal_s32_s16;
  mTable_unequal[6, 5] := @unequal_s32_u32;
  mTable_unequal[6, 6] := @unequal_s32_s32;
  mTable_unequal[6, 7] := @unequal_s32_s64;
  mTable_unequal[6, 8] := @unequal_s32_single;
  mTable_unequal[6, 9] := @unequal_s32_double;
  mTable_unequal[6, 10] := @unequal_s32_string;
  mTable_unequal[6, 11] := @unequal_s32_utf8string;
  mTable_unequal[6, 12] := @unequal_s32_widestring;
  mTable_unequal[6, 13] := @unequal_s32_pchar;
  mTable_unequal[6, 14] := @unequal_s32_pointer;
  mTable_unequal[6, 15] := @unequal_s32_object;
  mTable_unequal[7, 1] := @unequal_s64_u8;
  mTable_unequal[7, 2] := @unequal_s64_s8;
  mTable_unequal[7, 3] := @unequal_s64_u16;
  mTable_unequal[7, 4] := @unequal_s64_s16;
  mTable_unequal[7, 5] := @unequal_s64_u32;
  mTable_unequal[7, 6] := @unequal_s64_s32;
  mTable_unequal[7, 7] := @unequal_s64_s64;
  mTable_unequal[7, 8] := @unequal_s64_single;
  mTable_unequal[7, 9] := @unequal_s64_double;
  mTable_unequal[7, 10] := @unequal_s64_string;
  mTable_unequal[7, 11] := @unequal_s64_utf8string;
  mTable_unequal[7, 12] := @unequal_s64_widestring;
  mTable_unequal[7, 13] := @unequal_s64_pchar;
  mTable_unequal[7, 14] := @unequal_s64_pointer;
  mTable_unequal[7, 15] := @unequal_s64_object;
  mTable_unequal[8, 1] := @unequal_single_u8;
  mTable_unequal[8, 2] := @unequal_single_s8;
  mTable_unequal[8, 3] := @unequal_single_u16;
  mTable_unequal[8, 4] := @unequal_single_s16;
  mTable_unequal[8, 5] := @unequal_single_u32;
  mTable_unequal[8, 6] := @unequal_single_s32;
  mTable_unequal[8, 7] := @unequal_single_s64;
  mTable_unequal[8, 8] := @unequal_single_single;
  mTable_unequal[8, 9] := @unequal_single_double;
  mTable_unequal[8, 10] := @unequal_single_string;
  mTable_unequal[8, 11] := @unequal_single_utf8string;
  mTable_unequal[8, 12] := @unequal_single_widestring;
  mTable_unequal[8, 13] := @unequal_single_pchar;
  mTable_unequal[8, 14] := @unequal_single_pointer;
  mTable_unequal[8, 15] := @unequal_single_object;
  mTable_unequal[9, 1] := @unequal_double_u8;
  mTable_unequal[9, 2] := @unequal_double_s8;
  mTable_unequal[9, 3] := @unequal_double_u16;
  mTable_unequal[9, 4] := @unequal_double_s16;
  mTable_unequal[9, 5] := @unequal_double_u32;
  mTable_unequal[9, 6] := @unequal_double_s32;
  mTable_unequal[9, 7] := @unequal_double_s64;
  mTable_unequal[9, 8] := @unequal_double_single;
  mTable_unequal[9, 9] := @unequal_double_double;
  mTable_unequal[9, 10] := @unequal_double_string;
  mTable_unequal[9, 11] := @unequal_double_utf8string;
  mTable_unequal[9, 12] := @unequal_double_widestring;
  mTable_unequal[9, 13] := @unequal_double_pchar;
  mTable_unequal[9, 14] := @unequal_double_pointer;
  mTable_unequal[9, 15] := @unequal_double_object;
  mTable_unequal[10, 1] := @unequal_string_u8;
  mTable_unequal[10, 2] := @unequal_string_s8;
  mTable_unequal[10, 3] := @unequal_string_u16;
  mTable_unequal[10, 4] := @unequal_string_s16;
  mTable_unequal[10, 5] := @unequal_string_u32;
  mTable_unequal[10, 6] := @unequal_string_s32;
  mTable_unequal[10, 7] := @unequal_string_s64;
  mTable_unequal[10, 8] := @unequal_string_single;
  mTable_unequal[10, 9] := @unequal_string_double;
  mTable_unequal[10, 10] := @unequal_string_string;
  mTable_unequal[10, 11] := @unequal_string_utf8string;
  mTable_unequal[10, 12] := @unequal_string_widestring;
  mTable_unequal[10, 13] := @unequal_string_pchar;
  mTable_unequal[10, 14] := @unequal_string_pointer;
  mTable_unequal[10, 15] := @unequal_string_object;
  mTable_unequal[11, 1] := @unequal_utf8string_u8;
  mTable_unequal[11, 2] := @unequal_utf8string_s8;
  mTable_unequal[11, 3] := @unequal_utf8string_u16;
  mTable_unequal[11, 4] := @unequal_utf8string_s16;
  mTable_unequal[11, 5] := @unequal_utf8string_u32;
  mTable_unequal[11, 6] := @unequal_utf8string_s32;
  mTable_unequal[11, 7] := @unequal_utf8string_s64;
  mTable_unequal[11, 8] := @unequal_utf8string_single;
  mTable_unequal[11, 9] := @unequal_utf8string_double;
  mTable_unequal[11, 10] := @unequal_utf8string_string;
  mTable_unequal[11, 11] := @unequal_utf8string_utf8string;
  mTable_unequal[11, 12] := @unequal_utf8string_widestring;
  mTable_unequal[11, 13] := @unequal_utf8string_pchar;
  mTable_unequal[11, 14] := @unequal_utf8string_pointer;
  mTable_unequal[11, 15] := @unequal_utf8string_object;
  mTable_unequal[12, 1] := @unequal_widestring_u8;
  mTable_unequal[12, 2] := @unequal_widestring_s8;
  mTable_unequal[12, 3] := @unequal_widestring_u16;
  mTable_unequal[12, 4] := @unequal_widestring_s16;
  mTable_unequal[12, 5] := @unequal_widestring_u32;
  mTable_unequal[12, 6] := @unequal_widestring_s32;
  mTable_unequal[12, 7] := @unequal_widestring_s64;
  mTable_unequal[12, 8] := @unequal_widestring_single;
  mTable_unequal[12, 9] := @unequal_widestring_double;
  mTable_unequal[12, 10] := @unequal_widestring_string;
  mTable_unequal[12, 11] := @unequal_widestring_utf8string;
  mTable_unequal[12, 12] := @unequal_widestring_widestring;
  mTable_unequal[12, 13] := @unequal_widestring_pchar;
  mTable_unequal[12, 14] := @unequal_widestring_pointer;
  mTable_unequal[12, 15] := @unequal_widestring_object;
  mTable_unequal[13, 1] := @unequal_pchar_u8;
  mTable_unequal[13, 2] := @unequal_pchar_s8;
  mTable_unequal[13, 3] := @unequal_pchar_u16;
  mTable_unequal[13, 4] := @unequal_pchar_s16;
  mTable_unequal[13, 5] := @unequal_pchar_u32;
  mTable_unequal[13, 6] := @unequal_pchar_s32;
  mTable_unequal[13, 7] := @unequal_pchar_s64;
  mTable_unequal[13, 8] := @unequal_pchar_single;
  mTable_unequal[13, 9] := @unequal_pchar_double;
  mTable_unequal[13, 10] := @unequal_pchar_string;
  mTable_unequal[13, 11] := @unequal_pchar_utf8string;
  mTable_unequal[13, 12] := @unequal_pchar_widestring;
  mTable_unequal[13, 13] := @unequal_pchar_pchar;
  mTable_unequal[13, 14] := @unequal_pchar_pointer;
  mTable_unequal[13, 15] := @unequal_pchar_object;
  mTable_unequal[14, 1] := @unequal_pointer_u8;
  mTable_unequal[14, 2] := @unequal_pointer_s8;
  mTable_unequal[14, 3] := @unequal_pointer_u16;
  mTable_unequal[14, 4] := @unequal_pointer_s16;
  mTable_unequal[14, 5] := @unequal_pointer_u32;
  mTable_unequal[14, 6] := @unequal_pointer_s32;
  mTable_unequal[14, 7] := @unequal_pointer_s64;
  mTable_unequal[14, 8] := @unequal_pointer_single;
  mTable_unequal[14, 9] := @unequal_pointer_double;
  mTable_unequal[14, 10] := @unequal_pointer_string;
  mTable_unequal[14, 11] := @unequal_pointer_utf8string;
  mTable_unequal[14, 12] := @unequal_pointer_widestring;
  mTable_unequal[14, 13] := @unequal_pointer_pchar;
  mTable_unequal[14, 14] := @unequal_pointer_pointer;
  mTable_unequal[14, 15] := @unequal_pointer_object;
  mTable_unequal[15, 1] := @unequal_object_u8;
  mTable_unequal[15, 2] := @unequal_object_s8;
  mTable_unequal[15, 3] := @unequal_object_u16;
  mTable_unequal[15, 4] := @unequal_object_s16;
  mTable_unequal[15, 5] := @unequal_object_u32;
  mTable_unequal[15, 6] := @unequal_object_s32;
  mTable_unequal[15, 7] := @unequal_object_s64;
  mTable_unequal[15, 8] := @unequal_object_single;
  mTable_unequal[15, 9] := @unequal_object_double;
  mTable_unequal[15, 10] := @unequal_object_string;
  mTable_unequal[15, 11] := @unequal_object_utf8string;
  mTable_unequal[15, 12] := @unequal_object_widestring;
  mTable_unequal[15, 13] := @unequal_object_pchar;
  mTable_unequal[15, 14] := @unequal_object_pointer;
  mTable_unequal[15, 15] := @unequal_object_object;
end;

initialization
  InitTable_add;
  InitTable_sub;
  InitTable_mul;
  InitTable_div;
  InitTable_and;
  InitTable_or;
  InitTable_xor;
  InitTable_shr;
  InitTable_shl;
  InitTable_mod;

  InitTable_smaller;
  InitTable_smallerequal;
  InitTable_bigger;
  InitTable_biggerequal;
  InitTable_equal;
  InitTable_unequal;

end.
